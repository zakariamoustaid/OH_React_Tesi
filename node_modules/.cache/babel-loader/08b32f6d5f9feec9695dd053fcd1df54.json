{"ast":null,"code":"import { Configuration, TherapyControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { CREATE_THERAPY_FAIL, CREATE_THERAPY_LOADING, CREATE_THERAPY_RESET, CREATE_THERAPY_SUCCESS, GET_THERAPY_FAIL, GET_THERAPY_LOADING, GET_THERAPY_SUCCESS, GET_THERAPY_SUCCESS_EMPTY } from \"./consts\";\nconst therapyControllerApi = new TherapyControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const createTherapy = thRowDTO => dispatch => {\n  dispatch({\n    type: CREATE_THERAPY_LOADING\n  });\n  therapyControllerApi.newTherapyUsingPOST({\n    thRowDTO\n  }).subscribe(payload => {\n    dispatch({\n      type: CREATE_THERAPY_SUCCESS,\n      payload: payload\n    });\n  }, error => {\n    dispatch({\n      type: CREATE_THERAPY_FAIL,\n      error: error\n    });\n  });\n};\nexport const createTherapyReset = () => dispatch => {\n  dispatch({\n    type: CREATE_THERAPY_RESET\n  });\n};\nexport const getTherapiesByPatientId = codePatient => dispatch => {\n  dispatch({\n    type: GET_THERAPY_LOADING\n  });\n\n  if (codePatient) {\n    therapyControllerApi.getTherapyRowsUsingGET({\n      codePatient\n    }).subscribe(payload => {\n      if (Array.isArray(payload) && payload.length > 0) {\n        dispatch({\n          type: GET_THERAPY_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: GET_THERAPY_SUCCESS_EMPTY,\n          payload: []\n        });\n      }\n    }, error => {\n      dispatch({\n        type: GET_THERAPY_FAIL,\n        error\n      });\n    });\n  } else {\n    dispatch({\n      type: GET_THERAPY_FAIL,\n      error: \"The patient code should not be null\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/state/therapies/actions.ts"],"names":["Configuration","TherapyControllerApi","applyTokenMiddleware","CREATE_THERAPY_FAIL","CREATE_THERAPY_LOADING","CREATE_THERAPY_RESET","CREATE_THERAPY_SUCCESS","GET_THERAPY_FAIL","GET_THERAPY_LOADING","GET_THERAPY_SUCCESS","GET_THERAPY_SUCCESS_EMPTY","therapyControllerApi","middleware","createTherapy","thRowDTO","dispatch","type","newTherapyUsingPOST","subscribe","payload","error","createTherapyReset","getTherapiesByPatientId","codePatient","getTherapyRowsUsingGET","Array","isArray","length"],"mappings":"AACA,SACEA,aADF,EAEEC,oBAFF,QAIO,iBAJP;AAKA,SAASC,oBAAT,QAAqC,+CAArC;AAEA,SACEC,mBADF,EAEEC,sBAFF,EAGEC,oBAHF,EAIEC,sBAJF,EAKEC,gBALF,EAMEC,mBANF,EAOEC,mBAPF,EAQEC,yBARF,QASO,UATP;AAWA,MAAMC,oBAAoB,GAAG,IAAIV,oBAAJ,CAC3B,IAAID,aAAJ,CAAkB;AAAEY,EAAAA,UAAU,EAAE,CAACV,oBAAD;AAAd,CAAlB,CAD2B,CAA7B;AAIA,OAAO,MAAMW,aAAa,GACvBC,QAAD,IACCC,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAIAO,EAAAA,oBAAoB,CAACM,mBAArB,CAAyC;AAAEH,IAAAA;AAAF,GAAzC,EAAuDI,SAAvD,CACGC,OAAD,IAAa;AACXJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,sBADC;AAEPa,MAAAA,OAAO,EAAEA;AAFF,KAAD,CAAR;AAID,GANH,EAOGC,KAAD,IAAW;AACTL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEb,mBADC;AAEPiB,MAAAA,KAAK,EAAEA;AAFA,KAAD,CAAR;AAID,GAZH;AAcD,CArBI;AAuBP,OAAO,MAAMC,kBAAkB,GAC7B,MACCN,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEX;AADC,GAAD,CAAR;AAGD,CANI;AAQP,OAAO,MAAMiB,uBAAuB,GACjCC,WAAD,IACCR,QAAD,IAA4D;AAC1DA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAER;AADC,GAAD,CAAR;;AAGA,MAAIe,WAAJ,EAAiB;AACfZ,IAAAA,oBAAoB,CAACa,sBAArB,CAA4C;AAAED,MAAAA;AAAF,KAA5C,EAA6DL,SAA7D,CACGC,OAAD,IAAa;AACX,UAAIM,KAAK,CAACC,OAAN,CAAcP,OAAd,KAA0BA,OAAO,CAACQ,MAAR,GAAiB,CAA/C,EAAkD;AAChDZ,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEP,mBADC;AAEPU,UAAAA,OAAO,EAAEA;AAFF,SAAD,CAAR;AAID,OALD,MAKO;AACLJ,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEN,yBADC;AAEPS,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KAbH,EAcGC,KAAD,IAAW;AACTL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET,gBADC;AAEPa,QAAAA;AAFO,OAAD,CAAR;AAID,KAnBH;AAqBD,GAtBD,MAsBO;AACLL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,gBADC;AAEPa,MAAAA,KAAK,EAAE;AAFA,KAAD,CAAR;AAID;AACF,CAlCI","sourcesContent":["import { Dispatch } from \"redux\";\nimport {\n  Configuration,\n  TherapyControllerApi,\n  TherapyRowDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n  CREATE_THERAPY_FAIL,\n  CREATE_THERAPY_LOADING,\n  CREATE_THERAPY_RESET,\n  CREATE_THERAPY_SUCCESS,\n  GET_THERAPY_FAIL,\n  GET_THERAPY_LOADING,\n  GET_THERAPY_SUCCESS,\n  GET_THERAPY_SUCCESS_EMPTY,\n} from \"./consts\";\n\nconst therapyControllerApi = new TherapyControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const createTherapy =\n  (thRowDTO: TherapyRowDTO) =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_THERAPY_LOADING,\n    });\n\n    therapyControllerApi.newTherapyUsingPOST({ thRowDTO }).subscribe(\n      (payload) => {\n        dispatch({\n          type: CREATE_THERAPY_SUCCESS,\n          payload: payload,\n        });\n      },\n      (error) => {\n        dispatch({\n          type: CREATE_THERAPY_FAIL,\n          error: error,\n        });\n      }\n    );\n  };\n\nexport const createTherapyReset =\n  () =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_THERAPY_RESET,\n    });\n  };\n\nexport const getTherapiesByPatientId =\n  (codePatient: number | undefined) =>\n  (dispatch: Dispatch<IAction<TherapyRowDTO[], {}>>): void => {\n    dispatch({\n      type: GET_THERAPY_LOADING,\n    });\n    if (codePatient) {\n      therapyControllerApi.getTherapyRowsUsingGET({ codePatient }).subscribe(\n        (payload) => {\n          if (Array.isArray(payload) && payload.length > 0) {\n            dispatch({\n              type: GET_THERAPY_SUCCESS,\n              payload: payload,\n            });\n          } else {\n            dispatch({\n              type: GET_THERAPY_SUCCESS_EMPTY,\n              payload: [],\n            });\n          }\n        },\n        (error) => {\n          dispatch({\n            type: GET_THERAPY_FAIL,\n            error,\n          });\n        }\n      );\n    } else {\n      dispatch({\n        type: GET_THERAPY_FAIL,\n        error: \"The patient code should not be null\",\n      });\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}