{"ast":null,"code":"import isEmpty from \"lodash.isempty\";\nimport { Configuration, PatientControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { CREATE_PATIENT_FAIL, CREATE_PATIENT_LOADING, CREATE_PATIENT_RESET, CREATE_PATIENT_SUCCESS, GET_PATIENT_FAIL, GET_PATIENT_LOADING, GET_PATIENT_SUCCESS, SEARCH_PATIENT_FAIL, SEARCH_PATIENT_LOADING, SEARCH_PATIENT_SUCCESS, UPDATE_PATIENT_LOADING, UPDATE_PATIENT_FAIL, UPDATE_PATIENT_RESET, UPDATE_PATIENT_SUCCESS } from \"./consts\";\nconst patientControllerApi = new PatientControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const createPatient = newPatient => dispatch => {\n  dispatch({\n    type: CREATE_PATIENT_LOADING\n  });\n  patientControllerApi.newPatientUsingPOST({\n    newPatient\n  }).subscribe(() => {\n    dispatch({\n      type: CREATE_PATIENT_SUCCESS\n    });\n  }, error => {\n    dispatch({\n      type: CREATE_PATIENT_FAIL,\n      error\n    });\n  });\n};\nexport const updatePatient = (code, updatePatient) => dispatch => {\n  dispatch({\n    type: UPDATE_PATIENT_LOADING\n  });\n  patientControllerApi.updatePatientUsingPUT({\n    code,\n    updatePatient\n  }).subscribe(() => {\n    dispatch({\n      type: UPDATE_PATIENT_SUCCESS\n    });\n  }, error => {\n    dispatch({\n      type: UPDATE_PATIENT_FAIL,\n      error\n    });\n  });\n};\nexport const updatePatientReset = () => dispatch => {\n  dispatch({\n    type: UPDATE_PATIENT_RESET\n  });\n};\nexport const createPatientReset = () => dispatch => {\n  dispatch({\n    type: CREATE_PATIENT_RESET\n  });\n};\nexport const searchPatient = values => dispatch => {\n  dispatch({\n    type: SEARCH_PATIENT_LOADING\n  });\n\n  if (values.id) {\n    patientControllerApi.getPatientUsingGET({\n      code: parseInt(values.id)\n    }).subscribe(payload => {\n      if (typeof payload === \"\" && !isEmpty(payload)) {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload: [payload]\n        });\n      } else {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload: []\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_PATIENT_FAIL,\n        error\n      });\n    });\n  } else {\n    patientControllerApi.searchPatientUsingGET(values).subscribe(payload => {\n      if (Array.isArray(payload)) {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload\n        });\n      } else {\n        dispatch({\n          type: SEARCH_PATIENT_FAIL,\n          error: {\n            message: \"Unexpected response payload\"\n          }\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_PATIENT_FAIL,\n        error\n      });\n    });\n  }\n};\nexport const getPatientSuccess = patient => {\n  return {\n    type: GET_PATIENT_SUCCESS,\n    payload: patient\n  };\n};\nexport const getPatientThunk = id => dispatch => {\n  dispatch({\n    type: GET_PATIENT_LOADING\n  });\n  patientControllerApi.getPatientUsingGET({\n    code: parseInt(id)\n  }).subscribe(payload => {\n    if (typeof payload === \"object\" && !isEmpty(payload)) {\n      dispatch(getPatientSuccess(payload));\n    } else {\n      dispatch({\n        type: GET_PATIENT_FAIL,\n        error: {\n          message: \"Unexpected response payload\"\n        }\n      });\n    }\n  }, error => {\n    dispatch({\n      type: GET_PATIENT_FAIL,\n      error\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/patients/actions.ts"],"names":["isEmpty","Configuration","PatientControllerApi","applyTokenMiddleware","CREATE_PATIENT_FAIL","CREATE_PATIENT_LOADING","CREATE_PATIENT_RESET","CREATE_PATIENT_SUCCESS","GET_PATIENT_FAIL","GET_PATIENT_LOADING","GET_PATIENT_SUCCESS","SEARCH_PATIENT_FAIL","SEARCH_PATIENT_LOADING","SEARCH_PATIENT_SUCCESS","UPDATE_PATIENT_LOADING","UPDATE_PATIENT_FAIL","UPDATE_PATIENT_RESET","UPDATE_PATIENT_SUCCESS","patientControllerApi","middleware","createPatient","newPatient","dispatch","type","newPatientUsingPOST","subscribe","error","updatePatient","code","updatePatientUsingPUT","updatePatientReset","createPatientReset","searchPatient","values","id","getPatientUsingGET","parseInt","payload","searchPatientUsingGET","Array","isArray","message","getPatientSuccess","patient","getPatientThunk"],"mappings":"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","sourcesContent":["import isEmpty from \"lodash.isempty\";\nimport { Dispatch } from \"redux\";\nimport { TValues } from \"../../components/activities/searchPatientActivity/types\";\nimport {\n  Configuration,\n  PatientControllerApi,\n  PatientDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n  CREATE_PATIENT_FAIL,\n  CREATE_PATIENT_LOADING,\n  CREATE_PATIENT_RESET,\n  CREATE_PATIENT_SUCCESS,\n  GET_PATIENT_FAIL,\n  GET_PATIENT_LOADING,\n  GET_PATIENT_SUCCESS,\n  SEARCH_PATIENT_FAIL,\n  SEARCH_PATIENT_LOADING,\n  SEARCH_PATIENT_SUCCESS,\n  UPDATE_PATIENT_LOADING,\n  UPDATE_PATIENT_FAIL,\n  UPDATE_PATIENT_RESET,\n  UPDATE_PATIENT_SUCCESS,\n} from \"./consts\";\n\nconst patientControllerApi = new PatientControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const createPatient =\n  (newPatient: PatientDTO) =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_PATIENT_LOADING,\n    });\n\n    patientControllerApi.newPatientUsingPOST({ newPatient }).subscribe(\n      () => {\n        dispatch({\n          type: CREATE_PATIENT_SUCCESS,\n        });\n      },\n      (error) => {\n        dispatch({\n          type: CREATE_PATIENT_FAIL,\n          error,\n        });\n      }\n    );\n  };\n\nexport const updatePatient =\n  (code: number, updatePatient: PatientDTO) =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: UPDATE_PATIENT_LOADING,\n    });\n\n    patientControllerApi\n      .updatePatientUsingPUT({ code, updatePatient })\n      .subscribe(\n        () => {\n          dispatch({\n            type: UPDATE_PATIENT_SUCCESS,\n          });\n        },\n        (error) => {\n          dispatch({\n            type: UPDATE_PATIENT_FAIL,\n            error,\n          });\n        }\n      );\n  };\n\nexport const updatePatientReset =\n  () =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: UPDATE_PATIENT_RESET,\n    });\n  };\n\nexport const createPatientReset =\n  () =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_PATIENT_RESET,\n    });\n  };\n\nexport const searchPatient =\n  (values: TValues) =>\n  (dispatch: Dispatch<IAction<PatientDTO[], {}>>): void => {\n    dispatch({\n      type: SEARCH_PATIENT_LOADING,\n    });\n\n    if (values.id) {\n      patientControllerApi\n        .getPatientUsingGET({ code: parseInt(values.id) })\n        .subscribe(\n          (payload) => {\n            if (typeof payload === \"\" && !isEmpty(payload)) {\n              dispatch({\n                type: SEARCH_PATIENT_SUCCESS,\n                payload: [payload],\n              });\n            } else {\n              dispatch({\n                type: SEARCH_PATIENT_SUCCESS,\n                payload: [],\n              });\n            }\n          },\n          (error) => {\n            dispatch({\n              type: SEARCH_PATIENT_FAIL,\n              error,\n            });\n          }\n        );\n    } else {\n      patientControllerApi.searchPatientUsingGET(values).subscribe(\n        (payload) => {\n          if (Array.isArray(payload)) {\n            dispatch({\n              type: SEARCH_PATIENT_SUCCESS,\n              payload,\n            });\n          } else {\n            dispatch({\n              type: SEARCH_PATIENT_FAIL,\n              error: { message: \"Unexpected response payload\" },\n            });\n          }\n        },\n        (error) => {\n          dispatch({\n            type: SEARCH_PATIENT_FAIL,\n            error,\n          });\n        }\n      );\n    }\n  };\n\nexport const getPatientSuccess = (\n  patient: PatientDTO\n): IAction<PatientDTO, {}> => {\n  return {\n    type: GET_PATIENT_SUCCESS,\n    payload: patient,\n  };\n};\n\nexport const getPatientThunk =\n  (id: string) =>\n  (dispatch: Dispatch<IAction<PatientDTO, {}>>): void => {\n    dispatch({\n      type: GET_PATIENT_LOADING,\n    });\n\n    patientControllerApi.getPatientUsingGET({ code: parseInt(id) }).subscribe(\n      (payload) => {\n        if (typeof payload === \"object\" && !isEmpty(payload)) {\n          dispatch(getPatientSuccess(payload));\n        } else {\n          dispatch({\n            type: GET_PATIENT_FAIL,\n            error: { message: \"Unexpected response payload\" },\n          });\n        }\n      },\n      (error) => {\n        dispatch({\n          type: GET_PATIENT_FAIL,\n          error,\n        });\n      }\n    );\n  };\n"]},"metadata":{},"sourceType":"module"}