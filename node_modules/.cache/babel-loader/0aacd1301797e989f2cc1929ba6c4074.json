{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class PermissionControllerApi extends BaseAPI {\n  /**\n   * deletePermission\n   */\n  deletePermissionUsingDELETE({\n    id\n  }, opts) {\n    throwIfNullOrUndefined(id, 'id', 'deletePermissionUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions/{id}'.replace('{id}', encodeURI(id)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  insertPermissionUsingPOST({\n    permissionDTO\n  }, opts) {\n    throwIfNullOrUndefined(permissionDTO, 'permissionDTO', 'insertPermissionUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions',\n      method: 'POST',\n      headers,\n      body: permissionDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrieveAllPermissionsUsingGET(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrievePermissionByIdUsingGET({\n    id\n  }, opts) {\n    throwIfNullOrUndefined(id, 'id', 'retrievePermissionByIdUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions/{id}'.replace('{id}', encodeURI(id)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrievePermissionByNameUsingGET({\n    name\n  }, opts) {\n    throwIfNullOrUndefined(name, 'name', 'retrievePermissionByNameUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions/name/{name}'.replace('{name}', encodeURI(name)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrievePermissionsByUserGroupcodeUsingGET({\n    userGroupCode\n  }, opts) {\n    throwIfNullOrUndefined(userGroupCode, 'userGroupCode', 'retrievePermissionsByUserGroupcodeUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions/userGroupCode/{userGroupCode}'.replace('{userGroupCode}', encodeURI(userGroupCode)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updatePermissionUsingPUT({\n    id,\n    permissionDTO\n  }, opts) {\n    throwIfNullOrUndefined(id, 'id', 'updatePermissionUsingPUT');\n    throwIfNullOrUndefined(permissionDTO, 'permissionDTO', 'updatePermissionUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/permissions/{id}'.replace('{id}', encodeURI(id)),\n      method: 'PUT',\n      headers,\n      body: permissionDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/apis/PermissionControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","PermissionControllerApi","deletePermissionUsingDELETE","id","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","insertPermissionUsingPOST","permissionDTO","body","retrieveAllPermissionsUsingGET","retrievePermissionByIdUsingGET","retrievePermissionByNameUsingGET","name","retrievePermissionsByUserGroupcodeUsingGET","userGroupCode","updatePermissionUsingPUT"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    PermissionDTO,\n} from '../models';\n\nexport interface DeletePermissionUsingDELETERequest {\n    id: number;\n}\n\nexport interface InsertPermissionUsingPOSTRequest {\n    permissionDTO: PermissionDTO;\n}\n\nexport interface RetrievePermissionByIdUsingGETRequest {\n    id: number;\n}\n\nexport interface RetrievePermissionByNameUsingGETRequest {\n    name: string;\n}\n\nexport interface RetrievePermissionsByUserGroupcodeUsingGETRequest {\n    userGroupCode: string;\n}\n\nexport interface UpdatePermissionUsingPUTRequest {\n    id: number;\n    permissionDTO: PermissionDTO;\n}\n\n/**\n * no description\n */\nexport class PermissionControllerApi extends BaseAPI {\n\n    /**\n     * deletePermission\n     */\n    deletePermissionUsingDELETE({ id }: DeletePermissionUsingDELETERequest): Observable<boolean>\n    deletePermissionUsingDELETE({ id }: DeletePermissionUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deletePermissionUsingDELETE({ id }: DeletePermissionUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(id, 'id', 'deletePermissionUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/permissions/{id}'.replace('{id}', encodeURI(id)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * insertPermission\n     */\n    insertPermissionUsingPOST({ permissionDTO }: InsertPermissionUsingPOSTRequest): Observable<PermissionDTO>\n    insertPermissionUsingPOST({ permissionDTO }: InsertPermissionUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>\n    insertPermissionUsingPOST({ permissionDTO }: InsertPermissionUsingPOSTRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {\n        throwIfNullOrUndefined(permissionDTO, 'permissionDTO', 'insertPermissionUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<PermissionDTO>({\n            url: '/permissions',\n            method: 'POST',\n            headers,\n            body: permissionDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrieveAllPermissions\n     */\n    retrieveAllPermissionsUsingGET(): Observable<Array<PermissionDTO>>\n    retrieveAllPermissionsUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PermissionDTO>>>\n    retrieveAllPermissionsUsingGET(opts?: OperationOpts): Observable<Array<PermissionDTO> | RawAjaxResponse<Array<PermissionDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<PermissionDTO>>({\n            url: '/permissions',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrievePermissionById\n     */\n    retrievePermissionByIdUsingGET({ id }: RetrievePermissionByIdUsingGETRequest): Observable<PermissionDTO>\n    retrievePermissionByIdUsingGET({ id }: RetrievePermissionByIdUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>\n    retrievePermissionByIdUsingGET({ id }: RetrievePermissionByIdUsingGETRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {\n        throwIfNullOrUndefined(id, 'id', 'retrievePermissionByIdUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<PermissionDTO>({\n            url: '/permissions/{id}'.replace('{id}', encodeURI(id)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrievePermissionByName\n     */\n    retrievePermissionByNameUsingGET({ name }: RetrievePermissionByNameUsingGETRequest): Observable<PermissionDTO>\n    retrievePermissionByNameUsingGET({ name }: RetrievePermissionByNameUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>\n    retrievePermissionByNameUsingGET({ name }: RetrievePermissionByNameUsingGETRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {\n        throwIfNullOrUndefined(name, 'name', 'retrievePermissionByNameUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<PermissionDTO>({\n            url: '/permissions/name/{name}'.replace('{name}', encodeURI(name)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrievePermissionsByUserGroupcode\n     */\n    retrievePermissionsByUserGroupcodeUsingGET({ userGroupCode }: RetrievePermissionsByUserGroupcodeUsingGETRequest): Observable<Array<PermissionDTO>>\n    retrievePermissionsByUserGroupcodeUsingGET({ userGroupCode }: RetrievePermissionsByUserGroupcodeUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PermissionDTO>>>\n    retrievePermissionsByUserGroupcodeUsingGET({ userGroupCode }: RetrievePermissionsByUserGroupcodeUsingGETRequest, opts?: OperationOpts): Observable<Array<PermissionDTO> | RawAjaxResponse<Array<PermissionDTO>>> {\n        throwIfNullOrUndefined(userGroupCode, 'userGroupCode', 'retrievePermissionsByUserGroupcodeUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<PermissionDTO>>({\n            url: '/permissions/userGroupCode/{userGroupCode}'.replace('{userGroupCode}', encodeURI(userGroupCode)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updatePermission\n     */\n    updatePermissionUsingPUT({ id, permissionDTO }: UpdatePermissionUsingPUTRequest): Observable<PermissionDTO>\n    updatePermissionUsingPUT({ id, permissionDTO }: UpdatePermissionUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>\n    updatePermissionUsingPUT({ id, permissionDTO }: UpdatePermissionUsingPUTRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {\n        throwIfNullOrUndefined(id, 'id', 'updatePermissionUsingPUT');\n        throwIfNullOrUndefined(permissionDTO, 'permissionDTO', 'updatePermissionUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<PermissionDTO>({\n            url: '/permissions/{id}'.replace('{id}', encodeURI(id)),\n            method: 'PUT',\n            headers,\n            body: permissionDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}