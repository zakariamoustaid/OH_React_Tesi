{"ast":null,"code":"import { usePermissions } from \"../../../../libraries/permissionUtils/usePermissions\";\n\nconst asArray = input => typeof input === \"string\" ? [input] : input;\n/**\n * Returns only tabs that user can access:\n * - tabs without \"checkPermissions\" property\n * - tabs that match user's permissions\n */\n\n\nexport const useFilterPermission = config => {\n  const permissions = usePermissions();\n  return config.filter(item => {\n    if (item.checkPermissions) {\n      const checkPermissions = asArray(item.checkPermissions);\n      return checkPermissions.find(permission => permissions.includes(permission));\n    }\n\n    return true;\n  });\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/tabs/hooks/useFilterPermission.ts"],"names":["usePermissions","asArray","input","useFilterPermission","config","permissions","filter","item","checkPermissions","find","permission","includes"],"mappings":"AAAA,SAASA,cAAT,QAA+B,sDAA/B;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IACd,OAAOA,KAAP,KAAiB,QAAjB,GAA4B,CAACA,KAAD,CAA5B,GAAsCA,KADxC;AAGA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,MAAD,IAAoC;AACrE,QAAMC,WAAW,GAAGL,cAAc,EAAlC;AACA,SAAOI,MAAM,CAACE,MAAP,CAAeC,IAAD,IAAU;AAC7B,QAAIA,IAAI,CAACC,gBAAT,EAA2B;AACzB,YAAMA,gBAAgB,GAAGP,OAAO,CAACM,IAAI,CAACC,gBAAN,CAAhC;AACA,aAAOA,gBAAgB,CAACC,IAAjB,CAAuBC,UAAD,IAC3BL,WAAW,CAACM,QAAZ,CAAqBD,UAArB,CADK,CAAP;AAGD;;AACD,WAAO,IAAP;AACD,GARM,CAAP;AASD,CAXM","sourcesContent":["import { usePermissions } from \"../../../../libraries/permissionUtils/usePermissions\";\nimport { TTabConfig } from \"../types\";\n\nconst asArray = (input: string | string[]): string[] =>\n  typeof input === \"string\" ? [input] : input;\n\n/**\n * Returns only tabs that user can access:\n * - tabs without \"checkPermissions\" property\n * - tabs that match user's permissions\n */\nexport const useFilterPermission = (config: TTabConfig): TTabConfig => {\n  const permissions = usePermissions();\n  return config.filter((item) => {\n    if (item.checkPermissions) {\n      const checkPermissions = asArray(item.checkPermissions);\n      return checkPermissions.find((permission) =>\n        permissions.includes(permission)\n      );\n    }\n    return true;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}