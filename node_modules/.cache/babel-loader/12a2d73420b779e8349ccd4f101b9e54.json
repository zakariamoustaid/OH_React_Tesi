{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class StockMovementControllerApi extends BaseAPI {\n  /**\n   * alertCriticalQuantity\n   */\n  alertCriticalQuantityUsingGET({\n    medCode,\n    qty\n  }, opts) {\n    throwIfNullOrUndefined(medCode, 'medCode', 'alertCriticalQuantityUsingGET');\n    throwIfNullOrUndefined(qty, 'qty', 'alertCriticalQuantityUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'med_code': medCode,\n      'qty': qty\n    };\n    return this.request({\n      url: '/stockmovements/critical/check',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getLotByMedicalUsingGET({\n    medCode\n  }, opts) {\n    throwIfNullOrUndefined(medCode, 'medCode', 'getLotByMedicalUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/stockmovements/lot/{med_code}'.replace('{med_code}', encodeURI(medCode)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMovementsUsingGET({\n    from,\n    to,\n    wardId\n  }, opts) {\n    throwIfNullOrUndefined(from, 'from', 'getMovementsUsingGET');\n    throwIfNullOrUndefined(to, 'to', 'getMovementsUsingGET');\n    throwIfNullOrUndefined(wardId, 'wardId', 'getMovementsUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'from': from.toISOString(),\n      'to': to.toISOString(),\n      'ward_id': wardId\n    };\n    return this.request({\n      url: '/stockmovements/filter/v1',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMovementsUsingGET1({\n    lotDueFrom,\n    lotDueTo,\n    lotPrepFrom,\n    lotPrepTo,\n    medCode,\n    medType,\n    movFrom,\n    movTo,\n    movType,\n    wardId\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (lotDueFrom != null) {\n      query['lot_due_from'] = lotDueFrom.toISOString();\n    }\n\n    if (lotDueTo != null) {\n      query['lot_due_to'] = lotDueTo.toISOString();\n    }\n\n    if (lotPrepFrom != null) {\n      query['lot_prep_from'] = lotPrepFrom.toISOString();\n    }\n\n    if (lotPrepTo != null) {\n      query['lot_prep_to'] = lotPrepTo.toISOString();\n    }\n\n    if (medCode != null) {\n      query['med_code'] = medCode;\n    }\n\n    if (medType != null) {\n      query['med_type'] = medType;\n    }\n\n    if (movFrom != null) {\n      query['mov_from'] = movFrom.toISOString();\n    }\n\n    if (movTo != null) {\n      query['mov_to'] = movTo.toISOString();\n    }\n\n    if (movType != null) {\n      query['mov_type'] = movType;\n    }\n\n    if (wardId != null) {\n      query['ward_id'] = wardId;\n    }\n\n    return this.request({\n      url: '/stockmovements/filter/v2',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMovementsUsingGET2({\n    ref\n  }, opts) {\n    throwIfNullOrUndefined(ref, 'ref', 'getMovementsUsingGET2');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/stockmovements/{ref}'.replace('{ref}', encodeURI(ref)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMovementsUsingGET3(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/stockmovements',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newMultipleChargingMovementsUsingPOST({\n    ref,\n    movementDTOs\n  }, opts) {\n    throwIfNullOrUndefined(ref, 'ref', 'newMultipleChargingMovementsUsingPOST');\n    throwIfNullOrUndefined(movementDTOs, 'movementDTOs', 'newMultipleChargingMovementsUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'ref': ref\n    };\n    return this.request({\n      url: '/stockmovements/charge',\n      method: 'POST',\n      headers,\n      query,\n      body: movementDTOs\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newMultipleDischargingMovementsUsingPOST({\n    ref,\n    movementDTOs\n  }, opts) {\n    throwIfNullOrUndefined(ref, 'ref', 'newMultipleDischargingMovementsUsingPOST');\n    throwIfNullOrUndefined(movementDTOs, 'movementDTOs', 'newMultipleDischargingMovementsUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'ref': ref\n    };\n    return this.request({\n      url: '/stockmovements/discharge',\n      method: 'POST',\n      headers,\n      query,\n      body: movementDTOs\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/apis/StockMovementControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","StockMovementControllerApi","alertCriticalQuantityUsingGET","medCode","qty","opts","headers","configuration","apiKey","query","request","url","method","responseOpts","getLotByMedicalUsingGET","replace","getMovementsUsingGET","from","to","wardId","toISOString","getMovementsUsingGET1","lotDueFrom","lotDueTo","lotPrepFrom","lotPrepTo","medType","movFrom","movTo","movType","getMovementsUsingGET2","ref","getMovementsUsingGET3","newMultipleChargingMovementsUsingPOST","movementDTOs","body","newMultipleDischargingMovementsUsingPOST"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    LotDTO,\n    MovementDTO,\n} from '../models';\n\nexport interface AlertCriticalQuantityUsingGETRequest {\n    medCode: number;\n    qty: number;\n}\n\nexport interface GetLotByMedicalUsingGETRequest {\n    medCode: number;\n}\n\nexport interface GetMovementsUsingGETRequest {\n    from: string;\n    to: string;\n    wardId: string;\n}\n\nexport interface GetMovementsUsingGET1Request {\n    lotDueFrom?: string;\n    lotDueTo?: string;\n    lotPrepFrom?: string;\n    lotPrepTo?: string;\n    medCode?: number;\n    medType?: string;\n    movFrom?: string;\n    movTo?: string;\n    movType?: string;\n    wardId?: string;\n}\n\nexport interface GetMovementsUsingGET2Request {\n    ref: string;\n}\n\nexport interface NewMultipleChargingMovementsUsingPOSTRequest {\n    ref: string;\n    movementDTOs: Array<MovementDTO>;\n}\n\nexport interface NewMultipleDischargingMovementsUsingPOSTRequest {\n    ref: string;\n    movementDTOs: Array<MovementDTO>;\n}\n\n/**\n * no description\n */\nexport class StockMovementControllerApi extends BaseAPI {\n\n    /**\n     * alertCriticalQuantity\n     */\n    alertCriticalQuantityUsingGET({ medCode, qty }: AlertCriticalQuantityUsingGETRequest): Observable<boolean>\n    alertCriticalQuantityUsingGET({ medCode, qty }: AlertCriticalQuantityUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    alertCriticalQuantityUsingGET({ medCode, qty }: AlertCriticalQuantityUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(medCode, 'medCode', 'alertCriticalQuantityUsingGET');\n        throwIfNullOrUndefined(qty, 'qty', 'alertCriticalQuantityUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'med_code': medCode,\n            'qty': qty,\n        };\n\n        return this.request<boolean>({\n            url: '/stockmovements/critical/check',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getLotByMedical\n     */\n    getLotByMedicalUsingGET({ medCode }: GetLotByMedicalUsingGETRequest): Observable<Array<LotDTO>>\n    getLotByMedicalUsingGET({ medCode }: GetLotByMedicalUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<LotDTO>>>\n    getLotByMedicalUsingGET({ medCode }: GetLotByMedicalUsingGETRequest, opts?: OperationOpts): Observable<Array<LotDTO> | RawAjaxResponse<Array<LotDTO>>> {\n        throwIfNullOrUndefined(medCode, 'medCode', 'getLotByMedicalUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<LotDTO>>({\n            url: '/stockmovements/lot/{med_code}'.replace('{med_code}', encodeURI(medCode)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMovements\n     */\n    getMovementsUsingGET({ from, to, wardId }: GetMovementsUsingGETRequest): Observable<Array<MovementDTO>>\n    getMovementsUsingGET({ from, to, wardId }: GetMovementsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>\n    getMovementsUsingGET({ from, to, wardId }: GetMovementsUsingGETRequest, opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {\n        throwIfNullOrUndefined(from, 'from', 'getMovementsUsingGET');\n        throwIfNullOrUndefined(to, 'to', 'getMovementsUsingGET');\n        throwIfNullOrUndefined(wardId, 'wardId', 'getMovementsUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'from': (from as any).toISOString(),\n            'to': (to as any).toISOString(),\n            'ward_id': wardId,\n        };\n\n        return this.request<Array<MovementDTO>>({\n            url: '/stockmovements/filter/v1',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMovements\n     */\n    getMovementsUsingGET1({ lotDueFrom, lotDueTo, lotPrepFrom, lotPrepTo, medCode, medType, movFrom, movTo, movType, wardId }: GetMovementsUsingGET1Request): Observable<Array<MovementDTO>>\n    getMovementsUsingGET1({ lotDueFrom, lotDueTo, lotPrepFrom, lotPrepTo, medCode, medType, movFrom, movTo, movType, wardId }: GetMovementsUsingGET1Request, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>\n    getMovementsUsingGET1({ lotDueFrom, lotDueTo, lotPrepFrom, lotPrepTo, medCode, medType, movFrom, movTo, movType, wardId }: GetMovementsUsingGET1Request, opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (lotDueFrom != null) { query['lot_due_from'] = (lotDueFrom as any).toISOString(); }\n        if (lotDueTo != null) { query['lot_due_to'] = (lotDueTo as any).toISOString(); }\n        if (lotPrepFrom != null) { query['lot_prep_from'] = (lotPrepFrom as any).toISOString(); }\n        if (lotPrepTo != null) { query['lot_prep_to'] = (lotPrepTo as any).toISOString(); }\n        if (medCode != null) { query['med_code'] = medCode; }\n        if (medType != null) { query['med_type'] = medType; }\n        if (movFrom != null) { query['mov_from'] = (movFrom as any).toISOString(); }\n        if (movTo != null) { query['mov_to'] = (movTo as any).toISOString(); }\n        if (movType != null) { query['mov_type'] = movType; }\n        if (wardId != null) { query['ward_id'] = wardId; }\n\n        return this.request<Array<MovementDTO>>({\n            url: '/stockmovements/filter/v2',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMovements\n     */\n    getMovementsUsingGET2({ ref }: GetMovementsUsingGET2Request): Observable<Array<MovementDTO>>\n    getMovementsUsingGET2({ ref }: GetMovementsUsingGET2Request, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>\n    getMovementsUsingGET2({ ref }: GetMovementsUsingGET2Request, opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {\n        throwIfNullOrUndefined(ref, 'ref', 'getMovementsUsingGET2');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<MovementDTO>>({\n            url: '/stockmovements/{ref}'.replace('{ref}', encodeURI(ref)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMovements\n     */\n    getMovementsUsingGET3(): Observable<Array<MovementDTO>>\n    getMovementsUsingGET3(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementDTO>>>\n    getMovementsUsingGET3(opts?: OperationOpts): Observable<Array<MovementDTO> | RawAjaxResponse<Array<MovementDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<MovementDTO>>({\n            url: '/stockmovements',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newMultipleChargingMovements\n     */\n    newMultipleChargingMovementsUsingPOST({ ref, movementDTOs }: NewMultipleChargingMovementsUsingPOSTRequest): Observable<boolean>\n    newMultipleChargingMovementsUsingPOST({ ref, movementDTOs }: NewMultipleChargingMovementsUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newMultipleChargingMovementsUsingPOST({ ref, movementDTOs }: NewMultipleChargingMovementsUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(ref, 'ref', 'newMultipleChargingMovementsUsingPOST');\n        throwIfNullOrUndefined(movementDTOs, 'movementDTOs', 'newMultipleChargingMovementsUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'ref': ref,\n        };\n\n        return this.request<boolean>({\n            url: '/stockmovements/charge',\n            method: 'POST',\n            headers,\n            query,\n            body: movementDTOs,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newMultipleDischargingMovements\n     */\n    newMultipleDischargingMovementsUsingPOST({ ref, movementDTOs }: NewMultipleDischargingMovementsUsingPOSTRequest): Observable<boolean>\n    newMultipleDischargingMovementsUsingPOST({ ref, movementDTOs }: NewMultipleDischargingMovementsUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newMultipleDischargingMovementsUsingPOST({ ref, movementDTOs }: NewMultipleDischargingMovementsUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(ref, 'ref', 'newMultipleDischargingMovementsUsingPOST');\n        throwIfNullOrUndefined(movementDTOs, 'movementDTOs', 'newMultipleDischargingMovementsUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'ref': ref,\n        };\n\n        return this.request<boolean>({\n            url: '/stockmovements/discharge',\n            method: 'POST',\n            headers,\n            query,\n            body: movementDTOs,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}