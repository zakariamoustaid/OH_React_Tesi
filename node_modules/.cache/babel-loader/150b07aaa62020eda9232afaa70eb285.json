{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTriage/patientTriageForm/PatientTriageForm.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { formatAllFieldValues, getFromFields } from \"../../../../libraries/formDataHandling/functions\";\nimport DateField from \"../../dateField/DateField\";\nimport { object, string } from \"yup\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport TextButton from \"../../textButton/TextButton\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport TextField from \"../../textField/TextField\";\nimport has from \"lodash.has\";\nimport get from \"lodash.get\";\nimport SelectField from \"../../selectField/SelectField\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\n\nconst PatientTriageForm = ({\n  fields,\n  onSubmit,\n  shouldResetForm,\n  resetFormCallback,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const validationSchema = object({\n    pex_date: string().required(t(\"common.required\"))\n  });\n  const initialValues = getFromFields(fields, \"value\");\n  const options = getFromFields(fields, \"options\");\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    }\n  });\n  const {\n    setFieldValue,\n    resetForm,\n    handleBlur\n  } = formik;\n  const dateFieldHandleOnChange = useCallback(fieldName => value => {\n    setFieldValue(fieldName, value);\n  }, [setFieldValue]);\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  const onBlurCallback = useCallback(fieldName => (e, value) => {\n    handleBlur(e);\n    setFieldValue(fieldName, value);\n  }, [setFieldValue, handleBlur]);\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    formik.resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"patientTriageForm__form\",\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateField, {\n    fieldName: \"pex_date\",\n    fieldValue: formik.values.pex_date,\n    disableFuture: true,\n    theme: \"regular\",\n    format: \"dd/MM/yyyy\",\n    isValid: isValid(\"pex_date\"),\n    errorText: getErrorText(\"pex_date\"),\n    label: t(\"examination.datetriage\"),\n    onChange: dateFieldHandleOnChange(\"pex_date\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_height\"),\n    theme: \"regular\",\n    label: t(\"examination.height\"),\n    isValid: isValid(\"pex_height\"),\n    errorText: getErrorText(\"pex_height\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_weight\"),\n    theme: \"regular\",\n    label: t(\"examination.weight\"),\n    isValid: isValid(\"pex_weight\"),\n    errorText: getErrorText(\"pex_weight\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_temp\"),\n    theme: \"regular\",\n    label: t(\"examination.temperature\"),\n    isValid: isValid(\"pex_temp\"),\n    errorText: getErrorText(\"pex_temp\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_sat\"),\n    theme: \"regular\",\n    label: t(\"examination.saturation\"),\n    isValid: isValid(\"pex_sat\"),\n    errorText: getErrorText(\"pex_sat\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item compressed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_pa_min\"),\n    theme: \"regular\",\n    label: t(\"examination.ap.min\"),\n    isValid: isValid(\"pex_pa_min\"),\n    errorText: getErrorText(\"pex_pa_min\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_pa_max\"),\n    theme: \"regular\",\n    label: t(\"examination.ap.max\"),\n    isValid: isValid(\"pex_pa_max\"),\n    errorText: getErrorText(\"pex_pa_max\"),\n    onBlur: formik.handleBlur,\n    type: \"string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"pex_fc\"),\n    theme: \"regular\",\n    label: t(\"examination.heartrate\"),\n    isValid: isValid(\"pex_fc\"),\n    errorText: getErrorText(\"pex_fc\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"diuresis_vol\"),\n    theme: \"regular\",\n    label: t(\"examination.diuresisvolume24h\"),\n    isValid: isValid(\"diuresis_vol\"),\n    errorText: getErrorText(\"diuresis_vol\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"respiratory_rate\"),\n    theme: \"regular\",\n    label: t(\"examination.respiratoryrate\"),\n    isValid: isValid(\"respiratory_rate\"),\n    errorText: getErrorText(\"respiratory_rate\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"hgt\"),\n    theme: \"regular\",\n    label: t(\"examination.hgt\"),\n    isValid: isValid(\"hgt\"),\n    errorText: getErrorText(\"hgt\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"diuresis\",\n    fieldValue: formik.values.diuresis,\n    label: t(\"examination.diuresis\"),\n    isValid: isValid(\"diuresis\"),\n    errorText: getErrorText(\"diuresis\"),\n    onBlur: onBlurCallback(\"diuresis\"),\n    options: options.diuresis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"bowel\",\n    fieldValue: formik.values.bowel,\n    label: t(\"examination.bowel\"),\n    isValid: isValid(\"bowel\"),\n    errorText: getErrorText(\"bowel\"),\n    onBlur: onBlurCallback(\"bowel\"),\n    options: options.bowel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"auscultation\",\n    fieldValue: formik.values.auscultation,\n    label: t(\"examination.auscultation\"),\n    isValid: isValid(\"auscultation\"),\n    errorText: getErrorText(\"auscultation\"),\n    onBlur: onBlurCallback(\"auscultation\"),\n    options: options.auscultation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageForm__buttonSet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SmallButton, {\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }, submitButtonLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => setOpenResetConfirmation(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 15\n    }\n  }, resetButtonLabel))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: openResetConfirmation,\n    title: resetButtonLabel.toUpperCase(),\n    info: `Are you sure to ${resetButtonLabel} the Form?`,\n    icon: warningIcon,\n    primaryButtonLabel: resetButtonLabel,\n    secondaryButtonLabel: \"Dismiss\",\n    handlePrimaryButtonClick: handleResetConfirmation,\n    handleSecondaryButtonClick: () => setOpenResetConfirmation(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default PatientTriageForm;","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTriage/patientTriageForm/PatientTriageForm.tsx"],"names":["React","useCallback","useEffect","useState","useFormik","formatAllFieldValues","getFromFields","DateField","object","string","ConfirmationDialog","TextButton","SmallButton","warningIcon","TextField","has","get","SelectField","useTranslation","PatientTriageForm","fields","onSubmit","shouldResetForm","resetFormCallback","submitButtonLabel","resetButtonLabel","isLoading","t","validationSchema","pex_date","required","initialValues","options","formik","enableReinitialize","values","formattedValues","setFieldValue","resetForm","handleBlur","dateFieldHandleOnChange","fieldName","value","isValid","touched","errors","getErrorText","onBlurCallback","e","openResetConfirmation","setOpenResetConfirmation","handleResetConfirmation","handleSubmit","getFieldProps","diuresis","bowel","auscultation","toUpperCase"],"mappings":"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","sourcesContent":["import React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useFormik } from \"formik\";\nimport {\n  formatAllFieldValues,\n  getFromFields,\n} from \"../../../../libraries/formDataHandling/functions\";\nimport DateField from \"../../dateField/DateField\";\nimport { object, string } from \"yup\";\nimport { TProps } from \"./types\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport TextButton from \"../../textButton/TextButton\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport TextField from \"../../textField/TextField\";\nimport has from \"lodash.has\";\nimport get from \"lodash.get\";\nimport SelectField from \"../../selectField/SelectField\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\n\nconst PatientTriageForm: FunctionComponent<TProps> = ({\n  fields,\n  onSubmit,\n  shouldResetForm,\n  resetFormCallback,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n}) => {\n  const { t } = useTranslation();\n  const validationSchema = object({\n    pex_date: string().required(t(\"common.required\")),\n  });\n  const initialValues = getFromFields(fields, \"value\");\n  const options = getFromFields(fields, \"options\");\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    },\n  });\n\n  const { setFieldValue, resetForm, handleBlur } = formik;\n\n  const dateFieldHandleOnChange = useCallback(\n    (fieldName: string) => (value: any) => {\n      setFieldValue(fieldName, value);\n    },\n    [setFieldValue]\n  );\n\n  const isValid = (fieldName: string): boolean => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = (fieldName: string): string => {\n    return has(formik.touched, fieldName)\n      ? (get(formik.errors, fieldName) as string)\n      : \"\";\n  };\n\n  const onBlurCallback = useCallback(\n    (fieldName: string) =>\n      (\n        e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n        value: string\n      ) => {\n        handleBlur(e);\n        setFieldValue(fieldName, value);\n      },\n    [setFieldValue, handleBlur]\n  );\n\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    formik.resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n\n  return (\n    <>\n      <div className=\"patientTriageForm\">\n        <form\n          className=\"patientTriageForm__form\"\n          onSubmit={formik.handleSubmit}\n        >\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientTriageForm__item\">\n              <DateField\n                fieldName=\"pex_date\"\n                fieldValue={formik.values.pex_date}\n                disableFuture={true}\n                theme=\"regular\"\n                format=\"dd/MM/yyyy\"\n                isValid={isValid(\"pex_date\")}\n                errorText={getErrorText(\"pex_date\")}\n                label={t(\"examination.datetriage\")}\n                onChange={dateFieldHandleOnChange(\"pex_date\")}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"pex_height\")}\n                theme=\"regular\"\n                label={t(\"examination.height\")}\n                isValid={isValid(\"pex_height\")}\n                errorText={getErrorText(\"pex_height\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"pex_weight\")}\n                theme=\"regular\"\n                label={t(\"examination.weight\")}\n                isValid={isValid(\"pex_weight\")}\n                errorText={getErrorText(\"pex_weight\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"pex_temp\")}\n                theme=\"regular\"\n                label={t(\"examination.temperature\")}\n                isValid={isValid(\"pex_temp\")}\n                errorText={getErrorText(\"pex_temp\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"pex_sat\")}\n                theme=\"regular\"\n                label={t(\"examination.saturation\")}\n                isValid={isValid(\"pex_sat\")}\n                errorText={getErrorText(\"pex_sat\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item compressed\">\n              <TextField\n                field={formik.getFieldProps(\"pex_pa_min\")}\n                theme=\"regular\"\n                label={t(\"examination.ap.min\")}\n                isValid={isValid(\"pex_pa_min\")}\n                errorText={getErrorText(\"pex_pa_min\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n\n              <TextField\n                field={formik.getFieldProps(\"pex_pa_max\")}\n                theme=\"regular\"\n                label={t(\"examination.ap.max\")}\n                isValid={isValid(\"pex_pa_max\")}\n                errorText={getErrorText(\"pex_pa_max\")}\n                onBlur={formik.handleBlur}\n                type=\"string\"\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"pex_fc\")}\n                theme=\"regular\"\n                label={t(\"examination.heartrate\")}\n                isValid={isValid(\"pex_fc\")}\n                errorText={getErrorText(\"pex_fc\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"diuresis_vol\")}\n                theme=\"regular\"\n                label={t(\"examination.diuresisvolume24h\")}\n                isValid={isValid(\"diuresis_vol\")}\n                errorText={getErrorText(\"diuresis_vol\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"respiratory_rate\")}\n                theme=\"regular\"\n                label={t(\"examination.respiratoryrate\")}\n                isValid={isValid(\"respiratory_rate\")}\n                errorText={getErrorText(\"respiratory_rate\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n            <div className=\"patientTriageForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"hgt\")}\n                theme=\"regular\"\n                label={t(\"examination.hgt\")}\n                isValid={isValid(\"hgt\")}\n                errorText={getErrorText(\"hgt\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientTriageForm__item\">\n              <SelectField\n                fieldName=\"diuresis\"\n                fieldValue={formik.values.diuresis}\n                label={t(\"examination.diuresis\")}\n                isValid={isValid(\"diuresis\")}\n                errorText={getErrorText(\"diuresis\")}\n                onBlur={onBlurCallback(\"diuresis\")}\n                options={options.diuresis}\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <SelectField\n                fieldName=\"bowel\"\n                fieldValue={formik.values.bowel}\n                label={t(\"examination.bowel\")}\n                isValid={isValid(\"bowel\")}\n                errorText={getErrorText(\"bowel\")}\n                onBlur={onBlurCallback(\"bowel\")}\n                options={options.bowel}\n              />\n            </div>\n\n            <div className=\"patientTriageForm__item\">\n              <SelectField\n                fieldName=\"auscultation\"\n                fieldValue={formik.values.auscultation}\n                label={t(\"examination.auscultation\")}\n                isValid={isValid(\"auscultation\")}\n                errorText={getErrorText(\"auscultation\")}\n                onBlur={onBlurCallback(\"auscultation\")}\n                options={options.auscultation}\n              />\n            </div>\n          </div>\n\n          <div className=\"patientTriageForm__buttonSet\">\n            <div className=\"submit_button\">\n              <SmallButton type=\"submit\" disabled={isLoading}>\n                {submitButtonLabel}\n              </SmallButton>\n            </div>\n            <div className=\"reset_button\">\n              <TextButton onClick={() => setOpenResetConfirmation(true)}>\n                {resetButtonLabel}\n              </TextButton>\n            </div>\n          </div>\n          <ConfirmationDialog\n            isOpen={openResetConfirmation}\n            title={resetButtonLabel.toUpperCase()}\n            info={`Are you sure to ${resetButtonLabel} the Form?`}\n            icon={warningIcon}\n            primaryButtonLabel={resetButtonLabel}\n            secondaryButtonLabel=\"Dismiss\"\n            handlePrimaryButtonClick={handleResetConfirmation}\n            handleSecondaryButtonClick={() => setOpenResetConfirmation(false)}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default PatientTriageForm;\n"]},"metadata":{},"sourceType":"module"}