{"ast":null,"code":"import { concat } from \"rxjs\";\nimport { tap, toArray } from \"rxjs/operators\";\nimport { Configuration, LoginApiApi, UserControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { saveAuthenticationDataToSession } from \"../../libraries/authUtils/saveAuthenticationDataToSession\";\nimport { savePermissionDataToSession } from \"../../libraries/authUtils/savePermissionDataToSession\";\nimport { SessionStorage } from \"../../libraries/storage/storage\";\nimport { SET_AUTHENTICATION_FAIL, SET_AUTHENTICATION_LOADING, SET_AUTHENTICATION_SUCCESS, SET_LOGOUT_FAIL, SET_LOGOUT_LOADING, SET_LOGOUT_SUCCESS } from \"./consts\";\nconst api = new LoginApiApi(new Configuration());\nconst usersApi = new UserControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const setAuthenticationSuccess = payload => ({\n  type: SET_AUTHENTICATION_SUCCESS,\n  payload\n});\nexport const setAuthenticationThunk = (username, password) => dispatch => {\n  dispatch({\n    type: SET_AUTHENTICATION_LOADING\n  });\n  concat(api.loginUsingPOST({\n    password,\n    username\n  }).pipe(tap(saveAuthenticationDataToSession)), usersApi.retrieveProfileByCurrentLoggedInUserUsingGET().pipe(tap(savePermissionDataToSession))).pipe(toArray()).subscribe(([userCredentials, me]) => {\n    dispatch({\n      type: SET_AUTHENTICATION_SUCCESS,\n      payload: { ...userCredentials,\n        permission: me.permission\n      }\n    });\n  }, error => {\n    dispatch({\n      type: SET_AUTHENTICATION_FAIL,\n      error\n    });\n  });\n};\nexport const setLogoutThunk = () => dispatch => {\n  dispatch({\n    type: SET_LOGOUT_LOADING\n  });\n  SessionStorage.clear();\n  api.logoutUsingPOST().subscribe(() => {\n    dispatch({\n      type: SET_LOGOUT_SUCCESS\n    });\n  }, error => {\n    dispatch({\n      type: SET_LOGOUT_FAIL,\n      error\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/main/actions.ts"],"names":["concat","tap","toArray","Configuration","LoginApiApi","UserControllerApi","applyTokenMiddleware","saveAuthenticationDataToSession","savePermissionDataToSession","SessionStorage","SET_AUTHENTICATION_FAIL","SET_AUTHENTICATION_LOADING","SET_AUTHENTICATION_SUCCESS","SET_LOGOUT_FAIL","SET_LOGOUT_LOADING","SET_LOGOUT_SUCCESS","api","usersApi","middleware","setAuthenticationSuccess","payload","type","setAuthenticationThunk","username","password","dispatch","loginUsingPOST","pipe","retrieveProfileByCurrentLoggedInUserUsingGET","subscribe","userCredentials","me","permission","error","setLogoutThunk","clear","logoutUsingPOST"],"mappings":"AAEA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,gBAA7B;AAEA,SACEC,aADF,EAEEC,WAFF,EAIEC,iBAJF,QAMO,iBANP;AAOA,SAASC,oBAAT,QAAqC,+CAArC;AACA,SAASC,+BAAT,QAAgD,2DAAhD;AACA,SAASC,2BAAT,QAA4C,uDAA5C;AACA,SAASC,cAAT,QAA+B,iCAA/B;AAEA,SACEC,uBADF,EAEEC,0BAFF,EAGEC,0BAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,kBANF,QAOO,UAPP;AAUA,MAAMC,GAAG,GAAG,IAAIZ,WAAJ,CAAgB,IAAID,aAAJ,EAAhB,CAAZ;AACA,MAAMc,QAAQ,GAAG,IAAIZ,iBAAJ,CACf,IAAIF,aAAJ,CAAkB;AAAEe,EAAAA,UAAU,EAAE,CAACZ,oBAAD;AAAd,CAAlB,CADe,CAAjB;AAIA,OAAO,MAAMa,wBAAwB,GACnCC,OADsC,KAEJ;AAClCC,EAAAA,IAAI,EAAET,0BAD4B;AAElCQ,EAAAA;AAFkC,CAFI,CAAjC;AAOP,OAAO,MAAME,sBAAsB,GACjC,CAACC,QAAD,EAAmBC,QAAnB,KACCC,QAAD,IAA0D;AACxDA,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEV;AADC,GAAD,CAAR;AAIAX,EAAAA,MAAM,CACJgB,GAAG,CACAU,cADH,CACkB;AAAEF,IAAAA,QAAF;AAAYD,IAAAA;AAAZ,GADlB,EAEGI,IAFH,CAEQ1B,GAAG,CAACM,+BAAD,CAFX,CADI,EAIJU,QAAQ,CACLW,4CADH,GAEGD,IAFH,CAEQ1B,GAAG,CAACO,2BAAD,CAFX,CAJI,CAAN,CAQGmB,IARH,CAQQzB,OAAO,EARf,EASG2B,SATH,CAUI,CAAC,CAACC,eAAD,EAAkBC,EAAlB,CAAD,KAA2B;AACzBN,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAET,0BADC;AAEPQ,MAAAA,OAAO,EAAE,EACP,GAAIU,eADG;AAEPE,QAAAA,UAAU,EAAGD,EAAD,CAAuBC;AAF5B;AAFF,KAAD,CAAR;AAOD,GAlBL,EAmBKC,KAAD,IAAW;AACTR,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAEX,uBADC;AAEPuB,MAAAA;AAFO,KAAD,CAAR;AAID,GAxBL;AA0BD,CAjCI;AAmCP,OAAO,MAAMC,cAAc,GACzB,MACCT,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEP;AADC,GAAD,CAAR;AAGAL,EAAAA,cAAc,CAAC0B,KAAf;AACAnB,EAAAA,GAAG,CAACoB,eAAJ,GAAsBP,SAAtB,CACE,MAAM;AACJJ,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAGD,GALH,EAMGkB,KAAD,IAAW;AACTR,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAER,eADC;AAEPoB,MAAAA;AAFO,KAAD,CAAR;AAID,GAXH;AAaD,CApBI","sourcesContent":["import { useHistory } from \"react-router\";\nimport { Dispatch } from \"redux\";\nimport { concat } from \"rxjs\";\nimport { tap, toArray } from \"rxjs/operators\";\nimport { AUTH_KEY } from \"../../consts\";\nimport {\n  Configuration,\n  LoginApiApi,\n  LoginResponse,\n  UserControllerApi,\n  UserProfileDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { saveAuthenticationDataToSession } from \"../../libraries/authUtils/saveAuthenticationDataToSession\";\nimport { savePermissionDataToSession } from \"../../libraries/authUtils/savePermissionDataToSession\";\nimport { SessionStorage } from \"../../libraries/storage/storage\";\nimport { IAction } from \"../types\";\nimport {\n  SET_AUTHENTICATION_FAIL,\n  SET_AUTHENTICATION_LOADING,\n  SET_AUTHENTICATION_SUCCESS,\n  SET_LOGOUT_FAIL,\n  SET_LOGOUT_LOADING,\n  SET_LOGOUT_SUCCESS,\n} from \"./consts\";\nimport { IAuthentication } from \"./types\";\n\nconst api = new LoginApiApi(new Configuration());\nconst usersApi = new UserControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const setAuthenticationSuccess = (\n  payload: IAuthentication\n): IAction<IAuthentication, {}> => ({\n  type: SET_AUTHENTICATION_SUCCESS,\n  payload,\n});\n\nexport const setAuthenticationThunk =\n  (username: string, password: string) =>\n  (dispatch: Dispatch<IAction<LoginResponse, {}>>): void => {\n    dispatch({\n      type: SET_AUTHENTICATION_LOADING,\n    });\n\n    concat(\n      api\n        .loginUsingPOST({ password, username })\n        .pipe(tap(saveAuthenticationDataToSession)),\n      usersApi\n        .retrieveProfileByCurrentLoggedInUserUsingGET()\n        .pipe(tap(savePermissionDataToSession))\n    )\n      .pipe(toArray())\n      .subscribe(\n        ([userCredentials, me]) => {\n          dispatch({\n            type: SET_AUTHENTICATION_SUCCESS,\n            payload: {\n              ...(userCredentials as LoginResponse),\n              permission: (me as UserProfileDTO).permission,\n            },\n          });\n        },\n        (error) => {\n          dispatch({\n            type: SET_AUTHENTICATION_FAIL,\n            error,\n          });\n        }\n      );\n  };\n\nexport const setLogoutThunk =\n  () =>\n  (dispatch: Dispatch<IAction<void, {}>>): void => {\n    dispatch({\n      type: SET_LOGOUT_LOADING,\n    });\n    SessionStorage.clear();\n    api.logoutUsingPOST().subscribe(\n      () => {\n        dispatch({\n          type: SET_LOGOUT_SUCCESS,\n        });\n      },\n      (error) => {\n        dispatch({\n          type: SET_LOGOUT_FAIL,\n          error,\n        });\n      }\n    );\n  };\n"]},"metadata":{},"sourceType":"module"}