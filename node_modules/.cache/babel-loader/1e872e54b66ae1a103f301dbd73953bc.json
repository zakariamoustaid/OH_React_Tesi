{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientOPD/patientOPD.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect, useSelector } from \"react-redux\";\nimport { initialFields } from \"./consts\";\nimport { createOpd, createOpdReset, getOpds } from \"../../../state/opds/actions\";\nimport { getDiseasesOpd } from \"../../../state/diseases/actions\";\nimport PatientOPDForm from \"./patientOPDForm/PatientOPDForm\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport InfoBox from \"../infoBox/InfoBox\";\nimport ConfirmationDialog from \"../confirmationDialog/ConfirmationDialog\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport PatientOPDTable from \"./patientOPDTable/PatientOPDTable\";\n\nconst PatientOPD = ({\n  createOpd,\n  createOpdReset,\n  getDiseasesOpd,\n  getOpds,\n  isLoading,\n  hasSucceeded,\n  hasFailed\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const infoBoxRef = useRef(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const [shouldUpdateTable, setShouldUpdateTable] = useState(true);\n  useEffect(() => {\n    if (hasFailed) {\n      setActivityTransitionState(\"FAIL\");\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  useEffect(() => {\n    getDiseasesOpd();\n  }, [getDiseasesOpd]);\n  const patient = useSelector(state => state.patients.selectedPatient.data);\n  useEffect(() => {\n    getOpds(patient === null || patient === void 0 ? void 0 : patient.code);\n  }, [patient === null || patient === void 0 ? void 0 : patient.code, shouldUpdateTable, getOpds]);\n  const userId = useSelector(state => {\n    var _state$main$authentic;\n\n    return (_state$main$authentic = state.main.authentication.data) === null || _state$main$authentic === void 0 ? void 0 : _state$main$authentic.displayName;\n  });\n  const diseasesData = useSelector(state => state.diseases.diseasesOpd.data);\n  useEffect(() => {\n    if (activityTransitionState === \"TO_RESET\") {\n      createOpdReset();\n      setShouldResetForm(true);\n      setShouldUpdateTable(true);\n    }\n  }, [activityTransitionState, createOpdReset]);\n\n  const onSubmit = createOpdValues => {\n    setShouldResetForm(false);\n    createOpdValues.patientCode = patient === null || patient === void 0 ? void 0 : patient.code;\n    createOpdValues.age = patient === null || patient === void 0 ? void 0 : patient.age;\n    createOpdValues.sex = patient === null || patient === void 0 ? void 0 : patient.sex;\n    createOpdValues.userID = userId;\n    createOpd(createOpdValues, diseasesData);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setShouldUpdateTable(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PatientOPDForm, {\n    fields: initialFields,\n    onSubmit: onSubmit,\n    submitButtonLabel: t(\"common.saveopd\"),\n    resetButtonLabel: t(\"common.discard\"),\n    isLoading: isLoading,\n    shouldResetForm: shouldResetForm,\n    resetFormCallback: resetFormCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: infoBoxRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, hasFailed && /*#__PURE__*/React.createElement(InfoBox, {\n    type: \"error\",\n    message: \"Something went wrong, please retry later.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: hasSucceeded,\n    title: \"Opd Created\",\n    icon: checkIcon,\n    info: \"The Opd registration was successful.\",\n    primaryButtonLabel: \"Ok\",\n    handlePrimaryButtonClick: () => setActivityTransitionState(\"TO_RESET\"),\n    handleSecondaryButtonClick: () => ({}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PatientOPDTable, {\n    shouldUpdateTable: shouldUpdateTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.opds.createOpd === \"LOADING\",\n  hasSucceeded: state.opds.createOpd.status === \"SUCCESS\",\n  hasFailed: state.opds.createOpd.status === \"FAIL\"\n});\n\nconst mapDispatchToProps = {\n  createOpd,\n  createOpdReset,\n  getDiseasesOpd,\n  getOpds\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientOPD);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientOPD/patientOPD.tsx"],"names":["React","useEffect","useRef","useState","useTranslation","connect","useSelector","initialFields","createOpd","createOpdReset","getOpds","getDiseasesOpd","PatientOPDForm","scrollToElement","InfoBox","ConfirmationDialog","checkIcon","PatientOPDTable","PatientOPD","isLoading","hasSucceeded","hasFailed","t","infoBoxRef","shouldResetForm","setShouldResetForm","activityTransitionState","setActivityTransitionState","shouldUpdateTable","setShouldUpdateTable","current","patient","state","patients","selectedPatient","data","code","userId","main","authentication","displayName","diseasesData","diseases","diseasesOpd","onSubmit","createOpdValues","patientCode","age","sex","userID","resetFormCallback","mapStateToProps","opds","status","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,SAAnC,EAA8CC,MAA9C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AAEA,SAASC,aAAT,QAA8B,UAA9B;AACA,SACEC,SADF,EAEEC,cAFF,EAGEC,OAHF,QAIO,6BAJP;AAKA,SAASC,cAAT,QAA+B,iCAA/B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAQA,SAASC,eAAT,QAAgC,4CAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;;AAEA,MAAMC,UAAqC,GAAG,CAAC;AAC7CV,EAAAA,SAD6C;AAE7CC,EAAAA,cAF6C;AAG7CE,EAAAA,cAH6C;AAI7CD,EAAAA,OAJ6C;AAK7CS,EAAAA,SAL6C;AAM7CC,EAAAA,YAN6C;AAO7CC,EAAAA;AAP6C,CAAD,KAQxC;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQlB,cAAc,EAA5B;AAEA,QAAMmB,UAAU,GAAGrB,MAAM,CAAiB,IAAjB,CAAzB;AACA,QAAM,CAACsB,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACuB,uBAAD,EAA0BC,0BAA1B,IACJxB,QAAQ,CAA2B,MAA3B,CADV;AAEA,QAAM,CAACyB,iBAAD,EAAoBC,oBAApB,IAA4C1B,QAAQ,CAAC,IAAD,CAA1D;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,SAAJ,EAAe;AACbM,MAAAA,0BAA0B,CAAC,MAAD,CAA1B;AACAd,MAAAA,eAAe,CAACU,UAAU,CAACO,OAAZ,CAAf;AACD;AACF,GALQ,EAKN,CAACT,SAAD,CALM,CAAT;AAOApB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,QAAMoB,OAAO,GAAGzB,WAAW,CACxB0B,KAAD,IAAmBA,KAAK,CAACC,QAAN,CAAeC,eAAf,CAA+BC,IADzB,CAA3B;AAIAlC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACqB,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEK,IAAV,CAAP;AACD,GAFQ,EAEN,CAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEK,IAAV,EAAgBR,iBAAhB,EAAmClB,OAAnC,CAFM,CAAT;AAIA,QAAM2B,MAAM,GAAG/B,WAAW,CACvB0B,KAAD;AAAA;;AAAA,oCAAmBA,KAAK,CAACM,IAAN,CAAWC,cAAX,CAA0BJ,IAA7C,0DAAmB,sBAAgCK,WAAnD;AAAA,GADwB,CAA1B;AAIA,QAAMC,YAAY,GAAGnC,WAAW,CAC7B0B,KAAD,IAAmBA,KAAK,CAACU,QAAN,CAAeC,WAAf,CAA2BR,IADhB,CAAhC;AAGAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,uBAAuB,KAAK,UAAhC,EAA4C;AAC1CjB,MAAAA,cAAc;AACdgB,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAI,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,GANQ,EAMN,CAACH,uBAAD,EAA0BjB,cAA1B,CANM,CAAT;;AAQA,QAAMmC,QAAQ,GAAIC,eAAD,IAA6B;AAC5CpB,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAoB,IAAAA,eAAe,CAACC,WAAhB,GAA8Bf,OAA9B,aAA8BA,OAA9B,uBAA8BA,OAAO,CAAEK,IAAvC;AACAS,IAAAA,eAAe,CAACE,GAAhB,GAAsBhB,OAAtB,aAAsBA,OAAtB,uBAAsBA,OAAO,CAAEgB,GAA/B;AACAF,IAAAA,eAAe,CAACG,GAAhB,GAAsBjB,OAAtB,aAAsBA,OAAtB,uBAAsBA,OAAO,CAAEiB,GAA/B;AACAH,IAAAA,eAAe,CAACI,MAAhB,GAAyBZ,MAAzB;AACA7B,IAAAA,SAAS,CAACqC,eAAD,EAAkBJ,YAAlB,CAAT;AACD,GAPD;;AASA,QAAMS,iBAAiB,GAAG,MAAM;AAC9BzB,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAI,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAF,IAAAA,0BAA0B,CAAC,MAAD,CAA1B;AACAd,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GALD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAEN,aADV;AAEE,IAAA,QAAQ,EAAEqC,QAFZ;AAGE,IAAA,iBAAiB,EAAEtB,CAAC,CAAC,gBAAD,CAHtB;AAIE,IAAA,gBAAgB,EAAEA,CAAC,CAAC,gBAAD,CAJrB;AAKE,IAAA,SAAS,EAAEH,SALb;AAME,IAAA,eAAe,EAAEK,eANnB;AAOE,IAAA,iBAAiB,EAAE0B,iBAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAK,IAAA,GAAG,EAAE3B,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SAAS,iBACR,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,OAAO,EAAC,2CAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAVF,eAkBE,oBAAC,kBAAD;AACE,IAAA,MAAM,EAAED,YADV;AAEE,IAAA,KAAK,EAAC,aAFR;AAGE,IAAA,IAAI,EAAEJ,SAHR;AAIE,IAAA,IAAI,EAAC,sCAJP;AAKE,IAAA,kBAAkB,EAAC,IALrB;AAME,IAAA,wBAAwB,EAAE,MAAMW,0BAA0B,CAAC,UAAD,CAN5D;AAOE,IAAA,0BAA0B,EAAE,OAAO,EAAP,CAP9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,eA2BE,oBAAC,eAAD;AAAiB,IAAA,iBAAiB,EAAEC,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF;AA+BD,CAjGD;;AAkGA,MAAMuB,eAAe,GAAInB,KAAD,KAAiC;AACvDb,EAAAA,SAAS,EAAEa,KAAK,CAACoB,IAAN,CAAW5C,SAAX,KAAyB,SADmB;AAEvDY,EAAAA,YAAY,EAAEY,KAAK,CAACoB,IAAN,CAAW5C,SAAX,CAAqB6C,MAArB,KAAgC,SAFS;AAGvDhC,EAAAA,SAAS,EAAEW,KAAK,CAACoB,IAAN,CAAW5C,SAAX,CAAqB6C,MAArB,KAAgC;AAHY,CAAjC,CAAxB;;AAMA,MAAMC,kBAAkC,GAAG;AACzC9C,EAAAA,SADyC;AAEzCC,EAAAA,cAFyC;AAGzCE,EAAAA,cAHyC;AAIzCD,EAAAA;AAJyC,CAA3C;AAOA,eAAeL,OAAO,CAAC8C,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpC,UAA7C,CAAf","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect, useSelector } from \"react-redux\";\nimport { IState } from \"../../../types\";\nimport { initialFields } from \"./consts\";\nimport {\n  createOpd,\n  createOpdReset,\n  getOpds,\n} from \"../../../state/opds/actions\";\nimport { getDiseasesOpd } from \"../../../state/diseases/actions\";\nimport PatientOPDForm from \"./patientOPDForm/PatientOPDForm\";\nimport {\n  IDispatchProps,\n  IStateProps,\n  TActivityTransitionState,\n  TProps,\n} from \"./types\";\nimport { OpdDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport InfoBox from \"../infoBox/InfoBox\";\nimport ConfirmationDialog from \"../confirmationDialog/ConfirmationDialog\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport PatientOPDTable from \"./patientOPDTable/PatientOPDTable\";\n\nconst PatientOPD: FunctionComponent<TProps> = ({\n  createOpd,\n  createOpdReset,\n  getDiseasesOpd,\n  getOpds,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n}) => {\n  const { t } = useTranslation();\n\n  const infoBoxRef = useRef<HTMLDivElement>(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [activityTransitionState, setActivityTransitionState] =\n    useState<TActivityTransitionState>(\"IDLE\");\n  const [shouldUpdateTable, setShouldUpdateTable] = useState(true);\n\n  useEffect(() => {\n    if (hasFailed) {\n      setActivityTransitionState(\"FAIL\");\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n\n  useEffect(() => {\n    getDiseasesOpd();\n  }, [getDiseasesOpd]);\n\n  const patient = useSelector(\n    (state: IState) => state.patients.selectedPatient.data\n  );\n\n  useEffect(() => {\n    getOpds(patient?.code);\n  }, [patient?.code, shouldUpdateTable, getOpds]);\n\n  const userId = useSelector(\n    (state: IState) => state.main.authentication.data?.displayName\n  );\n\n  const diseasesData = useSelector(\n    (state: IState) => state.diseases.diseasesOpd.data\n  );\n  useEffect(() => {\n    if (activityTransitionState === \"TO_RESET\") {\n      createOpdReset();\n      setShouldResetForm(true);\n      setShouldUpdateTable(true);\n    }\n  }, [activityTransitionState, createOpdReset]);\n\n  const onSubmit = (createOpdValues: OpdDTO) => {\n    setShouldResetForm(false);\n    createOpdValues.patientCode = patient?.code;\n    createOpdValues.age = patient?.age;\n    createOpdValues.sex = patient?.sex;\n    createOpdValues.userID = userId;\n    createOpd(createOpdValues, diseasesData);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setShouldUpdateTable(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n  return (\n    <div className=\"patientOpd\">\n      <PatientOPDForm\n        fields={initialFields}\n        onSubmit={onSubmit}\n        submitButtonLabel={t(\"common.saveopd\")}\n        resetButtonLabel={t(\"common.discard\")}\n        isLoading={isLoading}\n        shouldResetForm={shouldResetForm}\n        resetFormCallback={resetFormCallback}\n      />\n      <div ref={infoBoxRef}>\n        {hasFailed && (\n          <InfoBox\n            type=\"error\"\n            message=\"Something went wrong, please retry later.\"\n          />\n        )}\n      </div>\n      <ConfirmationDialog\n        isOpen={hasSucceeded}\n        title=\"Opd Created\"\n        icon={checkIcon}\n        info=\"The Opd registration was successful.\"\n        primaryButtonLabel=\"Ok\"\n        handlePrimaryButtonClick={() => setActivityTransitionState(\"TO_RESET\")}\n        handleSecondaryButtonClick={() => ({})}\n      />\n      <PatientOPDTable shouldUpdateTable={shouldUpdateTable} />\n    </div>\n  );\n};\nconst mapStateToProps = (state: IState): IStateProps => ({\n  isLoading: state.opds.createOpd === \"LOADING\",\n  hasSucceeded: state.opds.createOpd.status === \"SUCCESS\",\n  hasFailed: state.opds.createOpd.status === \"FAIL\",\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  createOpd,\n  createOpdReset,\n  getDiseasesOpd,\n  getOpds,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientOPD);\n"]},"metadata":{},"sourceType":"module"}