{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientBooking/bookingForm/BookingForm.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport DateField from \"../../dateField/DateField\";\nimport SelectField from \"../../selectField/SelectField\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport TextButton from \"../../textButton/TextButton\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { object, string } from \"yup\";\nimport { formatAllFieldValues, getFromFields } from \"../../../../libraries/formDataHandling/functions\";\nimport { useFormik } from \"formik\";\nimport { get, has } from \"lodash\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport classnames from \"classnames\";\n\nconst BookingForm = ({\n  fields,\n  onSubmit,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n  shouldResetForm,\n  resetFormCallback\n}) => {\n  const validationSchema = object({\n    category: string().required(\"This field is required\"),\n    service: string().required(\"This field is required\"),\n    bookingDate: string().required(\"This field is required\")\n  });\n  const {\n    t\n  } = useTranslation();\n  const initialValues = getFromFields(fields, \"value\");\n  const options = getFromFields(fields, \"options\");\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    }\n  });\n  const {\n    setFieldValue,\n    resetForm,\n    handleBlur\n  } = formik;\n  const dateFieldHandleOnChange = useCallback(fieldName => value => {\n    setFieldValue(fieldName, value);\n  }, [setFieldValue]);\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  const onBlurCallback = useCallback(fieldName => (e, value) => {\n    handleBlur(e);\n    setFieldValue(fieldName, value);\n  }, [setFieldValue, handleBlur]);\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    formik.resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n  const [unAvailables, setUnavailables] = useState([12, 20, 14, 5, 6, 25]);\n  const [barelyAvailable, setBarelyAvalaible] = useState([1, 30]);\n\n  const handleDateMonthChange = date => {\n    const result1 = [];\n\n    while (result1.length <= 5) {\n      result1.push(Math.floor(Math.random() * 31));\n    }\n\n    setUnavailables(result1);\n    const result2 = [];\n\n    while (result2.length <= 4) {\n      result2.push(Math.floor(Math.random() * 15));\n    }\n\n    setBarelyAvalaible(result2);\n  };\n\n  const filtrerUnavailableDates = date => {\n    return unAvailables.includes(date.getDate());\n  };\n\n  const renderWrappedDay = (date, selectedDate, dayInCurrentMonth, component) => {\n    const isUnAvalaible = unAvailables.includes(new Date(date).getDate());\n    const isBarelyAvalaible = barelyAvailable.includes(new Date(date).getDate());\n    const className = isUnAvalaible ? \"u-available\" : isBarelyAvalaible ? \"b-available\" : \"available\";\n    const message = isUnAvalaible ? \"Unavailable\" : isBarelyAvalaible ? \"Barely available\" : \"Available\";\n\n    if (dayInCurrentMonth) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        title: message,\n        className: classnames(className, \"badge\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }\n      }), component);\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 14\n        }\n      }, component);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientBookingForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"patientBookingForm__form\",\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientBookingForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"category\",\n    fieldValue: formik.values.category,\n    label: t(\"booking.category\"),\n    isValid: isValid(\"category\"),\n    errorText: getErrorText(\"category\"),\n    onBlur: onBlurCallback(\"category\"),\n    options: options.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientBookingForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"service\",\n    fieldValue: formik.values.service,\n    label: t(\"booking.service\"),\n    isValid: isValid(\"service\"),\n    errorText: getErrorText(\"service\"),\n    onBlur: onBlurCallback(\"service\"),\n    options: options.service,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientBookingForm__item dateVisit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateField, {\n    fieldName: \"bookingDate\",\n    fieldValue: formik.values.bookingDate,\n    disableFuture: false,\n    onMonthChange: handleDateMonthChange,\n    renderDay: renderWrappedDay,\n    shouldDisableDate: filtrerUnavailableDates,\n    theme: \"regular\",\n    format: \"dd/MM/yyyy\",\n    isValid: isValid(\"bookingDate\"),\n    errorText: getErrorText(\"bookingDate\"),\n    label: t(\"booking.bookingdate\"),\n    onChange: dateFieldHandleOnChange(\"bookingDate\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"badge available\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }), \"The date is availabe to book a visit.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"badge b-available\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }), \"The date is availabe, but it's almost complete.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"badge u-available\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 19\n    }\n  }), \"The date isn't available, no more visit allowed.\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientBookingForm__buttonSet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SmallButton, {\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, submitButtonLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => setOpenResetConfirmation(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, resetButtonLabel))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: openResetConfirmation,\n    title: resetButtonLabel.toUpperCase(),\n    info: `Are you sure to ${resetButtonLabel} the Form?`,\n    icon: warningIcon,\n    primaryButtonLabel: resetButtonLabel,\n    secondaryButtonLabel: \"Dismiss\",\n    handlePrimaryButtonClick: handleResetConfirmation,\n    handleSecondaryButtonClick: () => setOpenResetConfirmation(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default BookingForm;","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientBooking/bookingForm/BookingForm.tsx"],"names":["React","useCallback","useEffect","useState","DateField","SelectField","SmallButton","TextButton","useTranslation","object","string","formatAllFieldValues","getFromFields","useFormik","get","has","ConfirmationDialog","warningIcon","classnames","BookingForm","fields","onSubmit","submitButtonLabel","resetButtonLabel","isLoading","shouldResetForm","resetFormCallback","validationSchema","category","required","service","bookingDate","t","initialValues","options","formik","enableReinitialize","values","formattedValues","setFieldValue","resetForm","handleBlur","dateFieldHandleOnChange","fieldName","value","isValid","touched","errors","getErrorText","onBlurCallback","e","openResetConfirmation","setOpenResetConfirmation","handleResetConfirmation","unAvailables","setUnavailables","barelyAvailable","setBarelyAvalaible","handleDateMonthChange","date","result1","length","push","Math","floor","random","result2","filtrerUnavailableDates","includes","getDate","renderWrappedDay","selectedDate","dayInCurrentMonth","component","isUnAvalaible","Date","isBarelyAvalaible","className","message","handleSubmit","toUpperCase"],"mappings":"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","sourcesContent":["import { createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\nimport React, { FC, useCallback, useEffect, useState } from \"react\";\nimport DateField from \"../../dateField/DateField\";\nimport SelectField from \"../../selectField/SelectField\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport TextButton from \"../../textButton/TextButton\";\nimport \"./styles.scss\";\nimport { TBookingProps } from \"./types\";\nimport { useTranslation } from \"react-i18next\";\nimport { object, string } from \"yup\";\nimport {\n  formatAllFieldValues,\n  getFromFields,\n} from \"../../../../libraries/formDataHandling/functions\";\nimport { useFormik } from \"formik\";\nimport { get, has } from \"lodash\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport classnames from \"classnames\";\n\nconst BookingForm: FC<TBookingProps> = ({\n  fields,\n  onSubmit,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n  shouldResetForm,\n  resetFormCallback,\n}) => {\n  const validationSchema = object({\n    category: string().required(\"This field is required\"),\n    service: string().required(\"This field is required\"),\n    bookingDate: string().required(\"This field is required\"),\n  });\n  const { t } = useTranslation();\n  const initialValues = getFromFields(fields, \"value\");\n  const options = getFromFields(fields, \"options\");\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    },\n  });\n\n  const { setFieldValue, resetForm, handleBlur } = formik;\n\n  const dateFieldHandleOnChange = useCallback(\n    (fieldName: string) => (value: any) => {\n      setFieldValue(fieldName, value);\n    },\n    [setFieldValue]\n  );\n\n  const isValid = (fieldName: string): boolean => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = (fieldName: string): string => {\n    return has(formik.touched, fieldName)\n      ? (get(formik.errors, fieldName) as string)\n      : \"\";\n  };\n\n  const onBlurCallback = useCallback(\n    (fieldName: string) =>\n      (\n        e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n        value: string\n      ) => {\n        handleBlur(e);\n        setFieldValue(fieldName, value);\n      },\n    [setFieldValue, handleBlur]\n  );\n\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    formik.resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n\n  const [unAvailables, setUnavailables] = useState([12, 20, 14, 5, 6, 25]);\n  const [barelyAvailable, setBarelyAvalaible] = useState([1, 30]);\n  const handleDateMonthChange = (date: Date | null) => {\n    const result1 = [];\n    while (result1.length <= 5) {\n      result1.push(Math.floor(Math.random() * 31));\n    }\n    setUnavailables(result1);\n    const result2 = [];\n    while (result2.length <= 4) {\n      result2.push(Math.floor(Math.random() * 15));\n    }\n    setBarelyAvalaible(result2);\n  };\n\n  const filtrerUnavailableDates = (date: Date | null) => {\n    return unAvailables.includes(date!.getDate());\n  };\n  const renderWrappedDay = (\n    date: any,\n    selectedDate: any,\n    dayInCurrentMonth: boolean,\n    component: any\n  ) => {\n    const isUnAvalaible = unAvailables.includes(new Date(date).getDate());\n    const isBarelyAvalaible = barelyAvailable.includes(\n      new Date(date).getDate()\n    );\n    const className = isUnAvalaible\n      ? \"u-available\"\n      : isBarelyAvalaible\n      ? \"b-available\"\n      : \"available\";\n\n    const message = isUnAvalaible\n      ? \"Unavailable\"\n      : isBarelyAvalaible\n      ? \"Barely available\"\n      : \"Available\";\n\n    if (dayInCurrentMonth) {\n      return (\n        <div className=\"custom-date\">\n          <span\n            title={message}\n            className={classnames(className, \"badge\")}\n          ></span>\n          {component}\n        </div>\n      );\n    } else {\n      return <div className=\"custom-date\">{component}</div>;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"patientBookingForm\">\n        <form\n          className=\"patientBookingForm__form\"\n          onSubmit={formik.handleSubmit}\n        >\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientBookingForm__item\">\n              <SelectField\n                fieldName=\"category\"\n                fieldValue={formik.values.category}\n                label={t(\"booking.category\")}\n                isValid={isValid(\"category\")}\n                errorText={getErrorText(\"category\")}\n                onBlur={onBlurCallback(\"category\")}\n                options={options.category}\n              />\n            </div>\n            <div className=\"patientBookingForm__item\">\n              <SelectField\n                fieldName=\"service\"\n                fieldValue={formik.values.service}\n                label={t(\"booking.service\")}\n                isValid={isValid(\"service\")}\n                errorText={getErrorText(\"service\")}\n                onBlur={onBlurCallback(\"service\")}\n                options={options.service}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientBookingForm__item dateVisit\">\n              <DateField\n                fieldName=\"bookingDate\"\n                fieldValue={formik.values.bookingDate}\n                disableFuture={false}\n                onMonthChange={handleDateMonthChange}\n                renderDay={renderWrappedDay}\n                shouldDisableDate={filtrerUnavailableDates}\n                theme=\"regular\"\n                format=\"dd/MM/yyyy\"\n                isValid={isValid(\"bookingDate\")}\n                errorText={getErrorText(\"bookingDate\")}\n                label={t(\"booking.bookingdate\")}\n                onChange={dateFieldHandleOnChange(\"bookingDate\")}\n              />\n              <div className=\"helper-text\">\n                <p>\n                  <span className=\"badge available\"></span>The date is availabe\n                  to book a visit.\n                </p>\n                <p>\n                  <span className=\"badge b-available\"></span>The date is\n                  availabe, but it's almost complete.\n                </p>\n                <p>\n                  <span className=\"badge u-available\"></span>The date isn't\n                  available, no more visit allowed.\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"patientBookingForm__buttonSet\">\n            <div className=\"submit_button\">\n              <SmallButton type=\"submit\" disabled={isLoading}>\n                {submitButtonLabel}\n              </SmallButton>\n            </div>\n            <div className=\"reset_button\">\n              <TextButton onClick={() => setOpenResetConfirmation(true)}>\n                {resetButtonLabel}\n              </TextButton>\n            </div>\n          </div>\n          <ConfirmationDialog\n            isOpen={openResetConfirmation}\n            title={resetButtonLabel.toUpperCase()}\n            info={`Are you sure to ${resetButtonLabel} the Form?`}\n            icon={warningIcon}\n            primaryButtonLabel={resetButtonLabel}\n            secondaryButtonLabel=\"Dismiss\"\n            handlePrimaryButtonClick={handleResetConfirmation}\n            handleSecondaryButtonClick={() => setOpenResetConfirmation(false)}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default BookingForm;\n"]},"metadata":{},"sourceType":"module"}