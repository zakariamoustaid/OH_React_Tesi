{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTriage/patientTriageTable/PatientTriageTable.tsx\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport { examinationsByPatientId } from \"../../../../state/examinations/actions\";\nimport InfoBox from \"../../infoBox/InfoBox\";\nimport Table from \"../../table/Table\";\n\nconst PatientTriageTable = ({\n  shouldUpdateTable\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const label = {\n    pex_date: t(\"examination.datetriage\"),\n    pex_height: t(\"examination.height\"),\n    pex_weight: t(\"examination.weight\"),\n    pex_pa_max: t(\"examination.ap.max\"),\n    pex_pa_min: t(\"examination.ap.min\"),\n    pex_fc: t(\"examination.heartrate\"),\n    pex_temp: t(\"examination.temperature\"),\n    pex_sat: t(\"examination.saturation\"),\n    pex_note: t(\"examination.note\")\n  };\n  const header = [\"pex_date\"];\n  const order = [\"pex_date\"];\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.examinations.examinationsByPatientId.data ? state.examinations.examinationsByPatientId.data : []);\n  const patientCode = useSelector(state => {\n    var _state$patients$selec;\n\n    return (_state$patients$selec = state.patients.selectedPatient.data) === null || _state$patients$selec === void 0 ? void 0 : _state$patients$selec.code;\n  });\n  useEffect(() => {\n    dispatch(examinationsByPatientId(patientCode));\n  }, [dispatch, patientCode, shouldUpdateTable]);\n\n  const formatDataToDisplay = data => {\n    return data.map(item => {\n      return {\n        pex_height: item.pex_height,\n        pex_weight: item.pex_weight,\n        pex_pa_max: item.pex_pa_max,\n        pex_pa_min: item.pex_pa_min,\n        pex_fc: item.pex_fc,\n        pex_temp: item.pex_temp,\n        pex_sat: item.pex_sat,\n        pex_note: item.pex_note,\n        pex_date: item.pex_date ? moment(item.pex_date).format(\"DD/MM/YYYY\") : \"\"\n      };\n    });\n  };\n\n  const triageStatus = useSelector(state => state.examinations.examinationsByPatientId.status);\n\n  const onDelete = () => {\n    console.log(\"delete\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriageTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, (() => {\n    switch (triageStatus) {\n      case \"FAIL\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"error\",\n          message: t(\"common.somethingwrong\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }\n        });\n\n      case \"LOADING\":\n        return /*#__PURE__*/React.createElement(CircularProgress, {\n          style: {\n            marginLeft: \"50%\",\n            position: \"relative\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }\n        });\n\n      case \"SUCCESS\":\n        return /*#__PURE__*/React.createElement(Table, {\n          rowData: formatDataToDisplay(data),\n          compareRows: dateComparator,\n          tableHeader: header,\n          labelData: label,\n          columnsOrder: order,\n          rowsPerPage: 5,\n          onDelete: onDelete,\n          isCollapsabile: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }\n        });\n\n      case \"SUCCESS_EMPTY\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"warning\",\n          message: t(\"common.emptydata\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 20\n          }\n        });\n\n      default:\n        return;\n    }\n  })());\n};\n\nexport default PatientTriageTable;","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTriage/patientTriageTable/PatientTriageTable.tsx"],"names":["CircularProgress","moment","React","useEffect","useTranslation","useDispatch","useSelector","dateComparator","examinationsByPatientId","InfoBox","Table","PatientTriageTable","shouldUpdateTable","t","label","pex_date","pex_height","pex_weight","pex_pa_max","pex_pa_min","pex_fc","pex_temp","pex_sat","pex_note","header","order","dispatch","data","state","examinations","patientCode","patients","selectedPatient","code","formatDataToDisplay","map","item","format","triageStatus","status","onDelete","console","log","marginLeft","position"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAmCC,SAAnC,QAAoD,OAApD;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,uBAAT,QAAwC,wCAAxC;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAKA,MAAMC,kBAAgD,GAAG,CAAC;AACxDC,EAAAA;AADwD,CAAD,KAEnD;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,EAA5B;AACA,QAAMU,KAAK,GAAG;AACZC,IAAAA,QAAQ,EAAEF,CAAC,CAAC,wBAAD,CADC;AAEZG,IAAAA,UAAU,EAAEH,CAAC,CAAC,oBAAD,CAFD;AAGZI,IAAAA,UAAU,EAAEJ,CAAC,CAAC,oBAAD,CAHD;AAIZK,IAAAA,UAAU,EAAEL,CAAC,CAAC,oBAAD,CAJD;AAKZM,IAAAA,UAAU,EAAEN,CAAC,CAAC,oBAAD,CALD;AAMZO,IAAAA,MAAM,EAAEP,CAAC,CAAC,uBAAD,CANG;AAOZQ,IAAAA,QAAQ,EAAER,CAAC,CAAC,yBAAD,CAPC;AAQZS,IAAAA,OAAO,EAAET,CAAC,CAAC,wBAAD,CARE;AASZU,IAAAA,QAAQ,EAAEV,CAAC,CAAC,kBAAD;AATC,GAAd;AAWA,QAAMW,MAAM,GAAG,CAAC,UAAD,CAAf;AACA,QAAMC,KAAK,GAAG,CAAC,UAAD,CAAd;AAEA,QAAMC,QAAQ,GAAGrB,WAAW,EAA5B;AACA,QAAMsB,IAAI,GAAGrB,WAAW,CAAmCsB,KAAD,IACxDA,KAAK,CAACC,YAAN,CAAmBrB,uBAAnB,CAA2CmB,IAA3C,GACIC,KAAK,CAACC,YAAN,CAAmBrB,uBAAnB,CAA2CmB,IAD/C,GAEI,EAHkB,CAAxB;AAMA,QAAMG,WAAW,GAAGxB,WAAW,CAC5BsB,KAAD;AAAA;;AAAA,oCAAWA,KAAK,CAACG,QAAN,CAAeC,eAAf,CAA+BL,IAA1C,0DAAW,sBAAqCM,IAAhD;AAAA,GAD6B,CAA/B;AAGA9B,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,QAAQ,CAAClB,uBAAuB,CAACsB,WAAD,CAAxB,CAAR;AACD,GAFQ,EAEN,CAACJ,QAAD,EAAWI,WAAX,EAAwBlB,iBAAxB,CAFM,CAAT;;AAIA,QAAMsB,mBAAmB,GAAIP,IAAD,IAAmC;AAC7D,WAAOA,IAAI,CAACQ,GAAL,CAAUC,IAAD,IAAU;AACxB,aAAO;AACLpB,QAAAA,UAAU,EAAEoB,IAAI,CAACpB,UADZ;AAELC,QAAAA,UAAU,EAAEmB,IAAI,CAACnB,UAFZ;AAGLC,QAAAA,UAAU,EAAEkB,IAAI,CAAClB,UAHZ;AAILC,QAAAA,UAAU,EAAEiB,IAAI,CAACjB,UAJZ;AAKLC,QAAAA,MAAM,EAAEgB,IAAI,CAAChB,MALR;AAMLC,QAAAA,QAAQ,EAAEe,IAAI,CAACf,QANV;AAOLC,QAAAA,OAAO,EAAEc,IAAI,CAACd,OAPT;AAQLC,QAAAA,QAAQ,EAAEa,IAAI,CAACb,QARV;AASLR,QAAAA,QAAQ,EAAEqB,IAAI,CAACrB,QAAL,GACNd,MAAM,CAACmC,IAAI,CAACrB,QAAN,CAAN,CAAsBsB,MAAtB,CAA6B,YAA7B,CADM,GAEN;AAXC,OAAP;AAaD,KAdM,CAAP;AAeD,GAhBD;;AAiBA,QAAMC,YAAY,GAAGhC,WAAW,CAC7BsB,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBrB,uBAAnB,CAA2C+B,MADxB,CAAhC;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,MAAM;AACN,YAAQJ,YAAR;AACE,WAAK,MAAL;AACE,4BACE,oBAAC,OAAD;AAAS,UAAA,IAAI,EAAC,OAAd;AAAsB,UAAA,OAAO,EAAEzB,CAAC,CAAC,uBAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAGF,WAAK,SAAL;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,KAAK,EAAE;AAAE8B,YAAAA,UAAU,EAAE,KAAd;AAAqBC,YAAAA,QAAQ,EAAE;AAA/B,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMF,WAAK,SAAL;AACE,4BACE,oBAAC,KAAD;AACE,UAAA,OAAO,EAAEV,mBAAmB,CAACP,IAAD,CAD9B;AAEE,UAAA,WAAW,EAAEpB,cAFf;AAGE,UAAA,WAAW,EAAEiB,MAHf;AAIE,UAAA,SAAS,EAAEV,KAJb;AAKE,UAAA,YAAY,EAAEW,KALhB;AAME,UAAA,WAAW,EAAE,CANf;AAOE,UAAA,QAAQ,EAAEe,QAPZ;AAQE,UAAA,cAAc,EAAE,IARlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAaF,WAAK,eAAL;AACE,4BAAO,oBAAC,OAAD;AAAS,UAAA,IAAI,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE3B,CAAC,CAAC,kBAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEF;AACE;AA9BJ;AAgCD,GAjCA,GADH,CADF;AAsCD,CA/FD;;AAiGA,eAAeF,kBAAf","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport React, { FunctionComponent, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { PatientExaminationDTO } from \"../../../../generated\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport { examinationsByPatientId } from \"../../../../state/examinations/actions\";\nimport { IState } from \"../../../../types\";\nimport InfoBox from \"../../infoBox/InfoBox\";\nimport Table from \"../../table/Table\";\ninterface IOwnProps {\n  shouldUpdateTable: boolean;\n}\n\nconst PatientTriageTable: FunctionComponent<IOwnProps> = ({\n  shouldUpdateTable,\n}) => {\n  const { t } = useTranslation();\n  const label = {\n    pex_date: t(\"examination.datetriage\"),\n    pex_height: t(\"examination.height\"),\n    pex_weight: t(\"examination.weight\"),\n    pex_pa_max: t(\"examination.ap.max\"),\n    pex_pa_min: t(\"examination.ap.min\"),\n    pex_fc: t(\"examination.heartrate\"),\n    pex_temp: t(\"examination.temperature\"),\n    pex_sat: t(\"examination.saturation\"),\n    pex_note: t(\"examination.note\"),\n  };\n  const header = [\"pex_date\"];\n  const order = [\"pex_date\"];\n\n  const dispatch = useDispatch();\n  const data = useSelector<IState, PatientExaminationDTO[]>((state) =>\n    state.examinations.examinationsByPatientId.data\n      ? state.examinations.examinationsByPatientId.data\n      : []\n  );\n\n  const patientCode = useSelector<IState, number | undefined>(\n    (state) => state.patients.selectedPatient.data?.code\n  );\n  useEffect(() => {\n    dispatch(examinationsByPatientId(patientCode));\n  }, [dispatch, patientCode, shouldUpdateTable]);\n\n  const formatDataToDisplay = (data: PatientExaminationDTO[]) => {\n    return data.map((item) => {\n      return {\n        pex_height: item.pex_height,\n        pex_weight: item.pex_weight,\n        pex_pa_max: item.pex_pa_max,\n        pex_pa_min: item.pex_pa_min,\n        pex_fc: item.pex_fc,\n        pex_temp: item.pex_temp,\n        pex_sat: item.pex_sat,\n        pex_note: item.pex_note,\n        pex_date: item.pex_date\n          ? moment(item.pex_date).format(\"DD/MM/YYYY\")\n          : \"\",\n      };\n    });\n  };\n  const triageStatus = useSelector<IState, string | undefined>(\n    (state) => state.examinations.examinationsByPatientId.status\n  );\n\n  const onDelete = () => {\n    console.log(\"delete\");\n  };\n\n  return (\n    <div className=\"patientTriageTable\">\n      {(() => {\n        switch (triageStatus) {\n          case \"FAIL\":\n            return (\n              <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />\n            );\n          case \"LOADING\":\n            return (\n              <CircularProgress\n                style={{ marginLeft: \"50%\", position: \"relative\" }}\n              />\n            );\n\n          case \"SUCCESS\":\n            return (\n              <Table\n                rowData={formatDataToDisplay(data)}\n                compareRows={dateComparator}\n                tableHeader={header}\n                labelData={label}\n                columnsOrder={order}\n                rowsPerPage={5}\n                onDelete={onDelete}\n                isCollapsabile={true}\n              />\n            );\n\n          case \"SUCCESS_EMPTY\":\n            return <InfoBox type=\"warning\" message={t(\"common.emptydata\")} />;\n\n          default:\n            return;\n        }\n      })()}\n    </div>\n  );\n};\n\nexport default PatientTriageTable;\n"]},"metadata":{},"sourceType":"module"}