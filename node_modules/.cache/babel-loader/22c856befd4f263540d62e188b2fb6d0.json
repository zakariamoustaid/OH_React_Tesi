{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx\";\nimport React, { useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { useFormik } from \"formik\";\nimport { TextField } from '@material-ui/core';\nimport \"./styles.scss\";\nimport Test from \"./Test\";\nimport { createBill, createBillReset } from \"../../../state/bills/actions\";\nimport { searchPatient, getPatientSuccess } from \"../../../state/patients/actions\";\n\nconst NewBillActivity = ({\n  userCredentials,\n  isLoading,\n  hasSucceeded,\n  createBill,\n  createBillReset,\n  hasFailed,\n  billHomeRoute,\n  patientSearchResults,\n  getPatientSuccess\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.billing\")]: \"/billing\",\n    [t(\"nav.newbill\")]: \"/bills\"\n  };\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n  const formik = useFormik({\n    initialValues,\n    onSubmit: values => {\n      // First scroll to show searching message\n      searchPatient(values);\n    }\n  });\n  /*useEffect(() => {\n      if (\n          activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n          activityTransitionState === \"TO_BILL_HOME\"\n      ) {\n          createBillReset();\n          setShouldResetForm(true);\n      }\n  }, [activityTransitionState, createBillReset]);\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n   useEffect(() => {\n      if (hasFailed) {\n          scrollToElement(infoBoxRef.current);\n      }\n  }, [hasFailed]);\n   const [shouldResetForm, setShouldResetForm] = useState(false);\n   const resetFormCallback = () => {\n      setShouldResetForm(false);\n      setActivityTransitionState(\"IDLE\");\n      scrollToElement(null);\n  };\n   const formik = useFormik({\n      initialValues: {\n          firstName: '',\n      },\n      onSubmit: (values) => {\n          console.log(values);\n      },\n  });\n  */\n\n  switch (activityTransitionState) {\n    case \"TO_PATIENT_DETAILS\":\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: billHomeRoute,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 20\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"new_Bill\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppHeader, {\n        userCredentials: userCredentials,\n        breadcrumbMap: breadcrumbMap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newBill__background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newBill__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newBill__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }\n      }, t(\"nav.newbill\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newBill__panel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        className: \"date\",\n        type: \"date\",\n        id: \"outlined-basic\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(TextField, {\n        className: \"patient\",\n        id: \"outlined-basic\",\n        label: \"patient\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 41\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"searchPatient__results_list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 33\n        }\n      }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(Test, {\n        key: index,\n        patient: patient,\n        getPatientSuccessCallback: getPatientSuccess,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 41\n        }\n      }))), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => console.log(patientSearchResults),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 33\n        }\n      }, \"indietro\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"searchPatient__results_list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 33\n        }\n      }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(Test, {\n        key: index,\n        patient: patient,\n        getPatientSuccessCallback: getPatientSuccess,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 41\n        }\n      })))))), /*#__PURE__*/React.createElement(Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }));\n  }\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  patientSearchResults: state.patients.searchResults.data,\n  isLoading: state.bills.createBill.status === \"LOADING\",\n  hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n  hasFailed: state.bills.createBill.status === \"FAIL\"\n});\n\nconst mapDispatchToProps = {\n  createBill,\n  createBillReset,\n  getPatientSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx"],"names":["React","useState","AppHeader","Footer","Button","useTranslation","connect","Redirect","useFormik","TextField","Test","createBill","createBillReset","searchPatient","getPatientSuccess","NewBillActivity","userCredentials","isLoading","hasSucceeded","hasFailed","billHomeRoute","patientSearchResults","t","breadcrumbMap","activityTransitionState","setActivityTransitionState","test_succ","formik","initialValues","onSubmit","values","map","patient","index","console","log","mapStateToProps","state","main","authentication","data","patients","searchResults","bills","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { IState } from \"../../../types\";\nimport { useFormik } from \"formik\";\nimport { Divider, TextField } from '@material-ui/core';\nimport { BillDTO } from \"../../../generated\";\nimport { FullBillDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport \"./styles.scss\";\nimport Test from \"./Test\";\nimport {\n    createBill,\n    createBillReset,\n} from \"../../../state/bills/actions\";\nimport {\n    searchPatient,\n    getPatientSuccess,\n} from \"../../../state/patients/actions\";\n\nimport {\n    IDispatchProps,\n    IStateProps,\n    TActivityTransitionState,\n    TProps,\n} from \"./types\";\n\n\nconst NewBillActivity: FunctionComponent<TProps> = ({\n    userCredentials,\n    isLoading,\n    hasSucceeded,\n    createBill,\n    createBillReset,\n    hasFailed,\n    billHomeRoute,\n    patientSearchResults,\n    getPatientSuccess,\n}) => {\n    const { t } = useTranslation();\n\n    const breadcrumbMap = {\n        [t(\"nav.dashboard\")]: \"/\",\n        [t(\"nav.billing\")]: \"/billing\",\n        [t(\"nav.newbill\")]: \"/bills\",\n    };\n\n    const [activityTransitionState, setActivityTransitionState] =\n        useState<TActivityTransitionState>(\"IDLE\");\n\n    const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: (values: TValues) => {\n          // First scroll to show searching message\n    \n          searchPatient(values);\n        },\n      });\n\n    /*useEffect(() => {\n        if (\n            activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n            activityTransitionState === \"TO_BILL_HOME\"\n        ) {\n            createBillReset();\n            setShouldResetForm(true);\n        }\n    }, [activityTransitionState, createBillReset]);\n\n\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (hasFailed) {\n            scrollToElement(infoBoxRef.current);\n        }\n    }, [hasFailed]);\n\n    const [shouldResetForm, setShouldResetForm] = useState(false);\n\n    const resetFormCallback = () => {\n        setShouldResetForm(false);\n        setActivityTransitionState(\"IDLE\");\n        scrollToElement(null);\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n        },\n        onSubmit: (values) => {\n            console.log(values);\n        },\n    });\n    */\n    switch (activityTransitionState) {\n        case \"TO_PATIENT_DETAILS\":\n            return <Redirect to={billHomeRoute} />;\n        default:\n            return (\n                <div className=\"new_Bill\">\n                    <AppHeader\n                        userCredentials={userCredentials}\n                        breadcrumbMap={breadcrumbMap}\n                    />\n                    <div className=\"newBill__background\">\n                        <div className=\"newBill__content\">\n                            <div className=\"newBill__title\">{t(\"nav.newbill\")}</div>\n                            <div className=\"newBill__panel\">\n                                <div className=\"table\">\n                                    <form>\n                                        <TextField className=\"date\" type=\"date\" id=\"outlined-basic\" variant=\"outlined\" />\n                                        <TextField className=\"patient\" id=\"outlined-basic\" label=\"patient\" variant=\"outlined\" />\n                                    </form>\n                                </div>\n                                <div className=\"searchPatient__results_list\">\n                                    {patientSearchResults?.map((patient, index) => (\n                                        <Test\n                                            key={index}\n                                            patient={patient}\n                                            getPatientSuccessCallback={getPatientSuccess}\n                                        />\n                                    ))}\n                                </div>\n                                <Button onClick={() => console.log(patientSearchResults)}>\n                                    indietro\n                                </Button>\n                                <div className=\"searchPatient__results_list\">\n                                    {patientSearchResults?.map((patient, index) => (\n                                        <Test\n                                            key={index}\n                                            patient={patient}\n                                            getPatientSuccessCallback={getPatientSuccess}\n                                        />\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <Footer />\n                </div>\n            );\n    }\n}\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n    userCredentials: state.main.authentication.data,\n    patientSearchResults: state.patients.searchResults.data,\n    isLoading: state.bills.createBill.status === \"LOADING\",\n    hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n    hasFailed: state.bills.createBill.status === \"FAIL\",\n});\n\n\n\n\nconst mapDispatchToProps: IDispatchProps = {\n    createBill,\n    createBillReset,\n    getPatientSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);\n"]},"metadata":{},"sourceType":"module"}