{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientBooking/PatientBooking.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport BookingForm from \"./bookingForm/BookingForm\";\nimport \"./styles.scss\";\nimport { connect } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { initialFields } from \"./consts\";\n\nconst PatientBooking = ({\n  createBooking,\n  createBookingReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const infoBoxRef = useRef(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [bookingTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  useEffect(() => {\n    if (bookingTransitionState === \"TO_RESET\") {\n      createBookingReset();\n      setShouldResetForm(true);\n    }\n  }, [bookingTransitionState, createBookingReset]);\n\n  const onSubmit = booking => {\n    setShouldResetForm(false);\n    createBooking(booking);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  return /*#__PURE__*/React.createElement(BookingForm, {\n    fields: initialFields,\n    onSubmit: onSubmit,\n    submitButtonLabel: t(\"booking.saveform\"),\n    resetButtonLabel: t(\"common.discard\"),\n    shouldResetForm: shouldResetForm,\n    resetFormCallback: resetFormCallback,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  isLoading: false,\n  hasSucceeded: true,\n  hasFailed: false\n});\n\nconst mapDispatchToProps = {\n  createBooking: () => {},\n  createBookingReset: () => {}\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientBooking);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientBooking/PatientBooking.tsx"],"names":["React","useEffect","useRef","useState","BookingForm","connect","useTranslation","scrollToElement","initialFields","PatientBooking","createBooking","createBookingReset","isLoading","hasSucceeded","hasFailed","t","infoBoxRef","shouldResetForm","setShouldResetForm","bookingTransitionState","setActivityTransitionState","current","onSubmit","booking","resetFormCallback","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,eAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AAQA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,eAAT,QAAgC,4CAAhC;AACA,SAASC,aAAT,QAA8B,UAA9B;;AAEA,MAAMC,cAAiC,GAAG,CAAC;AACzCC,EAAAA,aADyC;AAEzCC,EAAAA,kBAFyC;AAGzCC,EAAAA,SAHyC;AAIzCC,EAAAA,YAJyC;AAKzCC,EAAAA;AALyC,CAAD,KAMpC;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,EAA5B;AACA,QAAMU,UAAU,GAAGd,MAAM,CAAiB,IAAjB,CAAzB;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACgB,sBAAD,EAAyBC,0BAAzB,IACJjB,QAAQ,CAA0B,MAA1B,CADV;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAJ,EAAe;AACbP,MAAAA,eAAe,CAACS,UAAU,CAACK,OAAZ,CAAf;AACD;AACF,GAJQ,EAIN,CAACP,SAAD,CAJM,CAAT;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,sBAAsB,KAAK,UAA/B,EAA2C;AACzCR,MAAAA,kBAAkB;AAClBO,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;AACF,GALQ,EAKN,CAACC,sBAAD,EAAyBR,kBAAzB,CALM,CAAT;;AAOA,QAAMW,QAAQ,GAAIC,OAAD,IAAkB;AACjCL,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAR,IAAAA,aAAa,CAACa,OAAD,CAAb;AACD,GAHD;;AAKA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BN,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,0BAA0B,CAAC,MAAD,CAA1B;AACAb,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAJD;;AAKA,sBACE,oBAAC,WAAD;AACE,IAAA,MAAM,EAAEC,aADV;AAEE,IAAA,QAAQ,EAAEc,QAFZ;AAGE,IAAA,iBAAiB,EAAEP,CAAC,CAAC,kBAAD,CAHtB;AAIE,IAAA,gBAAgB,EAAEA,CAAC,CAAC,gBAAD,CAJrB;AAKE,IAAA,eAAe,EAAEE,eALnB;AAME,IAAA,iBAAiB,EAAEO,iBANrB;AAOE,IAAA,SAAS,EAAEZ,SAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CA/CD;;AAiDA,MAAMa,eAAe,GAAIC,KAAD,KAAiC;AACvDd,EAAAA,SAAS,EAAE,KAD4C;AAEvDC,EAAAA,YAAY,EAAE,IAFyC;AAGvDC,EAAAA,SAAS,EAAE;AAH4C,CAAjC,CAAxB;;AAMA,MAAMa,kBAAkC,GAAG;AACzCjB,EAAAA,aAAa,EAAE,MAAM,CAAE,CADkB;AAEzCC,EAAAA,kBAAkB,EAAE,MAAM,CAAE;AAFa,CAA3C;AAIA,eAAeN,OAAO,CAACoB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,cAA7C,CAAf","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\nimport BookingForm from \"./bookingForm/BookingForm\";\nimport \"./styles.scss\";\nimport { connect } from \"react-redux\";\nimport { IState } from \"../../../types\";\nimport {\n  IDispatchProps,\n  IStateProps,\n  TBookingTransitionState,\n  TBookingProps,\n} from \"./types\";\nimport { useTranslation } from \"react-i18next\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { initialFields } from \"./consts\";\n\nconst PatientBooking: FC<TBookingProps> = ({\n  createBooking,\n  createBookingReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n}) => {\n  const { t } = useTranslation();\n  const infoBoxRef = useRef<HTMLDivElement>(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [bookingTransitionState, setActivityTransitionState] =\n    useState<TBookingTransitionState>(\"IDLE\");\n\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n\n  useEffect(() => {\n    if (bookingTransitionState === \"TO_RESET\") {\n      createBookingReset();\n      setShouldResetForm(true);\n    }\n  }, [bookingTransitionState, createBookingReset]);\n\n  const onSubmit = (booking: any) => {\n    setShouldResetForm(false);\n    createBooking(booking);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n  return (\n    <BookingForm\n      fields={initialFields}\n      onSubmit={onSubmit}\n      submitButtonLabel={t(\"booking.saveform\")}\n      resetButtonLabel={t(\"common.discard\")}\n      shouldResetForm={shouldResetForm}\n      resetFormCallback={resetFormCallback}\n      isLoading={isLoading}\n    />\n  );\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  isLoading: false,\n  hasSucceeded: true,\n  hasFailed: false,\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  createBooking: () => {},\n  createBookingReset: () => {},\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientBooking);\n"]},"metadata":{},"sourceType":"module"}