{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientTherapy/patientTherapyTable/PatientTherapyTable.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Table from \"../../table/Table\";\nimport { getTherapiesByPatientId } from \"../../../../state/therapies/actions\";\nimport { useTranslation } from \"react-i18next\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { getMedicals } from \"../../../../state/medicals/actions\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport moment from \"moment\";\nimport InfoBox from \"../../infoBox/InfoBox\";\n\nconst PatientTherapyTable = ({}) => {\n  const {\n    t\n  } = useTranslation();\n  const header = [\"startDate\", \"endDate\"];\n  const label = {\n    startDate: t(\"therapy.startDate\"),\n    endDate: t(\"therapy.endDate\"),\n    qty: t(\"therapy.quantity\"),\n    freqInDay: t(\"therapy.frequencyInDay\"),\n    freqInPeriod: t(\"therapy.frequencyInPeriod\"),\n    note: t(\"therapy.note\"),\n    medicalId: t(\"therapy.medical\")\n  };\n  const order = [\"startDate\", \"endDate\"];\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.therapies.therapiesByPatientId.data ? state.therapies.therapiesByPatientId.data : []);\n  const medicals = useSelector(state => state.medicals.medicalsOrderByName.data ? state.medicals.medicalsOrderByName.data : []);\n  const patientCode = useSelector(state => {\n    var _state$patients$selec;\n\n    return (_state$patients$selec = state.patients.selectedPatient.data) === null || _state$patients$selec === void 0 ? void 0 : _state$patients$selec.code;\n  });\n  useEffect(() => {\n    dispatch(getMedicals());\n    dispatch(getTherapiesByPatientId(patientCode));\n  }, [dispatch, patientCode]);\n\n  const formatDataToDisplay = data => {\n    return data.map(item => {\n      const medical = medicals.find(medoc => medoc.code === item.medicalId);\n      return {\n        medicalId: medical ? medical.description : item.medicalId,\n        startDate: item.startDate ? moment(item.startDate).format(\"DD/MM/YYYY\") : \"\",\n        endDate: item.endDate ? moment(item.endDate).format(\"DD/MM/YYYY\") : \"\",\n        qty: item.qty,\n        freqInDay: item.freqInDay,\n        freqInPeriod: item.freqInPeriod,\n        note: item.note\n      };\n    }).sort(dateComparator(\"desc\", \"startDate\"));\n  };\n\n  const therapyStatus = useSelector(state => state.therapies.therapiesByPatientId.status);\n\n  const onDelete = () => {\n    console.log(\"delete\");\n  };\n\n  const onEdit = () => {\n    console.log(\"update\");\n  };\n\n  const onEView = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, (() => {\n    switch (therapyStatus) {\n      case \"FAIL\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"error\",\n          message: t(\"common.somethingwrong\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }\n        });\n\n      case \"LOADING\":\n        return /*#__PURE__*/React.createElement(CircularProgress, {\n          style: {\n            marginLeft: \"50%\",\n            position: \"relative\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }\n        });\n\n      case \"SUCCESS\":\n        return /*#__PURE__*/React.createElement(Table, {\n          rowData: formatDataToDisplay(data),\n          compareRows: dateComparator,\n          tableHeader: header,\n          labelData: label,\n          columnsOrder: order,\n          rowsPerPage: 5,\n          onDelete: onDelete,\n          isCollapsabile: true,\n          onEdit: onEdit,\n          onView: onEView,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }\n        });\n\n      case \"SUCCESS_EMPTY\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"warning\",\n          message: t(\"common.emptydata\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 20\n          }\n        });\n\n      default:\n        return;\n    }\n  })());\n};\n\nexport default PatientTherapyTable;","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientTherapy/patientTherapyTable/PatientTherapyTable.tsx"],"names":["React","useEffect","useDispatch","useSelector","Table","getTherapiesByPatientId","useTranslation","CircularProgress","getMedicals","dateComparator","moment","InfoBox","PatientTherapyTable","t","header","label","startDate","endDate","qty","freqInDay","freqInPeriod","note","medicalId","order","dispatch","data","state","therapies","therapiesByPatientId","medicals","medicalsOrderByName","patientCode","patients","selectedPatient","code","formatDataToDisplay","map","item","medical","find","medoc","description","format","sort","therapyStatus","status","onDelete","console","log","onEdit","onEView","marginLeft","position"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MedicalDTO, TherapyRowDTO } from \"../../../../generated\";\nimport { IState } from \"../../../../types\";\nimport Table from \"../../table/Table\";\nimport { getTherapiesByPatientId } from \"../../../../state/therapies/actions\";\nimport { useTranslation } from \"react-i18next\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { getMedicals } from \"../../../../state/medicals/actions\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport moment from \"moment\";\nimport InfoBox from \"../../infoBox/InfoBox\";\n\ninterface IOwnProps {\n  shouldUpdateTable: boolean;\n}\n\nconst PatientTherapyTable: FunctionComponent<IOwnProps> = ({}) => {\n  const { t } = useTranslation();\n\n  const header = [\"startDate\", \"endDate\"];\n\n  const label = {\n    startDate: t(\"therapy.startDate\"),\n    endDate: t(\"therapy.endDate\"),\n    qty: t(\"therapy.quantity\"),\n    freqInDay: t(\"therapy.frequencyInDay\"),\n    freqInPeriod: t(\"therapy.frequencyInPeriod\"),\n    note: t(\"therapy.note\"),\n    medicalId: t(\"therapy.medical\"),\n  };\n  const order = [\"startDate\", \"endDate\"];\n\n  const dispatch = useDispatch();\n  const data = useSelector<IState, TherapyRowDTO[]>((state) =>\n    state.therapies.therapiesByPatientId.data\n      ? state.therapies.therapiesByPatientId.data\n      : []\n  );\n\n  const medicals = useSelector<IState, MedicalDTO[]>((state) =>\n    state.medicals.medicalsOrderByName.data\n      ? state.medicals.medicalsOrderByName.data\n      : []\n  );\n\n  const patientCode = useSelector<IState, number | undefined>(\n    (state) => state.patients.selectedPatient.data?.code\n  );\n  useEffect(() => {\n    dispatch(getMedicals());\n    dispatch(getTherapiesByPatientId(patientCode));\n  }, [dispatch, patientCode]);\n  const formatDataToDisplay = (data: TherapyRowDTO[]) => {\n    return data\n      .map((item) => {\n        const medical = medicals.find((medoc) => medoc.code === item.medicalId);\n        return {\n          medicalId: medical ? medical.description : item.medicalId,\n          startDate: item.startDate\n            ? moment(item.startDate).format(\"DD/MM/YYYY\")\n            : \"\",\n          endDate: item.endDate\n            ? moment(item.endDate).format(\"DD/MM/YYYY\")\n            : \"\",\n          qty: item.qty,\n          freqInDay: item.freqInDay,\n          freqInPeriod: item.freqInPeriod,\n          note: item.note,\n        };\n      })\n      .sort(dateComparator(\"desc\", \"startDate\"));\n  };\n  const therapyStatus = useSelector<IState, string | undefined>(\n    (state) => state.therapies.therapiesByPatientId.status\n  );\n  const onDelete = () => {\n    console.log(\"delete\");\n  };\n\n  const onEdit = () => {\n    console.log(\"update\");\n  };\n\n  const onEView = () => {};\n\n  return (\n    <div className=\"patientTherapyTable\">\n      {(() => {\n        switch (therapyStatus) {\n          case \"FAIL\":\n            return (\n              <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />\n            );\n          case \"LOADING\":\n            return (\n              <CircularProgress\n                style={{ marginLeft: \"50%\", position: \"relative\" }}\n              />\n            );\n\n          case \"SUCCESS\":\n            return (\n              <Table\n                rowData={formatDataToDisplay(data)}\n                compareRows={dateComparator}\n                tableHeader={header}\n                labelData={label}\n                columnsOrder={order}\n                rowsPerPage={5}\n                onDelete={onDelete}\n                isCollapsabile={true}\n                onEdit={onEdit}\n                onView={onEView}\n              />\n            );\n\n          case \"SUCCESS_EMPTY\":\n            return <InfoBox type=\"warning\" message={t(\"common.emptydata\")} />;\n\n          default:\n            return;\n        }\n      })()}\n    </div>\n  );\n};\n\nexport default PatientTherapyTable;\n"]},"metadata":{},"sourceType":"module"}