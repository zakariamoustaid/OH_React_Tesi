{"ast":null,"code":"import { Configuration, ExaminationControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { CREATE_EXAMINATION_FAIL, CREATE_EXAMINATION_LOADING, CREATE_EXAMINATION_RESET, CREATE_EXAMINATION_SUCCESS, SEARCH_EXAMINATION_FAIL, SEARCH_EXAMINATION_LOADING, SEARCH_EXAMINATION_SUCCESS, SEARCH_EXAMINATION_SUCCESS_EMPTY } from \"./consts\";\nconst examinationControllerApi = new ExaminationControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const createExamination = newPatientExamination => dispatch => {\n  dispatch({\n    type: CREATE_EXAMINATION_LOADING\n  });\n  examinationControllerApi.newPatientExaminationUsingPOST({\n    newPatientExamination\n  }).subscribe(() => {\n    dispatch({\n      type: CREATE_EXAMINATION_SUCCESS\n    });\n  }, error => {\n    dispatch({\n      type: CREATE_EXAMINATION_FAIL,\n      error\n    });\n  });\n};\nexport const createExaminationReset = () => dispatch => {\n  dispatch({\n    type: CREATE_EXAMINATION_RESET\n  });\n};\nexport const examinationsByPatientId = patId => dispatch => {\n  dispatch({\n    type: SEARCH_EXAMINATION_LOADING\n  });\n\n  if (patId) {\n    examinationControllerApi.getByPatientIdUsingGET({\n      patId: patId\n    }).subscribe(payload => {\n      if (Array.isArray(payload) && payload.length > 0) {\n        dispatch({\n          type: SEARCH_EXAMINATION_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: SEARCH_EXAMINATION_SUCCESS_EMPTY,\n          payload: []\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_EXAMINATION_FAIL,\n        error\n      });\n    });\n  } else dispatch({\n    type: SEARCH_EXAMINATION_FAIL,\n    error: \"patient object should not be empty\"\n  });\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/state/examinations/actions.ts"],"names":["Configuration","ExaminationControllerApi","applyTokenMiddleware","CREATE_EXAMINATION_FAIL","CREATE_EXAMINATION_LOADING","CREATE_EXAMINATION_RESET","CREATE_EXAMINATION_SUCCESS","SEARCH_EXAMINATION_FAIL","SEARCH_EXAMINATION_LOADING","SEARCH_EXAMINATION_SUCCESS","SEARCH_EXAMINATION_SUCCESS_EMPTY","examinationControllerApi","middleware","createExamination","newPatientExamination","dispatch","type","newPatientExaminationUsingPOST","subscribe","error","createExaminationReset","examinationsByPatientId","patId","getByPatientIdUsingGET","payload","Array","isArray","length"],"mappings":"AAEA,SACEA,aADF,EAEEC,wBAFF,QAIO,iBAJP;AAKA,SAASC,oBAAT,QAAqC,+CAArC;AAEA,SACEC,uBADF,EAEEC,0BAFF,EAGEC,wBAHF,EAIEC,0BAJF,EAKEC,uBALF,EAMEC,0BANF,EAOEC,0BAPF,EAQEC,gCARF,QASO,UATP;AAWA,MAAMC,wBAAwB,GAAG,IAAIV,wBAAJ,CAC/B,IAAID,aAAJ,CAAkB;AAAEY,EAAAA,UAAU,EAAE,CAACV,oBAAD;AAAd,CAAlB,CAD+B,CAAjC;AAIA,OAAO,MAAMW,iBAAiB,GAC3BC,qBAAD,IACCC,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAGAO,EAAAA,wBAAwB,CACrBM,8BADH,CACkC;AAAEH,IAAAA;AAAF,GADlC,EAEGI,SAFH,CAGI,MAAM;AACJH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAGD,GAPL,EAQKa,KAAD,IAAW;AACTJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEb,uBADC;AAEPgB,MAAAA;AAFO,KAAD,CAAR;AAID,GAbL;AAeD,CArBI;AAuBP,OAAO,MAAMC,sBAAsB,GACjC,MACCL,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEX;AADC,GAAD,CAAR;AAGD,CANI;AAQP,OAAO,MAAMgB,uBAAuB,GACjCC,KAAD,IACCP,QAAD,IAAoE;AAClEA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAER;AADC,GAAD,CAAR;;AAGA,MAAIc,KAAJ,EAAW;AACTX,IAAAA,wBAAwB,CACrBY,sBADH,CAC0B;AAAED,MAAAA,KAAK,EAAEA;AAAT,KAD1B,EAEGJ,SAFH,CAGKM,OAAD,IAAa;AACX,UAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,KAA0BA,OAAO,CAACG,MAAR,GAAiB,CAA/C,EAAkD;AAChDZ,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEP,0BADC;AAEPe,UAAAA,OAAO,EAAEA;AAFF,SAAD,CAAR;AAID,OALD,MAKO;AACLT,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEN,gCADC;AAEPc,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KAfL,EAgBKL,KAAD,IAAW;AACTJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET,uBADC;AAEPY,QAAAA;AAFO,OAAD,CAAR;AAID,KArBL;AAuBD,GAxBD,MAyBEJ,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAET,uBADC;AAEPY,IAAAA,KAAK,EAAE;AAFA,GAAD,CAAR;AAIH,CAnCI","sourcesContent":["import isEmpty from \"lodash.isempty\";\nimport { Dispatch } from \"redux\";\nimport {\n  Configuration,\n  ExaminationControllerApi,\n  PatientExaminationDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n  CREATE_EXAMINATION_FAIL,\n  CREATE_EXAMINATION_LOADING,\n  CREATE_EXAMINATION_RESET,\n  CREATE_EXAMINATION_SUCCESS,\n  SEARCH_EXAMINATION_FAIL,\n  SEARCH_EXAMINATION_LOADING,\n  SEARCH_EXAMINATION_SUCCESS,\n  SEARCH_EXAMINATION_SUCCESS_EMPTY,\n} from \"./consts\";\n\nconst examinationControllerApi = new ExaminationControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const createExamination =\n  (newPatientExamination: PatientExaminationDTO) =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_EXAMINATION_LOADING,\n    });\n    examinationControllerApi\n      .newPatientExaminationUsingPOST({ newPatientExamination })\n      .subscribe(\n        () => {\n          dispatch({\n            type: CREATE_EXAMINATION_SUCCESS,\n          });\n        },\n        (error) => {\n          dispatch({\n            type: CREATE_EXAMINATION_FAIL,\n            error,\n          });\n        }\n      );\n  };\n\nexport const createExaminationReset =\n  () =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_EXAMINATION_RESET,\n    });\n  };\n\nexport const examinationsByPatientId =\n  (patId: number | undefined) =>\n  (dispatch: Dispatch<IAction<PatientExaminationDTO[], {}>>): void => {\n    dispatch({\n      type: SEARCH_EXAMINATION_LOADING,\n    });\n    if (patId) {\n      examinationControllerApi\n        .getByPatientIdUsingGET({ patId: patId })\n        .subscribe(\n          (payload) => {\n            if (Array.isArray(payload) && payload.length > 0) {\n              dispatch({\n                type: SEARCH_EXAMINATION_SUCCESS,\n                payload: payload,\n              });\n            } else {\n              dispatch({\n                type: SEARCH_EXAMINATION_SUCCESS_EMPTY,\n                payload: [],\n              });\n            }\n          },\n          (error) => {\n            dispatch({\n              type: SEARCH_EXAMINATION_FAIL,\n              error,\n            });\n          }\n        );\n    } else\n      dispatch({\n        type: SEARCH_EXAMINATION_FAIL,\n        error: \"patient object should not be empty\",\n      });\n  };\n"]},"metadata":{},"sourceType":"module"}