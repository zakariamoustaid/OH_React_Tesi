{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx\";\nimport React, { useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport { TextField } from '@material-ui/core';\nimport \"./styles.scss\";\nimport Test from \"./Test\";\nimport { createBill, createBillReset } from \"../../../state/bills/actions\";\nimport { searchPatient, getPatientSuccess } from \"../../../state/patients/actions\";\n\nconst NewBillActivity = ({\n  userCredentials,\n  isLoading,\n  hasSucceeded,\n  createBill,\n  createBillReset,\n  hasFailed,\n  billHomeRoute,\n  patientSearchResults,\n  getPatientSuccess,\n  searchStatus\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.billing\")]: \"/billing\",\n    [t(\"nav.newbill\")]: \"/bills\"\n  };\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n  const initialValues = {\n    id: \"\",\n    firstName: \"\",\n    secondName: \"\",\n    birthDate: \"\",\n    address: \"\"\n  };\n  const formik = useFormik({\n    initialValues,\n    onSubmit: values => {\n      // First scroll to show searching message\n      searchPatient(values);\n    }\n  });\n  const resultsRef = useRef(null);\n  /*useEffect(() => {\n      if (\n          activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n          activityTransitionState === \"TO_BILL_HOME\"\n      ) {\n          createBillReset();\n          setShouldResetForm(true);\n      }\n  }, [activityTransitionState, createBillReset]);\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n   useEffect(() => {\n      if (hasFailed) {\n          scrollToElement(infoBoxRef.current);\n      }\n  }, [hasFailed]);\n   const [shouldResetForm, setShouldResetForm] = useState(false);\n   const resetFormCallback = () => {\n      setShouldResetForm(false);\n      setActivityTransitionState(\"IDLE\");\n      scrollToElement(null);\n  };\n   const formik = useFormik({\n      initialValues: {\n          firstName: '',\n      },\n      onSubmit: (values) => {\n          console.log(values);\n      },\n  });\n  */\n\n  const renderSearchResults = () => {\n    switch (searchStatus) {\n      case \"IDLE\":\n        return;\n\n      case \"LOADING\":\n        return /*#__PURE__*/React.createElement(\"h3\", {\n          className: \"searchPatient__loading\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }\n        }, t(\"common.searching\"));\n\n      case \"SUCCESS\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results_count\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }\n        }, t(\"common.results\"), \":\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 19\n          }\n        }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.length)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results_list\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }\n        }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(Test, {\n          key: index,\n          patient: patient,\n          getPatientSuccessCallback: getPatientSuccess,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }\n        }))));\n    }\n\n    ;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"new_Bill\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AppHeader, {\n      userCredentials: userCredentials,\n      breadcrumbMap: breadcrumbMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newBill__background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newBill__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newBill__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, t(\"nav.newbill\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"newBill__panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      className: \"date\",\n      type: \"date\",\n      id: \"outlined-basic\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      className: \"patient\",\n      id: \"outlined-basic\",\n      label: \"patient\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchPatient__results_list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(Test, {\n      key: index,\n      patient: patient,\n      getPatientSuccessCallback: getPatientSuccess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => console.log(patientSearchResults),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 33\n      }\n    }, \"indietro\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchPatient__results_list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(Test, {\n      key: index,\n      patient: patient,\n      getPatientSuccessCallback: getPatientSuccess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 41\n      }\n    })))))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }));\n  };\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  patientSearchResults: state.patients.searchResults.data,\n  isLoading: state.bills.createBill.status === \"LOADING\",\n  hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n  hasFailed: state.bills.createBill.status === \"FAIL\",\n  searchStatus: state.patients.searchResults.status || \"IDLE\"\n});\n\nconst mapDispatchToProps = {\n  createBill,\n  createBillReset,\n  getPatientSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx"],"names":["React","useRef","useState","AppHeader","Footer","Button","useTranslation","connect","useFormik","TextField","Test","createBill","createBillReset","searchPatient","getPatientSuccess","NewBillActivity","userCredentials","isLoading","hasSucceeded","hasFailed","billHomeRoute","patientSearchResults","searchStatus","t","breadcrumbMap","activityTransitionState","setActivityTransitionState","test_succ","initialValues","id","firstName","secondName","birthDate","address","formik","onSubmit","values","resultsRef","renderSearchResults","length","map","patient","index","console","log","mapStateToProps","state","main","authentication","data","patients","searchResults","bills","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { IState } from \"../../../types\";\nimport { useFormik } from \"formik\";\nimport { Divider, TextField } from '@material-ui/core';\nimport { BillDTO } from \"../../../generated\";\nimport { FullBillDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport \"./styles.scss\";\nimport Test from \"./Test\";\nimport {\n    createBill,\n    createBillReset,\n} from \"../../../state/bills/actions\";\nimport {\n    searchPatient,\n    getPatientSuccess,\n} from \"../../../state/patients/actions\";\n\nimport {\n    IDispatchProps,\n    IStateProps,\n    TActivityTransitionState,\n    TProps,\n    TValues,\n} from \"./types\";\n\n\nconst NewBillActivity: FunctionComponent<TProps> = ({\n    userCredentials,\n    isLoading,\n    hasSucceeded,\n    createBill,\n    createBillReset,\n    hasFailed,\n    billHomeRoute,\n    patientSearchResults,\n    getPatientSuccess,\n    searchStatus,\n}) => {\n    const { t } = useTranslation();\n\n    const breadcrumbMap = {\n        [t(\"nav.dashboard\")]: \"/\",\n        [t(\"nav.billing\")]: \"/billing\",\n        [t(\"nav.newbill\")]: \"/bills\",\n    };\n\n    const [activityTransitionState, setActivityTransitionState] =\n        useState<TActivityTransitionState>(\"IDLE\");\n\n    const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n\n    const initialValues: TValues = {\n        id: \"\",\n        firstName: \"\",\n        secondName: \"\",\n        birthDate: \"\",\n        address: \"\",\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: (values: TValues) => {\n            // First scroll to show searching message\n\n            searchPatient(values);\n        },\n    });\n\n    const resultsRef = useRef<HTMLDivElement>(null);\n    /*useEffect(() => {\n        if (\n            activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n            activityTransitionState === \"TO_BILL_HOME\"\n        ) {\n            createBillReset();\n            setShouldResetForm(true);\n        }\n    }, [activityTransitionState, createBillReset]);\n\n\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (hasFailed) {\n            scrollToElement(infoBoxRef.current);\n        }\n    }, [hasFailed]);\n\n    const [shouldResetForm, setShouldResetForm] = useState(false);\n\n    const resetFormCallback = () => {\n        setShouldResetForm(false);\n        setActivityTransitionState(\"IDLE\");\n        scrollToElement(null);\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n        },\n        onSubmit: (values) => {\n            console.log(values);\n        },\n    });\n    */\n    const renderSearchResults = (): JSX.Element | undefined => {\n        switch (searchStatus) {\n          case \"IDLE\":\n            return;\n    \n          case \"LOADING\":\n            return (\n              <h3 className=\"searchPatient__loading\">{t(\"common.searching\")}</h3>\n            );\n    \n          case \"SUCCESS\":\n            return (\n              <div className=\"searchPatient__results\">\n                <div className=\"searchPatient__results_count\">\n                  {t(\"common.results\")}:{\" \"}\n                  <strong>{patientSearchResults?.length}</strong>\n                </div>\n                <div className=\"searchPatient__results_list\">\n                  {patientSearchResults?.map((patient, index) => (\n                    <Test\n                      key={index}\n                      patient={patient}\n                      getPatientSuccessCallback={getPatientSuccess}\n                    />\n                  ))}\n                </div>\n              </div>\n            );\n      };\n            return (\n                <div className=\"new_Bill\">\n                    <AppHeader\n                        userCredentials={userCredentials}\n                        breadcrumbMap={breadcrumbMap}\n                    />\n                    <div className=\"newBill__background\">\n                        <div className=\"newBill__content\">\n                            <div className=\"newBill__title\">{t(\"nav.newbill\")}</div>\n                            <div className=\"newBill__panel\">\n                                <div className=\"table\">\n                                    <form>\n                                        <TextField className=\"date\" type=\"date\" id=\"outlined-basic\" variant=\"outlined\" />\n                                        <TextField className=\"patient\" id=\"outlined-basic\" label=\"patient\" variant=\"outlined\" />\n                                    </form>\n                                </div>\n                                <div className=\"searchPatient__results_list\">\n                                    {patientSearchResults?.map((patient, index) => (\n                                        <Test\n                                            key={index}\n                                            patient={patient}\n                                            getPatientSuccessCallback={getPatientSuccess}\n                                        />\n                                    ))}\n                                </div>\n                                <Button onClick={() => console.log(patientSearchResults)}>\n                                    indietro\n                                </Button>\n                                <div className=\"searchPatient__results_list\">\n                                    {patientSearchResults?.map((patient, index) => (\n                                        <Test\n                                            key={index}\n                                            patient={patient}\n                                            getPatientSuccessCallback={getPatientSuccess}\n                                        />\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <Footer />\n                </div>\n            );\n    }\n}\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n    userCredentials: state.main.authentication.data,\n    patientSearchResults: state.patients.searchResults.data,\n    isLoading: state.bills.createBill.status === \"LOADING\",\n    hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n    hasFailed: state.bills.createBill.status === \"FAIL\",\n    searchStatus: state.patients.searchResults.status || \"IDLE\",\n});\n\n\n\n\nconst mapDispatchToProps: IDispatchProps = {\n    createBill,\n    createBillReset,\n    getPatientSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);\n"]},"metadata":{},"sourceType":"module"}