{"ast":null,"code":"import { STORAGE_NOT_AVAILABLE } from \"./consts\";\n/**\n * Safe localStorage and sessinStorage\n * use it instead of native objects:\n * - check storage existence\n * - stringify values\n * - re-hydrate values\n * - catch errors\n *\n * Caveats:\n * - accepts only JSON, string, number, boolean, null, undefined and JSON.serializable objects\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst write = storage => (key, value) => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return;\n  }\n\n  try {\n    const _value = JSON.stringify(value);\n\n    storage.setItem(key, _value);\n  } catch {\n    console.error(`Can't write in storage`);\n  }\n};\n\nconst read = storage => key => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return null;\n  }\n\n  const value = storage.getItem(key);\n\n  try {\n    if (value) {\n      return JSON.parse(value);\n    }\n\n    return value;\n  } catch {\n    return value;\n  }\n};\n\nconst remove = storage => key => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return;\n  }\n\n  storage.removeItem(key);\n};\n\nconst clear = storage => () => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return;\n  }\n\n  storage.clear();\n};\n\nexport const LocalStorage = {\n  write: write(window.localStorage),\n  read: read(window.localStorage),\n  remove: remove(window.localStorage),\n  clear: clear(window.localStorage)\n};\nexport const SessionStorage = {\n  write: write(window.sessionStorage),\n  read: read(window.sessionStorage),\n  remove: remove(window.sessionStorage),\n  clear: clear(window.sessionStorage)\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/libraries/storage/storage.ts"],"names":["STORAGE_NOT_AVAILABLE","write","storage","key","value","console","warn","_value","JSON","stringify","setItem","error","read","getItem","parse","remove","removeItem","clear","LocalStorage","window","localStorage","SessionStorage","sessionStorage"],"mappings":"AAOA,SAASA,qBAAT,QAAsC,UAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,KAAK,GAAIC,OAAD,IAAsC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAClE,MAAI,CAACF,OAAL,EAAc;AACZG,IAAAA,OAAO,CAACC,IAAR,CAAaN,qBAAb;AACA;AACD;;AACD,MAAI;AACF,UAAMO,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAf;;AACAF,IAAAA,OAAO,CAACQ,OAAR,CAAgBP,GAAhB,EAAqBI,MAArB;AACD,GAHD,CAGE,MAAM;AACNF,IAAAA,OAAO,CAACM,KAAR,CAAe,wBAAf;AACD;AACF,CAXD;;AAaA,MAAMC,IAAI,GAAIV,OAAD,IAAsCC,GAAD,IAAsB;AACtE,MAAI,CAACD,OAAL,EAAc;AACZG,IAAAA,OAAO,CAACC,IAAR,CAAaN,qBAAb;AACA,WAAO,IAAP;AACD;;AACD,QAAMI,KAAK,GAAGF,OAAO,CAACW,OAAR,CAAgBV,GAAhB,CAAd;;AACA,MAAI;AACF,QAAIC,KAAJ,EAAW;AACT,aAAOI,IAAI,CAACM,KAAL,CAAWV,KAAX,CAAP;AACD;;AACD,WAAOA,KAAP;AACD,GALD,CAKE,MAAM;AACN,WAAOA,KAAP;AACD;AACF,CAdD;;AAgBA,MAAMW,MAAM,GAAIb,OAAD,IAAuCC,GAAD,IAAS;AAC5D,MAAI,CAACD,OAAL,EAAc;AACZG,IAAAA,OAAO,CAACC,IAAR,CAAaN,qBAAb;AACA;AACD;;AACDE,EAAAA,OAAO,CAACc,UAAR,CAAmBb,GAAnB;AACD,CAND;;AAQA,MAAMc,KAAK,GAAIf,OAAD,IAAqC,MAAM;AACvD,MAAI,CAACA,OAAL,EAAc;AACZG,IAAAA,OAAO,CAACC,IAAR,CAAaN,qBAAb;AACA;AACD;;AACDE,EAAAA,OAAO,CAACe,KAAR;AACD,CAND;;AAQA,OAAO,MAAMC,YAAsB,GAAG;AACpCjB,EAAAA,KAAK,EAAEA,KAAK,CAACkB,MAAM,CAACC,YAAR,CADwB;AAEpCR,EAAAA,IAAI,EAAEA,IAAI,CAACO,MAAM,CAACC,YAAR,CAF0B;AAGpCL,EAAAA,MAAM,EAAEA,MAAM,CAACI,MAAM,CAACC,YAAR,CAHsB;AAIpCH,EAAAA,KAAK,EAAEA,KAAK,CAACE,MAAM,CAACC,YAAR;AAJwB,CAA/B;AAOP,OAAO,MAAMC,cAAc,GAAG;AAC5BpB,EAAAA,KAAK,EAAEA,KAAK,CAACkB,MAAM,CAACG,cAAR,CADgB;AAE5BV,EAAAA,IAAI,EAAEA,IAAI,CAACO,MAAM,CAACG,cAAR,CAFkB;AAG5BP,EAAAA,MAAM,EAAEA,MAAM,CAACI,MAAM,CAACG,cAAR,CAHc;AAI5BL,EAAAA,KAAK,EAAEA,KAAK,CAACE,MAAM,CAACG,cAAR;AAJgB,CAAvB","sourcesContent":["import {\n  IStorageWrite,\n  IStorageRead,\n  IStorageRemove,\n  IStorageClear,\n  IStorage,\n} from \"./types\";\nimport { STORAGE_NOT_AVAILABLE } from \"./consts\";\n\n/**\n * Safe localStorage and sessinStorage\n * use it instead of native objects:\n * - check storage existence\n * - stringify values\n * - re-hydrate values\n * - catch errors\n *\n * Caveats:\n * - accepts only JSON, string, number, boolean, null, undefined and JSON.serializable objects\n */\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst write = (storage?: Storage): IStorageWrite => (key, value) => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return;\n  }\n  try {\n    const _value = JSON.stringify(value);\n    storage.setItem(key, _value);\n  } catch {\n    console.error(`Can't write in storage`);\n  }\n};\n\nconst read = (storage?: Storage): IStorageRead => (key: string): any => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return null;\n  }\n  const value = storage.getItem(key);\n  try {\n    if (value) {\n      return JSON.parse(value);\n    }\n    return value;\n  } catch {\n    return value;\n  }\n};\n\nconst remove = (storage: Storage): IStorageRemove => (key) => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return;\n  }\n  storage.removeItem(key);\n};\n\nconst clear = (storage: Storage): IStorageClear => () => {\n  if (!storage) {\n    console.warn(STORAGE_NOT_AVAILABLE);\n    return;\n  }\n  storage.clear();\n};\n\nexport const LocalStorage: IStorage = {\n  write: write(window.localStorage),\n  read: read(window.localStorage),\n  remove: remove(window.localStorage),\n  clear: clear(window.localStorage),\n};\n\nexport const SessionStorage = {\n  write: write(window.sessionStorage),\n  read: read(window.sessionStorage),\n  remove: remove(window.sessionStorage),\n  clear: clear(window.sessionStorage),\n};\n"]},"metadata":{},"sourceType":"module"}