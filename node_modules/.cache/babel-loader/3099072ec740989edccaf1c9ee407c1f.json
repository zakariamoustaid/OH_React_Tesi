{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/accessories/langSwitcher/LangSwitcher.tsx\";\nimport React, { useContext } from \"react\";\nimport i18n from \"i18next\";\nimport { LangContext } from \"../../../libraries/langContext/langContext\";\nimport \"./styles.scss\";\nconst languageVocabolary = {\n  en: \"English\",\n  it: \"Italian\",\n  de: \"German\",\n  fr: \"French\",\n  es: \"Spanish\",\n  pt: \"Portoguese\",\n  ar: \"Arabic\",\n  sw: \"Swahili\",\n  am: \"Amharic\",\n  cs: \"Czech\",\n  sq: \"Albanian\",\n  zh: \"Chinese\"\n};\n\nconst LangSwitcher = () => {\n  const languages = Object.keys(i18n.services.resourceStore.data);\n  const currentLang = i18n.language;\n  const {\n    changeLang\n  } = useContext(LangContext);\n\n  const renderOptions = () => {\n    return languages.map(code => /*#__PURE__*/React.createElement(\"option\", {\n      key: code,\n      value: code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, languageVocabolary[code] || \"undefined\"));\n  };\n\n  const getCurrentLang = () => {\n    var value = \"\";\n    Object.keys(languageVocabolary).forEach(key => {\n      if (currentLang === key || currentLang.split(\"-\")[0] === key) {\n        value = key;\n      }\n    });\n    return value;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"langSwitcher\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: getCurrentLang(),\n    onChange: e => changeLang(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, renderOptions()));\n};\n\nexport default LangSwitcher;","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/accessories/langSwitcher/LangSwitcher.tsx"],"names":["React","useContext","i18n","LangContext","languageVocabolary","en","it","de","fr","es","pt","ar","sw","am","cs","sq","zh","LangSwitcher","languages","Object","keys","services","resourceStore","data","currentLang","language","changeLang","renderOptions","map","code","getCurrentLang","value","forEach","key","split","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,UAAnC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,WAAT,QAA4B,4CAA5B;AACA,OAAO,eAAP;AAEA,MAAMC,kBAA0C,GAAG;AACjDC,EAAAA,EAAE,EAAE,SAD6C;AAEjDC,EAAAA,EAAE,EAAE,SAF6C;AAGjDC,EAAAA,EAAE,EAAE,QAH6C;AAIjDC,EAAAA,EAAE,EAAE,QAJ6C;AAKjDC,EAAAA,EAAE,EAAE,SAL6C;AAMjDC,EAAAA,EAAE,EAAE,YAN6C;AAOjDC,EAAAA,EAAE,EAAE,QAP6C;AAQjDC,EAAAA,EAAE,EAAE,SAR6C;AASjDC,EAAAA,EAAE,EAAE,SAT6C;AAUjDC,EAAAA,EAAE,EAAE,OAV6C;AAWjDC,EAAAA,EAAE,EAAE,UAX6C;AAYjDC,EAAAA,EAAE,EAAE;AAZ6C,CAAnD;;AAeA,MAAMC,YAA+B,GAAG,MAAM;AAC5C,QAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYlB,IAAI,CAACmB,QAAL,CAAcC,aAAd,CAA4BC,IAAxC,CAAlB;AACA,QAAMC,WAAW,GAAGtB,IAAI,CAACuB,QAAzB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBzB,UAAU,CAACE,WAAD,CAAjC;;AAEA,QAAMwB,aAAa,GAAG,MAAqB;AACzC,WAAOT,SAAS,CAACU,GAAV,CAAeC,IAAD,iBACnB;AAAQ,MAAA,GAAG,EAAEA,IAAb;AAAmB,MAAA,KAAK,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzB,kBAAkB,CAACyB,IAAD,CAAlB,IAA4B,WAD/B,CADK,CAAP;AAKD,GAND;;AAQA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIC,KAAK,GAAG,EAAZ;AACAZ,IAAAA,MAAM,CAACC,IAAP,CAAYhB,kBAAZ,EAAgC4B,OAAhC,CAAyCC,GAAD,IAAiB;AACvD,UAAIT,WAAW,KAAKS,GAAhB,IAAuBT,WAAW,CAACU,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,MAA8BD,GAAzD,EAA8D;AAC5DF,QAAAA,KAAK,GAAGE,GAAR;AACD;AACF,KAJD;AAKA,WAAOF,KAAP;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAED,cAAc,EADvB;AAEE,IAAA,QAAQ,EAAGK,CAAD,IAAOT,UAAU,CAACS,CAAC,CAACC,MAAF,CAASL,KAAV,CAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGJ,aAAa,EAJhB,CADF,CADF;AAUD,CAjCD;;AAmCA,eAAeV,YAAf","sourcesContent":["import React, { FunctionComponent, useContext } from \"react\";\nimport i18n from \"i18next\";\nimport { LangContext } from \"../../../libraries/langContext/langContext\";\nimport \"./styles.scss\";\n\nconst languageVocabolary: Record<string, string> = {\n  en: \"English\",\n  it: \"Italian\",\n  de: \"German\",\n  fr: \"French\",\n  es: \"Spanish\",\n  pt: \"Portoguese\",\n  ar: \"Arabic\",\n  sw: \"Swahili\",\n  am: \"Amharic\",\n  cs: \"Czech\",\n  sq: \"Albanian\",\n  zh: \"Chinese\",\n};\n\nconst LangSwitcher: FunctionComponent = () => {\n  const languages = Object.keys(i18n.services.resourceStore.data);\n  const currentLang = i18n.language;\n  const { changeLang } = useContext(LangContext);\n\n  const renderOptions = (): JSX.Element[] => {\n    return languages.map((code: string) => (\n      <option key={code} value={code}>\n        {languageVocabolary[code] || \"undefined\"}\n      </option>\n    ));\n  };\n\n  const getCurrentLang = () => {\n    var value = \"\";\n    Object.keys(languageVocabolary).forEach((key: string) => {\n      if (currentLang === key || currentLang.split(\"-\")[0] === key) {\n        value = key;\n      }\n    });\n    return value;\n  };\n\n  return (\n    <div className=\"langSwitcher\">\n      <select\n        value={getCurrentLang()}\n        onChange={(e) => changeLang(e.target.value as string)}\n      >\n        {renderOptions()}\n      </select>\n    </div>\n  );\n};\n\nexport default LangSwitcher;\n"]},"metadata":{},"sourceType":"module"}