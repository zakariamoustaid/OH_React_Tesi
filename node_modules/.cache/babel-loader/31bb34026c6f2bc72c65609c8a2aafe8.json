{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class OpdControllerApi extends BaseAPI {\n  /**\n   * deleteOpd\n   */\n  deleteOpdUsingDELETE({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'deleteOpdUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/opds/{code}'.replace('{code}', encodeURI(code)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getLastOpdUsingGET({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'getLastOpdUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/opds/last/{code}'.replace('{code}', encodeURI(code)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getOpdByDatesUsingGET({\n    ageFrom,\n    ageTo,\n    dateFrom,\n    dateTo,\n    diseaseCode,\n    diseaseTypeCode,\n    newPatient,\n    sex\n  }, opts) {\n    throwIfNullOrUndefined(ageFrom, 'ageFrom', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(ageTo, 'ageTo', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(dateTo, 'dateTo', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(diseaseCode, 'diseaseCode', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(diseaseTypeCode, 'diseaseTypeCode', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(newPatient, 'newPatient', 'getOpdByDatesUsingGET');\n    throwIfNullOrUndefined(sex, 'sex', 'getOpdByDatesUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'ageFrom': ageFrom,\n      'ageTo': ageTo,\n      'dateFrom': dateFrom.toISOString(),\n      'dateTo': dateTo.toISOString(),\n      'diseaseCode': diseaseCode,\n      'diseaseTypeCode': diseaseTypeCode,\n      'newPatient': newPatient,\n      'sex': sex\n    };\n    return this.request({\n      url: '/opds/search',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getOpdByPatientUsingGET({\n    pcode\n  }, opts) {\n    throwIfNullOrUndefined(pcode, 'pcode', 'getOpdByPatientUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/opds/patient/{pcode}'.replace('{pcode}', encodeURI(pcode)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getOpdToDayOrWeekUsingGET({\n    oneWeek\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (oneWeek != null) {\n      query['oneWeek'] = oneWeek;\n    }\n\n    return this.request({\n      url: '/opds/weekly',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getProgYearUsingGET({\n    year\n  }, opts) {\n    throwIfNullOrUndefined(year, 'year', 'getProgYearUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/opds/ProgYear/{year}'.replace('{year}', encodeURI(year)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  isExistOpdNumUsingGET({\n    opdNum,\n    year\n  }, opts) {\n    throwIfNullOrUndefined(opdNum, 'opdNum', 'isExistOpdNumUsingGET');\n    throwIfNullOrUndefined(year, 'year', 'isExistOpdNumUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'opdNum': opdNum,\n      'year': year\n    };\n    return this.request({\n      url: '/opds/check/progyear',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newOpdUsingPOST({\n    opdDTO\n  }, opts) {\n    throwIfNullOrUndefined(opdDTO, 'opdDTO', 'newOpdUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/opds',\n      method: 'POST',\n      headers,\n      body: opdDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateOpdUsingPUT({\n    code,\n    opdDTO\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'updateOpdUsingPUT');\n    throwIfNullOrUndefined(opdDTO, 'opdDTO', 'updateOpdUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/opds/{code}'.replace('{code}', encodeURI(code)),\n      method: 'PUT',\n      headers,\n      body: opdDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/generated/apis/OpdControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","OpdControllerApi","deleteOpdUsingDELETE","code","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","getLastOpdUsingGET","getOpdByDatesUsingGET","ageFrom","ageTo","dateFrom","dateTo","diseaseCode","diseaseTypeCode","newPatient","sex","query","toISOString","getOpdByPatientUsingGET","pcode","getOpdToDayOrWeekUsingGET","oneWeek","getProgYearUsingGET","year","isExistOpdNumUsingGET","opdNum","newOpdUsingPOST","opdDTO","body","updateOpdUsingPUT"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    OpdDTO,\n} from '../models';\n\nexport interface DeleteOpdUsingDELETERequest {\n    code: number;\n}\n\nexport interface GetLastOpdUsingGETRequest {\n    code: number;\n}\n\nexport interface GetOpdByDatesUsingGETRequest {\n    ageFrom: number;\n    ageTo: number;\n    dateFrom: string;\n    dateTo: string;\n    diseaseCode: string;\n    diseaseTypeCode: string;\n    newPatient: string;\n    sex: string;\n}\n\nexport interface GetOpdByPatientUsingGETRequest {\n    pcode: number;\n}\n\nexport interface GetOpdToDayOrWeekUsingGETRequest {\n    oneWeek?: boolean;\n}\n\nexport interface GetProgYearUsingGETRequest {\n    year: number;\n}\n\nexport interface IsExistOpdNumUsingGETRequest {\n    opdNum: number;\n    year: number;\n}\n\nexport interface NewOpdUsingPOSTRequest {\n    opdDTO: OpdDTO;\n}\n\nexport interface UpdateOpdUsingPUTRequest {\n    code: number;\n    opdDTO: OpdDTO;\n}\n\n/**\n * no description\n */\nexport class OpdControllerApi extends BaseAPI {\n\n    /**\n     * deleteOpd\n     */\n    deleteOpdUsingDELETE({ code }: DeleteOpdUsingDELETERequest): Observable<boolean>\n    deleteOpdUsingDELETE({ code }: DeleteOpdUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deleteOpdUsingDELETE({ code }: DeleteOpdUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(code, 'code', 'deleteOpdUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/opds/{code}'.replace('{code}', encodeURI(code)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getLastOpd\n     */\n    getLastOpdUsingGET({ code }: GetLastOpdUsingGETRequest): Observable<OpdDTO>\n    getLastOpdUsingGET({ code }: GetLastOpdUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdDTO>>\n    getLastOpdUsingGET({ code }: GetLastOpdUsingGETRequest, opts?: OperationOpts): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {\n        throwIfNullOrUndefined(code, 'code', 'getLastOpdUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<OpdDTO>({\n            url: '/opds/last/{code}'.replace('{code}', encodeURI(code)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getOpdByDates\n     */\n    getOpdByDatesUsingGET({ ageFrom, ageTo, dateFrom, dateTo, diseaseCode, diseaseTypeCode, newPatient, sex }: GetOpdByDatesUsingGETRequest): Observable<Array<OpdDTO>>\n    getOpdByDatesUsingGET({ ageFrom, ageTo, dateFrom, dateTo, diseaseCode, diseaseTypeCode, newPatient, sex }: GetOpdByDatesUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>\n    getOpdByDatesUsingGET({ ageFrom, ageTo, dateFrom, dateTo, diseaseCode, diseaseTypeCode, newPatient, sex }: GetOpdByDatesUsingGETRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {\n        throwIfNullOrUndefined(ageFrom, 'ageFrom', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(ageTo, 'ageTo', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(dateTo, 'dateTo', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(diseaseCode, 'diseaseCode', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(diseaseTypeCode, 'diseaseTypeCode', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(newPatient, 'newPatient', 'getOpdByDatesUsingGET');\n        throwIfNullOrUndefined(sex, 'sex', 'getOpdByDatesUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'ageFrom': ageFrom,\n            'ageTo': ageTo,\n            'dateFrom': (dateFrom as any).toISOString(),\n            'dateTo': (dateTo as any).toISOString(),\n            'diseaseCode': diseaseCode,\n            'diseaseTypeCode': diseaseTypeCode,\n            'newPatient': newPatient,\n            'sex': sex,\n        };\n\n        return this.request<Array<OpdDTO>>({\n            url: '/opds/search',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getOpdByPatient\n     */\n    getOpdByPatientUsingGET({ pcode }: GetOpdByPatientUsingGETRequest): Observable<Array<OpdDTO>>\n    getOpdByPatientUsingGET({ pcode }: GetOpdByPatientUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>\n    getOpdByPatientUsingGET({ pcode }: GetOpdByPatientUsingGETRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {\n        throwIfNullOrUndefined(pcode, 'pcode', 'getOpdByPatientUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<OpdDTO>>({\n            url: '/opds/patient/{pcode}'.replace('{pcode}', encodeURI(pcode)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getOpdToDayOrWeek\n     */\n    getOpdToDayOrWeekUsingGET({ oneWeek }: GetOpdToDayOrWeekUsingGETRequest): Observable<Array<OpdDTO>>\n    getOpdToDayOrWeekUsingGET({ oneWeek }: GetOpdToDayOrWeekUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>\n    getOpdToDayOrWeekUsingGET({ oneWeek }: GetOpdToDayOrWeekUsingGETRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (oneWeek != null) { query['oneWeek'] = oneWeek; }\n\n        return this.request<Array<OpdDTO>>({\n            url: '/opds/weekly',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getProgYear\n     */\n    getProgYearUsingGET({ year }: GetProgYearUsingGETRequest): Observable<number>\n    getProgYearUsingGET({ year }: GetProgYearUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    getProgYearUsingGET({ year }: GetProgYearUsingGETRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(year, 'year', 'getProgYearUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<number>({\n            url: '/opds/ProgYear/{year}'.replace('{year}', encodeURI(year)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * isExistOpdNum\n     */\n    isExistOpdNumUsingGET({ opdNum, year }: IsExistOpdNumUsingGETRequest): Observable<boolean>\n    isExistOpdNumUsingGET({ opdNum, year }: IsExistOpdNumUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    isExistOpdNumUsingGET({ opdNum, year }: IsExistOpdNumUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(opdNum, 'opdNum', 'isExistOpdNumUsingGET');\n        throwIfNullOrUndefined(year, 'year', 'isExistOpdNumUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'opdNum': opdNum,\n            'year': year,\n        };\n\n        return this.request<boolean>({\n            url: '/opds/check/progyear',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newOpd\n     */\n    newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest): Observable<boolean>\n    newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(opdDTO, 'opdDTO', 'newOpdUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/opds',\n            method: 'POST',\n            headers,\n            body: opdDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateOpd\n     */\n    updateOpdUsingPUT({ code, opdDTO }: UpdateOpdUsingPUTRequest): Observable<number>\n    updateOpdUsingPUT({ code, opdDTO }: UpdateOpdUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    updateOpdUsingPUT({ code, opdDTO }: UpdateOpdUsingPUTRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(code, 'code', 'updateOpdUsingPUT');\n        throwIfNullOrUndefined(opdDTO, 'opdDTO', 'updateOpdUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<number>({\n            url: '/opds/{code}'.replace('{code}', encodeURI(code)),\n            method: 'PUT',\n            headers,\n            body: opdDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}