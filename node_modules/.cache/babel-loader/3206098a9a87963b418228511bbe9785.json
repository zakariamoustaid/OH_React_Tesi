{"ast":null,"code":"const createPreview = img => {\n  const canvas = document.createElement(\"canvas\");\n  let width = img.width;\n  let height = img.height; // calculate the width and height, constraining the proportions\n\n  if (width > height) {\n    if (width > 180) {\n      height = Math.round(height *= 180 / width);\n      width = 180;\n    }\n  } else {\n    if (height > 160) {\n      width = Math.round(width *= 160 / height);\n      height = 160;\n    }\n  } // resize the canvas and draw the image data into it\n\n\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext(\"2d\");\n  ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0, width, height);\n  return canvas.toDataURL(\"image/jpeg\", 0.7); // get the data from canvas as 70% JPG\n};\n\nexport const handlePictureSelection = (setPicture, setShowError, maxFileUpload) => e => {\n  const newPic = e.target.files && e.target.files[0];\n\n  if (getFileSize(newPic, maxFileUpload)) {\n    if (newPic) {\n      const dataURLReader = new FileReader();\n\n      dataURLReader.onload = e => {\n        var _e$target;\n\n        const pictureURI = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n\n        if (typeof pictureURI === \"string\") {\n          preprocessImage(setPicture, pictureURI);\n        }\n      };\n\n      dataURLReader.readAsDataURL(newPic);\n    }\n  } else {\n    setShowError(\"File is too big! (Max upload file is \" + maxFileUpload / 1000 + \" KB)\");\n    return;\n  }\n};\nexport const getFileSize = (file, maxFileUpload) => !file || file.size > maxFileUpload ? false : true;\nexport const preprocessImage = (setPicture, picture) => {\n  let pictureURI = \"\";\n  let pictureData = \"\";\n\n  if (picture.includes(\"data:\")) {\n    pictureURI = picture;\n    pictureData = picture.split(\",\")[1];\n  } else {\n    pictureURI = \"data:image/jpeg;base64,\" + picture;\n    pictureData = picture;\n  }\n\n  const image = new Image();\n  image.src = pictureURI;\n\n  image.onload = function () {\n    const preview = createPreview(image);\n    setPicture({\n      original: pictureData,\n      preview\n    });\n  };\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/profilePicture/utils.ts"],"names":["createPreview","img","canvas","document","createElement","width","height","Math","round","ctx","getContext","drawImage","toDataURL","handlePictureSelection","setPicture","setShowError","maxFileUpload","e","newPic","target","files","getFileSize","dataURLReader","FileReader","onload","pictureURI","result","preprocessImage","readAsDataURL","file","size","picture","pictureData","includes","split","image","Image","src","preview","original"],"mappings":"AAEA,MAAMA,aAAa,GAAIC,GAAD,IAA2B;AAC/C,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,MAAIC,KAAK,GAAGJ,GAAG,CAACI,KAAhB;AACA,MAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB,CAH+C,CAI/C;;AACA,MAAID,KAAK,GAAGC,MAAZ,EAAoB;AAClB,QAAID,KAAK,GAAG,GAAZ,EAAiB;AACfC,MAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAYF,MAAM,IAAI,MAAMD,KAA5B,CAAT;AACAA,MAAAA,KAAK,GAAG,GAAR;AACD;AACF,GALD,MAKO;AACL,QAAIC,MAAM,GAAG,GAAb,EAAkB;AAChBD,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAYH,KAAK,IAAI,MAAMC,MAA3B,CAAR;AACAA,MAAAA,MAAM,GAAG,GAAT;AACD;AACF,GAf8C,CAgB/C;;;AACAJ,EAAAA,MAAM,CAACG,KAAP,GAAeA,KAAf;AACAH,EAAAA,MAAM,CAACI,MAAP,GAAgBA,MAAhB;AACA,QAAMG,GAAG,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAZ;AACAD,EAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,SAAL,CAAeV,GAAf,EAAoB,CAApB,EAAuB,CAAvB,EAA0BI,KAA1B,EAAiCC,MAAjC;AACA,SAAOJ,MAAM,CAACU,SAAP,CAAiB,YAAjB,EAA+B,GAA/B,CAAP,CArB+C,CAqBH;AAC7C,CAtBD;;AAwBA,OAAO,MAAMC,sBAAsB,GAAG,CACpCC,UADoC,EAMjCC,YANiC,EAM2BC,aAN3B,KAOhCC,CAAD,IAA4C;AAC/C,QAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,IAAkBH,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAjC;;AACA,MAAIC,WAAW,CAACH,MAAD,EAASF,aAAT,CAAf,EAAwC;AACtC,QAAIE,MAAJ,EAAY;AACV,YAAMI,aAAa,GAAG,IAAIC,UAAJ,EAAtB;;AACAD,MAAAA,aAAa,CAACE,MAAd,GAAwBP,CAAD,IAAO;AAAA;;AAC5B,cAAMQ,UAAU,gBAAGR,CAAC,CAACE,MAAL,8CAAG,UAAUO,MAA7B;;AACA,YAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClCE,UAAAA,eAAe,CAACb,UAAD,EAAaW,UAAb,CAAf;AACD;AACF,OALD;;AAMAH,MAAAA,aAAa,CAACM,aAAd,CAA4BV,MAA5B;AACD;AACF,GAXD,MAWO;AACLH,IAAAA,YAAY,CAAC,0CAA0CC,aAAa,GAAG,IAA1D,GAAiE,MAAlE,CAAZ;AACA;AACD;AACF,CAxBM;AA0BP,OAAO,MAAMK,WAAW,GAAG,CAACQ,IAAD,EAAoBb,aAApB,KACzB,CAACa,IAAD,IAASA,IAAI,CAACC,IAAL,GAAYd,aAArB,GAAqC,KAArC,GAA6C,IADxC;AAIP,OAAO,MAAMW,eAAe,GAAG,CAC7Bb,UAD6B,EAO7BiB,OAP6B,KAQpB;AACT,MAAIN,UAAU,GAAG,EAAjB;AACA,MAAIO,WAAW,GAAG,EAAlB;;AACA,MAAID,OAAO,CAACE,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7BR,IAAAA,UAAU,GAAGM,OAAb;AACAC,IAAAA,WAAW,GAAGD,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAd;AACD,GAHD,MAGO;AACLT,IAAAA,UAAU,GAAG,4BAA4BM,OAAzC;AACAC,IAAAA,WAAW,GAAGD,OAAd;AACD;;AAED,QAAMI,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYZ,UAAZ;;AAEAU,EAAAA,KAAK,CAACX,MAAN,GAAe,YAAY;AACzB,UAAMc,OAAO,GAAGtC,aAAa,CAACmC,KAAD,CAA7B;AACArB,IAAAA,UAAU,CAAC;AAAEyB,MAAAA,QAAQ,EAAEP,WAAZ;AAAyBM,MAAAA;AAAzB,KAAD,CAAV;AACD,GAHD;AAID,CA1BM","sourcesContent":["import { ChangeEvent, Dispatch, SetStateAction } from \"react\";\n\nconst createPreview = (img: HTMLImageElement) => {\n  const canvas = document.createElement(\"canvas\");\n  let width = img.width;\n  let height = img.height;\n  // calculate the width and height, constraining the proportions\n  if (width > height) {\n    if (width > 180) {\n      height = Math.round((height *= 180 / width));\n      width = 180;\n    }\n  } else {\n    if (height > 160) {\n      width = Math.round((width *= 160 / height));\n      height = 160;\n    }\n  }\n  // resize the canvas and draw the image data into it\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext(\"2d\");\n  ctx?.drawImage(img, 0, 0, width, height);\n  return canvas.toDataURL(\"image/jpeg\", 0.7); // get the data from canvas as 70% JPG\n};\n\nexport const handlePictureSelection = (\n  setPicture: Dispatch<\n    SetStateAction<{\n      preview: string;\n      original: string;\n    }>\n  >, setShowError: React.Dispatch<React.SetStateAction<string>>, maxFileUpload: number\n) => (e: ChangeEvent<HTMLInputElement>): void => {\n  const newPic = e.target.files && e.target.files[0];\n  if (getFileSize(newPic, maxFileUpload)) {\n    if (newPic) {\n      const dataURLReader = new FileReader();\n      dataURLReader.onload = (e) => {\n        const pictureURI = e.target?.result;\n        if (typeof pictureURI === \"string\") {\n          preprocessImage(setPicture, pictureURI);\n        }\n      };\n      dataURLReader.readAsDataURL(newPic);\n    }\n  } else {\n    setShowError(\"File is too big! (Max upload file is \" + maxFileUpload / 1000 + \" KB)\");\n    return;\n  }\n};\n\nexport const getFileSize = (file: File | null, maxFileUpload: number): boolean => (\n  !file || file.size > maxFileUpload ? false : true\n);\n\nexport const preprocessImage = (\n  setPicture: Dispatch<\n    SetStateAction<{\n      preview: string;\n      original: string;\n    }>\n  >,\n  picture: string\n): void => {\n  let pictureURI = \"\";\n  let pictureData = \"\";\n  if (picture.includes(\"data:\")) {\n    pictureURI = picture;\n    pictureData = picture.split(\",\")[1];\n  } else {\n    pictureURI = \"data:image/jpeg;base64,\" + picture;\n    pictureData = picture;\n  }\n\n  const image = new Image();\n  image.src = pictureURI;\n\n  image.onload = function () {\n    const preview = createPreview(image);\n    setPicture({ original: pictureData, preview });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}