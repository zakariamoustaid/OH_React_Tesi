{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientSummary/patientSummaryByType/PatientSummaryByType.tsx\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect, useSelector } from \"react-redux\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport { loadSummaryData } from \"../../../../state/summary/actions\";\nimport Table from \"../../table/Table\";\nimport { ORDER_BY_TYPE_PAGE_SIZE } from \"../consts\";\nimport { SummaryType } from \"../types\";\nconst header = [\"date\"];\nconst order = [\"date\"];\nconst label = {\n  date: \"Date\",\n  type: \"Typology\",\n  result: \"Result\",\n  note: \"Additional notes\"\n};\n\nconst PatientSummaryByType = ({\n  loadSummaryData,\n  isLoading,\n  summaryData = []\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const patientCode = useSelector(state => {\n    var _state$patients$selec;\n\n    return (_state$patients$selec = state.patients.selectedPatient.data) === null || _state$patients$selec === void 0 ? void 0 : _state$patients$selec.code;\n  });\n  useEffect(() => {\n    if (patientCode) loadSummaryData(patientCode);\n  }, [patientCode, loadSummaryData]);\n\n  const filterByType = type => {\n    return summaryData.filter(item => item.type === type);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientSummary_type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientSummary_type_row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, t(\"summary.visits\"), \"(\", filterByType(SummaryType.VISIT).length, \")\"), /*#__PURE__*/React.createElement(Table, {\n    rowData: filterByType(SummaryType.VISIT),\n    compareRows: dateComparator,\n    tableHeader: header,\n    labelData: label,\n    columnsOrder: order,\n    rowsPerPage: ORDER_BY_TYPE_PAGE_SIZE,\n    isCollapsabile: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientSummary_type_row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, t(\"summary.triage\"), \"(\", filterByType(SummaryType.TRIAGE).length, \")\"), /*#__PURE__*/React.createElement(Table, {\n    rowData: filterByType(SummaryType.TRIAGE),\n    compareRows: dateComparator,\n    tableHeader: header,\n    labelData: label,\n    columnsOrder: order,\n    rowsPerPage: ORDER_BY_TYPE_PAGE_SIZE,\n    isCollapsabile: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientSummary_type_row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, t(\"summary.therapy\"), \"(\", filterByType(SummaryType.THERAPY).length, \")\"), /*#__PURE__*/React.createElement(Table, {\n    rowData: filterByType(SummaryType.THERAPY),\n    compareRows: dateComparator,\n    tableHeader: header,\n    labelData: label,\n    columnsOrder: order,\n    rowsPerPage: ORDER_BY_TYPE_PAGE_SIZE,\n    isCollapsabile: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientSummary_type_row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, t(\"summary.opd\"), \"(\", filterByType(SummaryType.OPD).length, \")\"), /*#__PURE__*/React.createElement(Table, {\n    rowData: filterByType(SummaryType.OPD),\n    compareRows: dateComparator,\n    tableHeader: header,\n    labelData: label,\n    columnsOrder: order,\n    rowsPerPage: ORDER_BY_TYPE_PAGE_SIZE,\n    isCollapsabile: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(CircularProgress, {\n    style: {\n      marginLeft: \"50%\",\n      position: \"relative\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.summary.summaryApisCall.status === \"LOADING\",\n  hasSucceeded: state.summary.summaryApisCall.status === \"SUCCESS\",\n  hasFailed: state.summary.summaryApisCall.status === \"FAIL\",\n  summaryData: state.summary.summaryApisCall.data\n});\n\nconst mapDispatchToProps = {\n  loadSummaryData\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientSummaryByType);","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientSummary/patientSummaryByType/PatientSummaryByType.tsx"],"names":["CircularProgress","React","useEffect","useTranslation","connect","useSelector","dateComparator","loadSummaryData","Table","ORDER_BY_TYPE_PAGE_SIZE","SummaryType","header","order","label","date","type","result","note","PatientSummaryByType","isLoading","summaryData","t","patientCode","state","patients","selectedPatient","data","code","filterByType","filter","item","VISIT","length","TRIAGE","THERAPY","OPD","marginLeft","position","mapStateToProps","summary","summaryApisCall","status","hasSucceeded","hasFailed","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\nimport React, { FunctionComponent, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect, useSelector } from \"react-redux\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport { loadSummaryData } from \"../../../../state/summary/actions\";\nimport { IState } from \"../../../../types\";\nimport Table from \"../../table/Table\";\nimport { ORDER_BY_TYPE_PAGE_SIZE } from \"../consts\";\n\nimport { IDispatchProps, IStateProps, SummaryType, TProps } from \"../types\";\n\nconst header = [\"date\"];\nconst order = [\"date\"];\nconst label = {\n  date: \"Date\",\n  type: \"Typology\",\n  result: \"Result\",\n  note: \"Additional notes\",\n};\n\nconst PatientSummaryByType: FunctionComponent<TProps> = ({\n  loadSummaryData,\n  isLoading,\n  summaryData = [],\n}) => {\n  const { t } = useTranslation();\n\n  const patientCode = useSelector(\n    (state: IState) => state.patients.selectedPatient.data?.code\n  );\n\n  useEffect(() => {\n    if (patientCode) loadSummaryData(patientCode);\n  }, [patientCode, loadSummaryData]);\n\n  const filterByType = (type: string) => {\n    return summaryData.filter((item) => item.type === type);\n  };\n  return (\n    <>\n      {!isLoading ? (\n        <div className=\"patientSummary_type\">\n          <div className=\"patientSummary_type_row\">\n            <h4>\n              {t(\"summary.visits\")}({filterByType(SummaryType.VISIT).length})\n            </h4>\n            <Table\n              rowData={filterByType(SummaryType.VISIT)}\n              compareRows={dateComparator}\n              tableHeader={header}\n              labelData={label}\n              columnsOrder={order}\n              rowsPerPage={ORDER_BY_TYPE_PAGE_SIZE}\n              isCollapsabile={true}\n            />\n          </div>\n\n          <div className=\"patientSummary_type_row\">\n            <h4>\n              {t(\"summary.triage\")}({filterByType(SummaryType.TRIAGE).length})\n            </h4>\n            <Table\n              rowData={filterByType(SummaryType.TRIAGE)}\n              compareRows={dateComparator}\n              tableHeader={header}\n              labelData={label}\n              columnsOrder={order}\n              rowsPerPage={ORDER_BY_TYPE_PAGE_SIZE}\n              isCollapsabile={true}\n            />\n          </div>\n\n          <div className=\"patientSummary_type_row\">\n            <h4>\n              {t(\"summary.therapy\")}({filterByType(SummaryType.THERAPY).length})\n            </h4>\n            <Table\n              rowData={filterByType(SummaryType.THERAPY)}\n              compareRows={dateComparator}\n              tableHeader={header}\n              labelData={label}\n              columnsOrder={order}\n              rowsPerPage={ORDER_BY_TYPE_PAGE_SIZE}\n              isCollapsabile={true}\n            />\n          </div>\n\n          <div className=\"patientSummary_type_row\">\n            <h4>\n              {t(\"summary.opd\")}({filterByType(SummaryType.OPD).length})\n            </h4>\n            <Table\n              rowData={filterByType(SummaryType.OPD)}\n              compareRows={dateComparator}\n              tableHeader={header}\n              labelData={label}\n              columnsOrder={order}\n              rowsPerPage={ORDER_BY_TYPE_PAGE_SIZE}\n              isCollapsabile={true}\n            />\n          </div>\n        </div>\n      ) : (\n        <CircularProgress style={{ marginLeft: \"50%\", position: \"relative\" }} />\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  isLoading: state.summary.summaryApisCall.status === \"LOADING\",\n  hasSucceeded: state.summary.summaryApisCall.status === \"SUCCESS\",\n  hasFailed: state.summary.summaryApisCall.status === \"FAIL\",\n  summaryData: state.summary.summaryApisCall.data,\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  loadSummaryData,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PatientSummaryByType);\n"]},"metadata":{},"sourceType":"module"}