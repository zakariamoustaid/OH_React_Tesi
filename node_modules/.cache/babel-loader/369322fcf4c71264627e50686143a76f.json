{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientOPD/patientOPDTable/PatientOPDTable.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getOpds } from \"../../../../state/opds/actions\";\nimport Table from \"../../table/Table\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport moment from \"moment\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport InfoBox from \"../../infoBox/InfoBox\";\n\nconst PatientOPDTable = ({\n  shouldUpdateTable\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const header = [\"date\"];\n  const label = {\n    date: t(\"opd.dateopd\"),\n    disease: t(\"opd.disease1\"),\n    disease2: t(\"opd.disease2\"),\n    disease3: t(\"opd.disease3\"),\n    note: t(\"opd.note\")\n  };\n  const order = [\"date\"];\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.opds.getOpds.data ? state.opds.getOpds.data : []);\n  const opdStatus = useSelector(state => state.opds.getOpds.status);\n  const patientCode = useSelector(state => {\n    var _state$patients$selec;\n\n    return (_state$patients$selec = state.patients.selectedPatient.data) === null || _state$patients$selec === void 0 ? void 0 : _state$patients$selec.code;\n  });\n  useEffect(() => {\n    if (shouldUpdateTable) dispatch(getOpds(patientCode));\n  }, [dispatch, patientCode, shouldUpdateTable]);\n\n  const formatDataToDisplay = data => {\n    let results = [];\n    if (data) results = data.map(item => {\n      var _item$disease, _item$disease2, _item$disease3;\n\n      return {\n        date: item.date ? moment(item.date).format(\"DD/MM/YYYY\") : \"\",\n        disease: ((_item$disease = item.disease) === null || _item$disease === void 0 ? void 0 : _item$disease.description) || \"\",\n        disease2: ((_item$disease2 = item.disease2) === null || _item$disease2 === void 0 ? void 0 : _item$disease2.description) || \"\",\n        disease3: ((_item$disease3 = item.disease3) === null || _item$disease3 === void 0 ? void 0 : _item$disease3.description) || \"\",\n        note: item.note || \"\"\n      };\n    });\n    return results;\n  };\n\n  const onDelete = () => {\n    console.log(\"delete\");\n  };\n\n  const onEdit = () => {\n    console.log(\"update\");\n  };\n\n  const onEView = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, (() => {\n    switch (opdStatus) {\n      case \"FAIL\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"error\",\n          message: t(\"common.somethingwrong\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }\n        });\n\n      case \"LOADING\":\n        return /*#__PURE__*/React.createElement(CircularProgress, {\n          style: {\n            marginLeft: \"50%\",\n            position: \"relative\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }\n        });\n\n      case \"SUCCESS\":\n        return /*#__PURE__*/React.createElement(Table, {\n          rowData: formatDataToDisplay(data),\n          compareRows: dateComparator,\n          tableHeader: header,\n          labelData: label,\n          columnsOrder: order,\n          rowsPerPage: 5,\n          onDelete: onDelete,\n          isCollapsabile: true,\n          onEdit: onEdit,\n          onView: onEView,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }\n        });\n\n      case \"SUCCESS_EMPTY\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"warning\",\n          message: t(\"common.emptydata\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 20\n          }\n        });\n\n      default:\n        return;\n    }\n  })());\n};\n\nexport default PatientOPDTable;","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientOPD/patientOPDTable/PatientOPDTable.tsx"],"names":["React","useEffect","useDispatch","useSelector","getOpds","Table","CircularProgress","useTranslation","moment","dateComparator","InfoBox","PatientOPDTable","shouldUpdateTable","t","header","label","date","disease","disease2","disease3","note","order","dispatch","data","state","opds","opdStatus","status","patientCode","patients","selectedPatient","code","formatDataToDisplay","results","map","item","format","description","onDelete","console","log","onEdit","onEView","marginLeft","position"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { OpdDTO } from \"../../../../generated\";\nimport { getOpds } from \"../../../../state/opds/actions\";\nimport { IState } from \"../../../../types\";\nimport Table from \"../../table/Table\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport moment from \"moment\";\nimport { dateComparator } from \"../../../../libraries/sortUtils/sortUtils\";\nimport InfoBox from \"../../infoBox/InfoBox\";\ninterface IOwnProps {\n  shouldUpdateTable: boolean;\n}\n\nconst PatientOPDTable: FunctionComponent<IOwnProps> = ({\n  shouldUpdateTable,\n}) => {\n  const { t } = useTranslation();\n  const header = [\"date\"];\n  const label = {\n    date: t(\"opd.dateopd\"),\n    disease: t(\"opd.disease1\"),\n    disease2: t(\"opd.disease2\"),\n    disease3: t(\"opd.disease3\"),\n    note: t(\"opd.note\"),\n  };\n  const order = [\"date\"];\n\n  const dispatch = useDispatch();\n  const data = useSelector<IState, OpdDTO[]>((state) =>\n    state.opds.getOpds.data ? state.opds.getOpds.data : []\n  );\n  const opdStatus = useSelector<IState, string | undefined>(\n    (state) => state.opds.getOpds.status\n  );\n  const patientCode = useSelector<IState, number | undefined>(\n    (state) => state.patients.selectedPatient.data?.code\n  );\n\n  useEffect(() => {\n    if (shouldUpdateTable) dispatch(getOpds(patientCode));\n  }, [dispatch, patientCode, shouldUpdateTable]);\n\n  const formatDataToDisplay = (data: OpdDTO[] | undefined) => {\n    let results: any = [];\n    if (data)\n      results = data.map((item) => {\n        return {\n          date: item.date ? moment(item.date).format(\"DD/MM/YYYY\") : \"\",\n          disease: item.disease?.description || \"\",\n          disease2: item.disease2?.description || \"\",\n          disease3: item.disease3?.description || \"\",\n          note: item.note || \"\",\n        };\n      });\n    return results;\n  };\n\n  const onDelete = () => {\n    console.log(\"delete\");\n  };\n\n  const onEdit = () => {\n    console.log(\"update\");\n  };\n\n  const onEView = () => {};\n\n  return (\n    <div className=\"patientOpdTable\">\n      {(() => {\n        switch (opdStatus) {\n          case \"FAIL\":\n            return (\n              <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />\n            );\n          case \"LOADING\":\n            return (\n              <CircularProgress\n                style={{ marginLeft: \"50%\", position: \"relative\" }}\n              />\n            );\n          case \"SUCCESS\":\n            return (\n              <Table\n                rowData={formatDataToDisplay(data)}\n                compareRows={dateComparator}\n                tableHeader={header}\n                labelData={label}\n                columnsOrder={order}\n                rowsPerPage={5}\n                onDelete={onDelete}\n                isCollapsabile={true}\n                onEdit={onEdit}\n                onView={onEView}\n              />\n            );\n\n          case \"SUCCESS_EMPTY\":\n            return <InfoBox type=\"warning\" message={t(\"common.emptydata\")} />;\n\n          default:\n            return;\n        }\n      })()}\n    </div>\n  );\n};\n\nexport default PatientOPDTable;\n"]},"metadata":{},"sourceType":"module"}