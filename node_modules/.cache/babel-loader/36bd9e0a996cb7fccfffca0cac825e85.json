{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from \"../runtime\";\n\n/**\n * no description\n */\nexport class ExaminationControllerApi extends BaseAPI {\n  /**\n   * getByID\n   */\n  getByIDUsingGET({\n    id\n  }, opts) {\n    throwIfNullOrUndefined(id, \"id\", \"getByIDUsingGET\");\n    const headers = { ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: \"/examinations/{id}\".replace(\"{id}\", encodeURI(id)),\n      method: \"GET\",\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * getByPatientId\n   */\n\n\n  getByPatientIdUsingGET({\n    patId\n  }, opts) {\n    throwIfNullOrUndefined(patId, \"patId\", \"getByPatientIdUsingGET\");\n    const headers = { ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: \"/examinations/byPatientId/{patId}\".replace(\"{patId}\", encodeURI(patId)),\n      method: \"GET\",\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * getDefaultPatientExamination\n   */\n\n\n  getDefaultPatientExaminationUsingGET({\n    patId\n  }, opts) {\n    throwIfNullOrUndefined(patId, \"patId\", \"getDefaultPatientExaminationUsingGET\");\n    const headers = { ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      patId: patId\n    };\n    return this.request({\n      url: \"/examinations/defaultPatientExamination\",\n      method: \"GET\",\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * getFromLastPatientExamination\n   */\n\n\n  getFromLastPatientExaminationUsingGET({\n    id\n  }, opts) {\n    throwIfNullOrUndefined(id, \"id\", \"getFromLastPatientExaminationUsingGET\");\n    const headers = { ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: \"/examinations/fromLastPatientExamination/{id}\".replace(\"{id}\", encodeURI(id)),\n      method: \"GET\",\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * getLastByPatientId\n   */\n\n\n  getLastByPatientIdUsingGET({\n    patId\n  }, opts) {\n    throwIfNullOrUndefined(patId, \"patId\", \"getLastByPatientIdUsingGET\");\n    const headers = { ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: \"/examinations/lastByPatientId/{patId}\".replace(\"{patId}\", encodeURI(patId)),\n      method: \"GET\",\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * getLastNByPatID\n   */\n\n\n  getLastNByPatIDUsingGET({\n    limit,\n    patId\n  }, opts) {\n    throwIfNullOrUndefined(limit, \"limit\", \"getLastNByPatIDUsingGET\");\n    throwIfNullOrUndefined(patId, \"patId\", \"getLastNByPatIDUsingGET\");\n    const headers = { ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      limit: limit,\n      patId: patId\n    };\n    return this.request({\n      url: \"/examinations/lastNByPatId\",\n      method: \"GET\",\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * newPatientExamination\n   */\n\n\n  newPatientExaminationUsingPOST({\n    newPatientExamination\n  }, opts) {\n    throwIfNullOrUndefined(newPatientExamination, \"newPatientExamination\", \"newPatientExaminationUsingPOST\");\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: \"/examinations\",\n      method: \"POST\",\n      headers,\n      body: newPatientExamination\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n  /**\n   * updateExamination\n   */\n\n\n  updateExaminationUsingPUT({\n    id,\n    dto\n  }, opts) {\n    throwIfNullOrUndefined(id, \"id\", \"updateExaminationUsingPUT\");\n    throwIfNullOrUndefined(dto, \"dto\", \"updateExaminationUsingPUT\");\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\")\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: \"/examinations/{id}\".replace(\"{id}\", encodeURI(id)),\n      method: \"PUT\",\n      headers,\n      body: dto\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/apis/ExaminationControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","ExaminationControllerApi","getByIDUsingGET","id","opts","headers","configuration","apiKey","Authorization","request","url","replace","method","responseOpts","getByPatientIdUsingGET","patId","getDefaultPatientExaminationUsingGET","query","getFromLastPatientExaminationUsingGET","getLastByPatientIdUsingGET","getLastNByPatIDUsingGET","limit","newPatientExaminationUsingPOST","newPatientExamination","body","updateExaminationUsingPUT","dto"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from \"rxjs\";\nimport {\n  BaseAPI,\n  HttpHeaders,\n  HttpQuery,\n  throwIfNullOrUndefined,\n  encodeURI,\n  OperationOpts,\n  RawAjaxResponse,\n} from \"../runtime\";\nimport { PatientExaminationDTO, ResponseEntity } from \"../models\";\n\nexport interface GetByIDUsingGETRequest {\n  id: number;\n}\n\nexport interface GetByPatientIdUsingGETRequest {\n  patId: number;\n}\n\nexport interface GetDefaultPatientExaminationUsingGETRequest {\n  patId: number;\n}\n\nexport interface GetFromLastPatientExaminationUsingGETRequest {\n  id: number;\n}\n\nexport interface GetLastByPatientIdUsingGETRequest {\n  patId: number;\n}\n\nexport interface GetLastNByPatIDUsingGETRequest {\n  limit: number;\n  patId: number;\n}\n\nexport interface NewPatientExaminationUsingPOSTRequest {\n  newPatientExamination: PatientExaminationDTO;\n}\n\nexport interface UpdateExaminationUsingPUTRequest {\n  id: number;\n  dto: PatientExaminationDTO;\n}\n\n/**\n * no description\n */\nexport class ExaminationControllerApi extends BaseAPI {\n  /**\n   * getByID\n   */\n  getByIDUsingGET({\n    id,\n  }: GetByIDUsingGETRequest): Observable<PatientExaminationDTO>;\n  getByIDUsingGET(\n    { id }: GetByIDUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<PatientExaminationDTO>>;\n  getByIDUsingGET(\n    { id }: GetByIDUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<\n    PatientExaminationDTO | RawAjaxResponse<PatientExaminationDTO>\n  > {\n    throwIfNullOrUndefined(id, \"id\", \"getByIDUsingGET\");\n\n    const headers: HttpHeaders = {\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    return this.request<PatientExaminationDTO>(\n      {\n        url: \"/examinations/{id}\".replace(\"{id}\", encodeURI(id)),\n        method: \"GET\",\n        headers,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * getByPatientId\n   */\n  getByPatientIdUsingGET({\n    patId,\n  }: GetByPatientIdUsingGETRequest): Observable<Array<PatientExaminationDTO>>;\n  getByPatientIdUsingGET(\n    { patId }: GetByPatientIdUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<Array<PatientExaminationDTO>>>;\n  getByPatientIdUsingGET(\n    { patId }: GetByPatientIdUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<\n    Array<PatientExaminationDTO> | RawAjaxResponse<Array<PatientExaminationDTO>>\n  > {\n    throwIfNullOrUndefined(patId, \"patId\", \"getByPatientIdUsingGET\");\n\n    const headers: HttpHeaders = {\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    return this.request<Array<PatientExaminationDTO>>(\n      {\n        url: \"/examinations/byPatientId/{patId}\".replace(\n          \"{patId}\",\n          encodeURI(patId)\n        ),\n        method: \"GET\",\n        headers,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * getDefaultPatientExamination\n   */\n  getDefaultPatientExaminationUsingGET({\n    patId,\n  }: GetDefaultPatientExaminationUsingGETRequest): Observable<PatientExaminationDTO>;\n  getDefaultPatientExaminationUsingGET(\n    { patId }: GetDefaultPatientExaminationUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<PatientExaminationDTO>>;\n  getDefaultPatientExaminationUsingGET(\n    { patId }: GetDefaultPatientExaminationUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<\n    PatientExaminationDTO | RawAjaxResponse<PatientExaminationDTO>\n  > {\n    throwIfNullOrUndefined(\n      patId,\n      \"patId\",\n      \"getDefaultPatientExaminationUsingGET\"\n    );\n\n    const headers: HttpHeaders = {\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    const query: HttpQuery = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      patId: patId,\n    };\n\n    return this.request<PatientExaminationDTO>(\n      {\n        url: \"/examinations/defaultPatientExamination\",\n        method: \"GET\",\n        headers,\n        query,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * getFromLastPatientExamination\n   */\n  getFromLastPatientExaminationUsingGET({\n    id,\n  }: GetFromLastPatientExaminationUsingGETRequest): Observable<PatientExaminationDTO>;\n  getFromLastPatientExaminationUsingGET(\n    { id }: GetFromLastPatientExaminationUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<PatientExaminationDTO>>;\n  getFromLastPatientExaminationUsingGET(\n    { id }: GetFromLastPatientExaminationUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<\n    PatientExaminationDTO | RawAjaxResponse<PatientExaminationDTO>\n  > {\n    throwIfNullOrUndefined(id, \"id\", \"getFromLastPatientExaminationUsingGET\");\n\n    const headers: HttpHeaders = {\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    return this.request<PatientExaminationDTO>(\n      {\n        url: \"/examinations/fromLastPatientExamination/{id}\".replace(\n          \"{id}\",\n          encodeURI(id)\n        ),\n        method: \"GET\",\n        headers,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * getLastByPatientId\n   */\n  getLastByPatientIdUsingGET({\n    patId,\n  }: GetLastByPatientIdUsingGETRequest): Observable<PatientExaminationDTO>;\n  getLastByPatientIdUsingGET(\n    { patId }: GetLastByPatientIdUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<PatientExaminationDTO>>;\n  getLastByPatientIdUsingGET(\n    { patId }: GetLastByPatientIdUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<\n    PatientExaminationDTO | RawAjaxResponse<PatientExaminationDTO>\n  > {\n    throwIfNullOrUndefined(patId, \"patId\", \"getLastByPatientIdUsingGET\");\n\n    const headers: HttpHeaders = {\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    return this.request<PatientExaminationDTO>(\n      {\n        url: \"/examinations/lastByPatientId/{patId}\".replace(\n          \"{patId}\",\n          encodeURI(patId)\n        ),\n        method: \"GET\",\n        headers,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * getLastNByPatID\n   */\n  getLastNByPatIDUsingGET({\n    limit,\n    patId,\n  }: GetLastNByPatIDUsingGETRequest): Observable<Array<PatientExaminationDTO>>;\n  getLastNByPatIDUsingGET(\n    { limit, patId }: GetLastNByPatIDUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<Array<PatientExaminationDTO>>>;\n  getLastNByPatIDUsingGET(\n    { limit, patId }: GetLastNByPatIDUsingGETRequest,\n    opts?: OperationOpts\n  ): Observable<\n    Array<PatientExaminationDTO> | RawAjaxResponse<Array<PatientExaminationDTO>>\n  > {\n    throwIfNullOrUndefined(limit, \"limit\", \"getLastNByPatIDUsingGET\");\n    throwIfNullOrUndefined(patId, \"patId\", \"getLastNByPatIDUsingGET\");\n\n    const headers: HttpHeaders = {\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    const query: HttpQuery = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      limit: limit,\n      patId: patId,\n    };\n\n    return this.request<Array<PatientExaminationDTO>>(\n      {\n        url: \"/examinations/lastNByPatId\",\n        method: \"GET\",\n        headers,\n        query,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * newPatientExamination\n   */\n  newPatientExaminationUsingPOST({\n    newPatientExamination,\n  }: NewPatientExaminationUsingPOSTRequest): Observable<boolean>;\n  newPatientExaminationUsingPOST(\n    { newPatientExamination }: NewPatientExaminationUsingPOSTRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<boolean>>;\n  newPatientExaminationUsingPOST(\n    { newPatientExamination }: NewPatientExaminationUsingPOSTRequest,\n    opts?: OperationOpts\n  ): Observable<boolean | RawAjaxResponse<boolean>> {\n    throwIfNullOrUndefined(\n      newPatientExamination,\n      \"newPatientExamination\",\n      \"newPatientExaminationUsingPOST\"\n    );\n\n    const headers: HttpHeaders = {\n      \"Content-Type\": \"application/json\",\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    return this.request<boolean>(\n      {\n        url: \"/examinations\",\n        method: \"POST\",\n        headers,\n        body: newPatientExamination,\n      },\n      opts?.responseOpts\n    );\n  }\n\n  /**\n   * updateExamination\n   */\n  updateExaminationUsingPUT({\n    id,\n    dto,\n  }: UpdateExaminationUsingPUTRequest): Observable<ResponseEntity>;\n  updateExaminationUsingPUT(\n    { id, dto }: UpdateExaminationUsingPUTRequest,\n    opts?: OperationOpts\n  ): Observable<RawAjaxResponse<ResponseEntity>>;\n  updateExaminationUsingPUT(\n    { id, dto }: UpdateExaminationUsingPUTRequest,\n    opts?: OperationOpts\n  ): Observable<ResponseEntity | RawAjaxResponse<ResponseEntity>> {\n    throwIfNullOrUndefined(id, \"id\", \"updateExaminationUsingPUT\");\n    throwIfNullOrUndefined(dto, \"dto\", \"updateExaminationUsingPUT\");\n\n    const headers: HttpHeaders = {\n      \"Content-Type\": \"application/json\",\n      ...(this.configuration.apiKey && {\n        Authorization: this.configuration.apiKey(\"Authorization\"),\n      }), // JWT authentication\n    };\n\n    return this.request<ResponseEntity>(\n      {\n        url: \"/examinations/{id}\".replace(\"{id}\", encodeURI(id)),\n        method: \"PUT\",\n        headers,\n        body: dto,\n      },\n      opts?.responseOpts\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}