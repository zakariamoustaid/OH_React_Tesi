{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport { useFormik } from \"formik\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport \"./styles.scss\";\nimport SearchIcon from \"../../../assets/SearchIcon\";\nimport Test from \"./Test\";\nimport { createBill, createBillReset } from \"../../../state/bills/actions\";\nimport { searchPatient, getPatientSuccess } from \"../../../state/patients/actions\";\n\nconst NewBillActivity = ({\n  userCredentials,\n  isLoading,\n  hasSucceeded,\n  createBill,\n  createBillReset,\n  hasFailed,\n  billHomeRoute,\n  patientSearchResults,\n  getPatientSuccess,\n  searchStatus\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.billing\")]: \"/billing\",\n    [t(\"nav.newbill\")]: \"/bills\"\n  };\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n  const initialValues = {\n    id: \"\",\n    firstName: \"\",\n    secondName: \"\",\n    birthDate: \"\",\n    address: \"\"\n  };\n  const formik = useFormik({\n    initialValues,\n    onSubmit: values => {\n      // First scroll to show searching message\n      searchPatient(values);\n    }\n  });\n  useEffect(() => {\n    if (searchStatus === \"SUCCESS\" || searchStatus === \"SUCCESS_EMPTY\") {// Second scroll to show results\n    }\n  }, [searchStatus]);\n  const resultsRef = useRef(null);\n  /*useEffect(() => {\n      if (\n          activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n          activityTransitionState === \"TO_BILL_HOME\"\n      ) {\n          createBillReset();\n          setShouldResetForm(true);\n      }\n  }, [activityTransitionState, createBillReset]);\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n   useEffect(() => {\n      if (hasFailed) {\n          scrollToElement(infoBoxRef.current);\n      }\n  }, [hasFailed]);\n   const [shouldResetForm, setShouldResetForm] = useState(false);\n   const resetFormCallback = () => {\n      setShouldResetForm(false);\n      setActivityTransitionState(\"IDLE\");\n      scrollToElement(null);\n  };\n   const formik = useFormik({\n      initialValues: {\n          firstName: '',\n      },\n      onSubmit: (values) => {\n          console.log(values);\n      },\n  });\n  */\n\n  const renderSearchResults = () => {\n    switch (searchStatus) {\n      case \"IDLE\":\n        return;\n\n      case \"LOADING\":\n        return /*#__PURE__*/React.createElement(\"h3\", {\n          className: \"searchPatient__loading\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }\n        }, t(\"common.searching\"));\n\n      case \"SUCCESS\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results_count\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }\n        }, t(\"common.results\"), \":\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }\n        }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.length)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results_list\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }\n        }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(Test, {\n          key: index,\n          patient: patient,\n          getPatientSuccessCallback: getPatientSuccess,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }\n        }))));\n\n      case \"SUCCESS_EMPTY\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"warning\",\n          message: t(\"common.searchnotfound\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 28\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"error\",\n          message: t(\"common.somethingwrong\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 28\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new_Bill\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppHeader, {\n    userCredentials: userCredentials,\n    breadcrumbMap: breadcrumbMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, t(\"nav.newbill\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    theme: \"light\",\n    field: formik.getFieldProps(\"id\"),\n    label: t(\"patient.patientID\"),\n    isValid: isValid(\"id\"),\n    errorText: getErrorText(\"id\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__buttonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"searchPatient__button\",\n    type: \"submit\",\n    disabled: searchStatus === \"LOADING\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    width: \"20\",\n    height: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__button__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 41\n    }\n  }, t(\"common.search\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 37\n    }\n  }, t(\"common.searchpatientinstruction\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"firstName\"),\n    theme: \"regular\",\n    label: t(\"patient.firstname\"),\n    isValid: isValid(\"firstName\"),\n    errorText: getErrorText(\"firstName\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"secondName\"),\n    theme: \"regular\",\n    label: t(\"patient.secondname\"),\n    isValid: isValid(\"secondName\"),\n    errorText: getErrorText(\"secondName\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"birthDate\"),\n    theme: \"regular\",\n    label: t(\"patient.birthdate\"),\n    isValid: isValid(\"birthDate\"),\n    errorText: getErrorText(\"birthDate\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"address\"),\n    theme: \"regular\",\n    label: t(\"patient.address\"),\n    isValid: isValid(\"address\"),\n    errorText: getErrorText(\"address\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 45\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: resultsRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 25\n    }\n  }, renderSearchResults())))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  patientSearchResults: state.patients.searchResults.data,\n  isLoading: state.bills.createBill.status === \"LOADING\",\n  hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n  hasFailed: state.bills.createBill.status === \"FAIL\",\n  searchStatus: state.patients.searchResults.status || \"IDLE\"\n});\n\nconst mapDispatchToProps = {\n  createBill,\n  createBillReset,\n  getPatientSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx"],"names":["React","useEffect","useRef","useState","AppHeader","Footer","Button","useTranslation","connect","get","has","useFormik","TextField","SearchIcon","Test","createBill","createBillReset","searchPatient","getPatientSuccess","NewBillActivity","userCredentials","isLoading","hasSucceeded","hasFailed","billHomeRoute","patientSearchResults","searchStatus","t","breadcrumbMap","isValid","fieldName","formik","touched","errors","getErrorText","activityTransitionState","setActivityTransitionState","test_succ","initialValues","id","firstName","secondName","birthDate","address","onSubmit","values","resultsRef","renderSearchResults","length","map","patient","index","handleSubmit","getFieldProps","handleBlur","mapStateToProps","state","main","authentication","data","patients","searchResults","bills","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport { IState } from \"../../../types\";\nimport { useFormik } from \"formik\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport { BillDTO } from \"../../../generated\";\nimport { FullBillDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport \"./styles.scss\";\nimport SearchIcon from \"../../../assets/SearchIcon\";\nimport Test from \"./Test\";\nimport {\n    createBill,\n    createBillReset,\n} from \"../../../state/bills/actions\";\nimport {\n    searchPatient,\n    getPatientSuccess,\n} from \"../../../state/patients/actions\";\n\nimport {\n    IDispatchProps,\n    IStateProps,\n    TActivityTransitionState,\n    TProps,\n    TValues,\n} from \"./types\";\n\n\nconst NewBillActivity: FunctionComponent<TProps> = ({\n    userCredentials,\n    isLoading,\n    hasSucceeded,\n    createBill,\n    createBillReset,\n    hasFailed,\n    billHomeRoute,\n    patientSearchResults,\n    getPatientSuccess,\n    searchStatus,\n}) => {\n    const { t } = useTranslation();\n\n    const breadcrumbMap = {\n        [t(\"nav.dashboard\")]: \"/\",\n        [t(\"nav.billing\")]: \"/billing\",\n        [t(\"nav.newbill\")]: \"/bills\",\n    };\n\n    const isValid = (fieldName: string): boolean => {\n        return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n    };\n\n    const getErrorText = (fieldName: string): string => {\n        return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n    };\n\n    const [activityTransitionState, setActivityTransitionState] =\n        useState<TActivityTransitionState>(\"IDLE\");\n\n    const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n\n    const initialValues: TValues = {\n        id: \"\",\n        firstName: \"\",\n        secondName: \"\",\n        birthDate: \"\",\n        address: \"\",\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: (values: TValues) => {\n            // First scroll to show searching message\n\n            searchPatient(values);\n        },\n    });\n\n    useEffect(() => {\n        if (searchStatus === \"SUCCESS\" || searchStatus === \"SUCCESS_EMPTY\") {\n            // Second scroll to show results\n\n        }\n    }, [searchStatus]);\n\n    const resultsRef = useRef<HTMLDivElement>(null);\n    /*useEffect(() => {\n        if (\n            activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n            activityTransitionState === \"TO_BILL_HOME\"\n        ) {\n            createBillReset();\n            setShouldResetForm(true);\n        }\n    }, [activityTransitionState, createBillReset]);\n\n\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (hasFailed) {\n            scrollToElement(infoBoxRef.current);\n        }\n    }, [hasFailed]);\n\n    const [shouldResetForm, setShouldResetForm] = useState(false);\n\n    const resetFormCallback = () => {\n        setShouldResetForm(false);\n        setActivityTransitionState(\"IDLE\");\n        scrollToElement(null);\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n        },\n        onSubmit: (values) => {\n            console.log(values);\n        },\n    });\n    */\n    const renderSearchResults = (): JSX.Element | undefined => {\n        switch (searchStatus) {\n            case \"IDLE\":\n                return;\n\n            case \"LOADING\":\n                return (\n                    <h3 className=\"searchPatient__loading\">{t(\"common.searching\")}</h3>\n                );\n\n            case \"SUCCESS\":\n                return (\n                    <div className=\"searchPatient__results\">\n                        <div className=\"searchPatient__results_count\">\n                            {t(\"common.results\")}:{\" \"}\n                            <strong>{patientSearchResults?.length}</strong>\n                        </div>\n                        <div className=\"searchPatient__results_list\">\n                            {patientSearchResults?.map((patient, index) => (\n                                <Test\n                                    key={index}\n                                    patient={patient}\n                                    getPatientSuccessCallback={getPatientSuccess}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                );\n                case \"SUCCESS_EMPTY\":\n                    return <InfoBox type=\"warning\" message={t(\"common.searchnotfound\")} />;\n            \n                  default:\n                    return <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />;\n        }\n    };\n\n    return (\n        <div className=\"new_Bill\">\n            <AppHeader\n                userCredentials={userCredentials}\n                breadcrumbMap={breadcrumbMap}\n            />\n            <div className=\"newBill__background\">\n                <div className=\"newBill__content\">\n                    <div className=\"newBill__title\">{t(\"nav.newbill\")}</div>\n                    <div className=\"newBill__panel\">\n                        <div className=\"table\">\n                            <form onSubmit={formik.handleSubmit}>\n                                <div className=\"searchPatient__primary\">\n                                    <div className=\"row center-xs\">\n                                        <div className=\"searchPatient__formItem\">\n                                            <TextField\n                                                theme=\"light\"\n                                                field={formik.getFieldProps(\"id\")}\n                                                label={t(\"patient.patientID\")}\n                                                isValid={isValid(\"id\")}\n                                                errorText={getErrorText(\"id\")}\n                                                onBlur={formik.handleBlur}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"searchPatient__buttonContainer\">\n                                    <Button\n                                        className=\"searchPatient__button\"\n                                        type=\"submit\"\n                                        disabled={searchStatus === \"LOADING\"}\n                                    >\n                                        <SearchIcon width=\"20\" height=\"20\" />\n                                        <div className=\"searchPatient__button__label\">\n                                            {t(\"common.search\")}\n                                        </div>\n                                    </Button>\n                                </div>\n                                <div className=\"searchPatient__secondary\">\n                                    <div className=\"searchPatient__info\">\n                                        {t(\"common.searchpatientinstruction\")}\n                                    </div>\n                                    <div className=\"row center-xs\">\n                                        <div className=\"searchPatient__formItem\">\n                                            <TextField\n                                                field={formik.getFieldProps(\"firstName\")}\n                                                theme=\"regular\"\n                                                label={t(\"patient.firstname\")}\n                                                isValid={isValid(\"firstName\")}\n                                                errorText={getErrorText(\"firstName\")}\n                                                onBlur={formik.handleBlur}\n                                            />\n                                        </div>\n                                        <div className=\"searchPatient__formItem\">\n                                            <TextField\n                                                field={formik.getFieldProps(\"secondName\")}\n                                                theme=\"regular\"\n                                                label={t(\"patient.secondname\")}\n                                                isValid={isValid(\"secondName\")}\n                                                errorText={getErrorText(\"secondName\")}\n                                                onBlur={formik.handleBlur}\n\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"row center-xs\">\n                                        <div className=\"searchPatient__formItem\">\n                                            <TextField\n                                                field={formik.getFieldProps(\"birthDate\")}\n                                                theme=\"regular\"\n                                                label={t(\"patient.birthdate\")}\n                                                isValid={isValid(\"birthDate\")}\n                                                errorText={getErrorText(\"birthDate\")}\n                                                onBlur={formik.handleBlur}\n\n                                            />\n                                        </div>\n                                        <div className=\"searchPatient__formItem\">\n                                            <TextField\n                                                field={formik.getFieldProps(\"address\")}\n                                                theme=\"regular\"\n                                                label={t(\"patient.address\")}\n                                                isValid={isValid(\"address\")}\n                                                errorText={getErrorText(\"address\")}\n                                                onBlur={formik.handleBlur}\n\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                        <div ref={resultsRef}>{renderSearchResults()}</div>\n                    </div>\n                </div>\n            </div>\n            <Footer />\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n    userCredentials: state.main.authentication.data,\n    patientSearchResults: state.patients.searchResults.data,\n    isLoading: state.bills.createBill.status === \"LOADING\",\n    hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n    hasFailed: state.bills.createBill.status === \"FAIL\",\n    searchStatus: state.patients.searchResults.status || \"IDLE\",\n});\n\n\n\n\nconst mapDispatchToProps: IDispatchProps = {\n    createBill,\n    createBillReset,\n    getPatientSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);\n"]},"metadata":{},"sourceType":"module"}