{"ast":null,"code":"import { Configuration, BillControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { CREATE_BILL_LOADING, CREATE_BILL_RESET, SEARCH_BILL_LOADING } from \"./consts\";\nconst billControllerApi = new BillControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const createBill = () => dispatch => {\n  dispatch({\n    type: CREATE_BILL_LOADING,\n    ciao: 1\n  });\n};\nexport const createBillReset = () => dispatch => {\n  dispatch({\n    type: CREATE_BILL_RESET\n  });\n};\nexport const searchPatient = values => dispatch => {\n  dispatch({\n    type: SEARCH_BILL_LOADING\n  });\n\n  if (values.id) {\n    billControllerApi.getPatientUsingGET({\n      code: parseInt(values.id)\n    }).subscribe(payload => {\n      if (typeof payload === \"object\" && !isEmpty(payload)) {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload: [payload]\n        });\n      } else {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload: []\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_PATIENT_FAIL,\n        error\n      });\n    });\n  } else {\n    patientControllerApi.searchPatientUsingGET(values).subscribe(payload => {\n      if (Array.isArray(payload)) {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload\n        });\n      } else {\n        dispatch({\n          type: SEARCH_PATIENT_FAIL,\n          error: {\n            message: \"Unexpected response payload\"\n          }\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_PATIENT_FAIL,\n        error\n      });\n    });\n  }\n};\nexport const getPatientSuccess = patient => {\n  return {\n    type: GET_PATIENT_SUCCESS,\n    payload: patient\n  };\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/bills/actions.ts"],"names":["Configuration","BillControllerApi","applyTokenMiddleware","CREATE_BILL_LOADING","CREATE_BILL_RESET","SEARCH_BILL_LOADING","billControllerApi","middleware","createBill","dispatch","type","ciao","createBillReset","searchPatient","values","id","getPatientUsingGET","code","parseInt","subscribe","payload","isEmpty","SEARCH_PATIENT_SUCCESS","error","SEARCH_PATIENT_FAIL","patientControllerApi","searchPatientUsingGET","Array","isArray","message","getPatientSuccess","patient","GET_PATIENT_SUCCESS"],"mappings":"AACA,SACIA,aADJ,EAEIC,iBAFJ,QAKO,iBALP;AAOA,SAASC,oBAAT,QAAqC,+CAArC;AAEA,SAEIC,mBAFJ,EAGIC,iBAHJ,EAMIC,mBANJ,QAQO,UARP;AAUA,MAAMC,iBAAiB,GAAG,IAAIL,iBAAJ,CACtB,IAAID,aAAJ,CAAkB;AAAEO,EAAAA,UAAU,EAAE,CAACL,oBAAD;AAAd,CAAlB,CADsB,CAA1B;AAIA,OAAO,MAAMM,UAAU,GACnB,MACKC,QAAD,IAAiD;AAC7CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEP,mBADD;AAELQ,IAAAA,IAAI,EAAE;AAFD,GAAD,CAAR;AAIH,CAPF;AASP,OAAO,MAAMC,eAAe,GACxB,MACKH,QAAD,IAAiD;AAC7CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN;AADD,GAAD,CAAR;AAGH,CANF;AAQP,OAAO,MAAMS,aAAa,GACrBC,MAAD,IACKL,QAAD,IAAsD;AAClDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEL;AADD,GAAD,CAAR;;AAIA,MAAIS,MAAM,CAACC,EAAX,EAAe;AACXT,IAAAA,iBAAiB,CACZU,kBADL,CACwB;AAAEC,MAAAA,IAAI,EAAEC,QAAQ,CAACJ,MAAM,CAACC,EAAR;AAAhB,KADxB,EAEKI,SAFL,CAGSC,OAAD,IAAa;AACT,UAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACC,OAAO,CAACD,OAAD,CAA3C,EAAsD;AAClDX,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEY,sBADD;AAELF,UAAAA,OAAO,EAAE,CAACA,OAAD;AAFJ,SAAD,CAAR;AAIH,OALD,MAKO;AACHX,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEY,sBADD;AAELF,UAAAA,OAAO,EAAE;AAFJ,SAAD,CAAR;AAIH;AACJ,KAfT,EAgBSG,KAAD,IAAW;AACPd,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEc,mBADD;AAELD,QAAAA;AAFK,OAAD,CAAR;AAIH,KArBT;AAuBH,GAxBD,MAwBO;AACHE,IAAAA,oBAAoB,CAACC,qBAArB,CAA2CZ,MAA3C,EAAmDK,SAAnD,CACKC,OAAD,IAAa;AACT,UAAIO,KAAK,CAACC,OAAN,CAAcR,OAAd,CAAJ,EAA4B;AACxBX,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEY,sBADD;AAELF,UAAAA;AAFK,SAAD,CAAR;AAIH,OALD,MAKO;AACHX,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEc,mBADD;AAELD,UAAAA,KAAK,EAAE;AAAEM,YAAAA,OAAO,EAAE;AAAX;AAFF,SAAD,CAAR;AAIH;AACJ,KAbL,EAcKN,KAAD,IAAW;AACPd,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEc,mBADD;AAELD,QAAAA;AAFK,OAAD,CAAR;AAIH,KAnBL;AAqBH;AACJ,CAtDF;AAwDP,OAAO,MAAMO,iBAAiB,GAC1BC,OAD6B,IAEH;AAC1B,SAAO;AACHrB,IAAAA,IAAI,EAAEsB,mBADH;AAEHZ,IAAAA,OAAO,EAAEW;AAFN,GAAP;AAIH,CAPM","sourcesContent":["import { Dispatch } from \"redux\";\nimport {\n    Configuration,\n    BillControllerApi,\n    BillDTO,\n    FullBillDTO,\n} from \"../../generated\";\nimport { TValues } from \"../../components/activities/searchBillActivity/types\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n    CREATE_BILL_FAIL,\n    CREATE_BILL_LOADING,\n    CREATE_BILL_RESET,\n    CREATE_BILL_SUCCESS,\n    SEARCH_BILL_FAIL,\n    SEARCH_BILL_LOADING,\n    SEARCH_BILL_SUCCESS,\n} from \"./consts\";\n\nconst billControllerApi = new BillControllerApi(\n    new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const createBill =\n    () =>\n        (dispatch: Dispatch<IAction<null, {}>>): void => {\n            dispatch({\n                type: CREATE_BILL_LOADING,\n                ciao: 1,\n            });\n        };\n\nexport const createBillReset =\n    () =>\n        (dispatch: Dispatch<IAction<null, {}>>): void => {\n            dispatch({\n                type: CREATE_BILL_RESET,\n            });\n        };\n\nexport const searchPatient =\n    (values: TValues) =>\n        (dispatch: Dispatch<IAction<BillDTO[], {}>>): void => {\n            dispatch({\n                type: SEARCH_BILL_LOADING,\n            });\n\n            if (values.id) {\n                billControllerApi\n                    .getPatientUsingGET({ code: parseInt(values.id) })\n                    .subscribe(\n                        (payload) => {\n                            if (typeof payload === \"object\" && !isEmpty(payload)) {\n                                dispatch({\n                                    type: SEARCH_PATIENT_SUCCESS,\n                                    payload: [payload],\n                                });\n                            } else {\n                                dispatch({\n                                    type: SEARCH_PATIENT_SUCCESS,\n                                    payload: [],\n                                });\n                            }\n                        },\n                        (error) => {\n                            dispatch({\n                                type: SEARCH_PATIENT_FAIL,\n                                error,\n                            });\n                        }\n                    );\n            } else {\n                patientControllerApi.searchPatientUsingGET(values).subscribe(\n                    (payload) => {\n                        if (Array.isArray(payload)) {\n                            dispatch({\n                                type: SEARCH_PATIENT_SUCCESS,\n                                payload,\n                            });\n                        } else {\n                            dispatch({\n                                type: SEARCH_PATIENT_FAIL,\n                                error: { message: \"Unexpected response payload\" },\n                            });\n                        }\n                    },\n                    (error) => {\n                        dispatch({\n                            type: SEARCH_PATIENT_FAIL,\n                            error,\n                        });\n                    }\n                );\n            }\n        };\n\nexport const getPatientSuccess = (\n    patient: PatientDTO\n): IAction<PatientDTO, {}> => {\n    return {\n        type: GET_PATIENT_SUCCESS,\n        payload: patient,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}