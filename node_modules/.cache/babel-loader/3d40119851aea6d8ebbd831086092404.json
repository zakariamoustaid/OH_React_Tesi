{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/activities/editPatientActivity/EditPatientActivity.tsx\";\nimport isEmpty from \"lodash.isempty\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport { updateFields } from \"../../../libraries/formDataHandling/functions\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { updatePatient, updatePatientReset, getPatientThunk } from \"../../../state/patients/actions\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport ConfirmationDialog from \"../../accessories/confirmationDialog/ConfirmationDialog\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport InfoBox from \"../../accessories/infoBox/InfoBox\";\nimport PatientDataForm from \"../../accessories/patientDataForm/PatientDataForm\";\nimport { initialFields } from \"../newPatientActivity/consts\";\nimport \"./styles.scss\";\n\nconst EditPatientActivity = ({\n  userCredentials,\n  isLoading,\n  updatePatient,\n  updatePatientReset,\n  hasSucceeded,\n  hasFailed,\n  patient,\n  getPatientThunk\n}) => {\n  var _patient$data, _patient$data2, _patient$data5, _patient$data6, _patient$data7, _patient$data8;\n\n  const {\n    id\n  } = useParams();\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    if (isEmpty(patient.data) && patient.status === \"IDLE\") {\n      getPatientThunk(id);\n    }\n  }, [patient, id, getPatientThunk]);\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.searchpatient\")]: \"/search\",\n    [t(\"nav.patientdashboard\")]: `/details/${(_patient$data = patient.data) === null || _patient$data === void 0 ? void 0 : _patient$data.code}`,\n    [t(\"nav.editpatient\")]: `/details/${(_patient$data2 = patient.data) === null || _patient$data2 === void 0 ? void 0 : _patient$data2.code}/edit`\n  };\n\n  const onSubmit = updatePatientValues => {\n    var _patient$data3, _patient$data4;\n\n    if (patient === null || patient === void 0 ? void 0 : (_patient$data3 = patient.data) === null || _patient$data3 === void 0 ? void 0 : _patient$data3.code) updatePatient(patient === null || patient === void 0 ? void 0 : (_patient$data4 = patient.data) === null || _patient$data4 === void 0 ? void 0 : _patient$data4.code, updatePatientValues);else console.error('The Patient: PatientDTO object must have a \"code\" property.');\n  };\n\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const [openConfirmationMessage, setOpenConfirmationMessage] = useState(false);\n  useEffect(() => {\n    if (activityTransitionState === \"TO_PATIENT\") {\n      getPatientThunk(id);\n      updatePatientReset();\n      setShouldResetForm(true);\n    } else if (activityTransitionState === \"TO_KEEP_EDITING\") {\n      setOpenConfirmationMessage(false);\n    }\n  }, [activityTransitionState, updatePatientReset, getPatientThunk, id]);\n  useEffect(() => {\n    setOpenConfirmationMessage(hasSucceeded);\n  }, [hasSucceeded]);\n  const infoBoxRef = useRef(null);\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  switch (activityTransitionState) {\n    case \"TO_PATIENT\":\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/details/${(_patient$data5 = patient.data) === null || _patient$data5 === void 0 ? void 0 : _patient$data5.code}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 14\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editPatient\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AppHeader, {\n        userCredentials: userCredentials,\n        breadcrumbMap: breadcrumbMap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editPatient__background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editPatient__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editPatient__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }\n      }, `${t(\"nav.editpatient\")}: ${(_patient$data6 = patient.data) === null || _patient$data6 === void 0 ? void 0 : _patient$data6.firstName} ${(_patient$data7 = patient.data) === null || _patient$data7 === void 0 ? void 0 : _patient$data7.secondName}`), /*#__PURE__*/React.createElement(PatientDataForm, {\n        fields: updateFields(initialFields, patient === null || patient === void 0 ? void 0 : patient.data),\n        profilePicture: (_patient$data8 = patient.data) === null || _patient$data8 === void 0 ? void 0 : _patient$data8.blobPhoto,\n        onSubmit: onSubmit,\n        submitButtonLabel: t(\"common.submit\"),\n        resetButtonLabel: t(\"common.reset\"),\n        isLoading: isLoading,\n        shouldResetForm: shouldResetForm,\n        resetFormCallback: resetFormCallback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        ref: infoBoxRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }, hasFailed && /*#__PURE__*/React.createElement(InfoBox, {\n        type: \"error\",\n        message: t(\"common.somethingwrong\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        isOpen: openConfirmationMessage,\n        title: t(\"common.titleedited\"),\n        icon: checkIcon,\n        info: t(\"common.patienteditsuccessfull\"),\n        primaryButtonLabel: t(\"common.patient\"),\n        secondaryButtonLabel: t(\"common.keepediting\"),\n        handlePrimaryButtonClick: () => setActivityTransitionState(\"TO_PATIENT\"),\n        handleSecondaryButtonClick: () => setActivityTransitionState(\"TO_KEEP_EDITING\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }));\n  }\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  isLoading: state.patients.updatePatient.status === \"LOADING\",\n  hasSucceeded: state.patients.updatePatient.status === \"SUCCESS\",\n  hasFailed: state.patients.updatePatient.status === \"FAIL\",\n  patient: state.patients.selectedPatient\n});\n\nconst mapDispatchToProps = {\n  getPatientThunk,\n  updatePatientReset,\n  updatePatient\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPatientActivity);","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/activities/editPatientActivity/EditPatientActivity.tsx"],"names":["isEmpty","React","useEffect","useRef","useState","useTranslation","connect","Redirect","useParams","checkIcon","updateFields","scrollToElement","updatePatient","updatePatientReset","getPatientThunk","AppHeader","ConfirmationDialog","Footer","InfoBox","PatientDataForm","initialFields","EditPatientActivity","userCredentials","isLoading","hasSucceeded","hasFailed","patient","id","t","data","status","breadcrumbMap","code","onSubmit","updatePatientValues","console","error","activityTransitionState","setActivityTransitionState","openConfirmationMessage","setOpenConfirmationMessage","setShouldResetForm","infoBoxRef","current","shouldResetForm","resetFormCallback","firstName","secondName","blobPhoto","mapStateToProps","state","main","authentication","patients","selectedPatient","mapDispatchToProps"],"mappings":"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","sourcesContent":["import isEmpty from \"lodash.isempty\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport { PatientDTO } from \"../../../generated\";\nimport { updateFields } from \"../../../libraries/formDataHandling/functions\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport {\n  updatePatient,\n  updatePatientReset,\n  getPatientThunk,\n} from \"../../../state/patients/actions\";\nimport { IState } from \"../../../types\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport ConfirmationDialog from \"../../accessories/confirmationDialog/ConfirmationDialog\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport InfoBox from \"../../accessories/infoBox/InfoBox\";\nimport PatientDataForm from \"../../accessories/patientDataForm/PatientDataForm\";\nimport { initialFields } from \"../newPatientActivity/consts\";\nimport \"./styles.scss\";\nimport {\n  IDispatchProps,\n  IStateProps,\n  TActivityTransitionState,\n  TProps,\n} from \"./types\";\n\nconst EditPatientActivity: FunctionComponent<TProps> = ({\n  userCredentials,\n  isLoading,\n  updatePatient,\n  updatePatientReset,\n  hasSucceeded,\n  hasFailed,\n  patient,\n  getPatientThunk,\n}) => {\n  const { id } = useParams<{ id: string }>();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (isEmpty(patient.data) && patient.status === \"IDLE\") {\n      getPatientThunk(id);\n    }\n  }, [patient, id, getPatientThunk]);\n\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.searchpatient\")]: \"/search\",\n    [t(\"nav.patientdashboard\")]: `/details/${patient.data?.code}`,\n    [t(\"nav.editpatient\")]: `/details/${patient.data?.code}/edit`,\n  };\n\n  const onSubmit = (updatePatientValues: PatientDTO) => {\n    if (patient?.data?.code)\n      updatePatient(patient?.data?.code, updatePatientValues);\n    else\n      console.error(\n        'The Patient: PatientDTO object must have a \"code\" property.'\n      );\n  };\n\n  const [\n    activityTransitionState,\n    setActivityTransitionState,\n  ] = useState<TActivityTransitionState>(\"IDLE\");\n  const [\n    openConfirmationMessage,\n    setOpenConfirmationMessage,\n  ] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (activityTransitionState === \"TO_PATIENT\") {\n      getPatientThunk(id);\n      updatePatientReset();\n      setShouldResetForm(true);\n    } else if (activityTransitionState === \"TO_KEEP_EDITING\") {\n      setOpenConfirmationMessage(false);\n    }\n  }, [activityTransitionState, updatePatientReset, getPatientThunk, id]);\n\n  useEffect(() => {\n    setOpenConfirmationMessage(hasSucceeded);\n  }, [hasSucceeded]);\n\n  const infoBoxRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  switch (activityTransitionState) {\n    case \"TO_PATIENT\":\n      return <Redirect to={`/details/${patient.data?.code}`} />;\n    default:\n      return (\n        <div className=\"editPatient\">\n          <AppHeader\n            userCredentials={userCredentials}\n            breadcrumbMap={breadcrumbMap}\n          />\n          <div className=\"editPatient__background\">\n            <div className=\"editPatient__content\">\n              <div className=\"editPatient__title\">\n                {`${t(\"nav.editpatient\")}: ${patient.data?.firstName} ${\n                  patient.data?.secondName\n                }`}\n              </div>\n              <PatientDataForm\n                fields={updateFields(initialFields, patient?.data)}\n                profilePicture={patient.data?.blobPhoto}\n                onSubmit={onSubmit}\n                submitButtonLabel={t(\"common.submit\")}\n                resetButtonLabel={t(\"common.reset\")}\n                isLoading={isLoading}\n                shouldResetForm={shouldResetForm}\n                resetFormCallback={resetFormCallback}\n              />\n            </div>\n          </div>\n          <div ref={infoBoxRef}>\n            {hasFailed && (\n              <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />\n            )}\n          </div>\n          <ConfirmationDialog\n            isOpen={openConfirmationMessage}\n            title={t(\"common.titleedited\")}\n            icon={checkIcon}\n            info={t(\"common.patienteditsuccessfull\")}\n            primaryButtonLabel={t(\"common.patient\")}\n            secondaryButtonLabel={t(\"common.keepediting\")}\n            handlePrimaryButtonClick={() =>\n              setActivityTransitionState(\"TO_PATIENT\")\n            }\n            handleSecondaryButtonClick={() =>\n              setActivityTransitionState(\"TO_KEEP_EDITING\")\n            }\n          />\n          <Footer />\n        </div>\n      );\n  }\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  userCredentials: state.main.authentication.data,\n  isLoading: state.patients.updatePatient.status === \"LOADING\",\n  hasSucceeded: state.patients.updatePatient.status === \"SUCCESS\",\n  hasFailed: state.patients.updatePatient.status === \"FAIL\",\n  patient: state.patients.selectedPatient,\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  getPatientThunk,\n  updatePatientReset,\n  updatePatient,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditPatientActivity);\n"]},"metadata":{},"sourceType":"module"}