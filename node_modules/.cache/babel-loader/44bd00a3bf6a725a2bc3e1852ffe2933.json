{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class AdmissionControllerApi extends BaseAPI {\n  /**\n   * deleteAdmissionType\n   */\n  deleteAdmissionTypeUsingDELETE({\n    id\n  }, opts) {\n    throwIfNullOrUndefined(id, 'id', 'deleteAdmissionTypeUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/admissions/{id}'.replace('{id}', encodeURI(id)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getAdmissionsUsingGET({\n    id\n  }, opts) {\n    throwIfNullOrUndefined(id, 'id', 'getAdmissionsUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/admissions/{id}'.replace('{id}', encodeURI(id)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getAdmittedPatientsUsingGET({\n    admissionrange,\n    dischargerange,\n    searchterms\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (admissionrange != null) {\n      query['admissionrange'] = admissionrange;\n    }\n\n    if (dischargerange != null) {\n      query['dischargerange'] = dischargerange;\n    }\n\n    if (searchterms != null) {\n      query['searchterms'] = searchterms;\n    }\n\n    return this.request({\n      url: '/admissions/admittedPatients',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getCurrentAdmissionUsingGET({\n    patientcode\n  }, opts) {\n    throwIfNullOrUndefined(patientcode, 'patientcode', 'getCurrentAdmissionUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'patientcode': patientcode\n    };\n    return this.request({\n      url: '/admissions/current',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getNextYProgUsingGET({\n    wardcode\n  }, opts) {\n    throwIfNullOrUndefined(wardcode, 'wardcode', 'getNextYProgUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'wardcode': wardcode\n    };\n    return this.request({\n      url: '/admissions/getNextProgressiveIdInYear',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getPatientAdmissionsUsingGET({\n    patientcode\n  }, opts) {\n    throwIfNullOrUndefined(patientcode, 'patientcode', 'getPatientAdmissionsUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'patientcode': patientcode\n    };\n    return this.request({\n      url: '/admissions',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getUsedWardBedUsingGET({\n    wardid\n  }, opts) {\n    throwIfNullOrUndefined(wardid, 'wardid', 'getUsedWardBedUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'wardid': wardid\n    };\n    return this.request({\n      url: '/admissions/getBedsOccupationInWard',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newAdmissionsUsingPOST({\n    newAdmissionDTO\n  }, opts) {\n    throwIfNullOrUndefined(newAdmissionDTO, 'newAdmissionDTO', 'newAdmissionsUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/admissions',\n      method: 'POST',\n      headers,\n      body: newAdmissionDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateAdmissionsUsingPUT({\n    updAdmissionDTO\n  }, opts) {\n    throwIfNullOrUndefined(updAdmissionDTO, 'updAdmissionDTO', 'updateAdmissionsUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/admissions',\n      method: 'PUT',\n      headers,\n      body: updAdmissionDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/generated/apis/AdmissionControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","AdmissionControllerApi","deleteAdmissionTypeUsingDELETE","id","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","getAdmissionsUsingGET","getAdmittedPatientsUsingGET","admissionrange","dischargerange","searchterms","query","getCurrentAdmissionUsingGET","patientcode","getNextYProgUsingGET","wardcode","getPatientAdmissionsUsingGET","getUsedWardBedUsingGET","wardid","newAdmissionsUsingPOST","newAdmissionDTO","body","updateAdmissionsUsingPUT","updAdmissionDTO"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    AdmissionDTO,\n    AdmittedPatientDTO,\n} from '../models';\n\nexport interface DeleteAdmissionTypeUsingDELETERequest {\n    id: number;\n}\n\nexport interface GetAdmissionsUsingGETRequest {\n    id: number;\n}\n\nexport interface GetAdmittedPatientsUsingGETRequest {\n    admissionrange?: string;\n    dischargerange?: string;\n    searchterms?: string;\n}\n\nexport interface GetCurrentAdmissionUsingGETRequest {\n    patientcode: number;\n}\n\nexport interface GetNextYProgUsingGETRequest {\n    wardcode: string;\n}\n\nexport interface GetPatientAdmissionsUsingGETRequest {\n    patientcode: number;\n}\n\nexport interface GetUsedWardBedUsingGETRequest {\n    wardid: string;\n}\n\nexport interface NewAdmissionsUsingPOSTRequest {\n    newAdmissionDTO: AdmissionDTO;\n}\n\nexport interface UpdateAdmissionsUsingPUTRequest {\n    updAdmissionDTO: AdmissionDTO;\n}\n\n/**\n * no description\n */\nexport class AdmissionControllerApi extends BaseAPI {\n\n    /**\n     * deleteAdmissionType\n     */\n    deleteAdmissionTypeUsingDELETE({ id }: DeleteAdmissionTypeUsingDELETERequest): Observable<boolean>\n    deleteAdmissionTypeUsingDELETE({ id }: DeleteAdmissionTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deleteAdmissionTypeUsingDELETE({ id }: DeleteAdmissionTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(id, 'id', 'deleteAdmissionTypeUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/admissions/{id}'.replace('{id}', encodeURI(id)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getAdmissions\n     */\n    getAdmissionsUsingGET({ id }: GetAdmissionsUsingGETRequest): Observable<AdmissionDTO>\n    getAdmissionsUsingGET({ id }: GetAdmissionsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AdmissionDTO>>\n    getAdmissionsUsingGET({ id }: GetAdmissionsUsingGETRequest, opts?: OperationOpts): Observable<AdmissionDTO | RawAjaxResponse<AdmissionDTO>> {\n        throwIfNullOrUndefined(id, 'id', 'getAdmissionsUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<AdmissionDTO>({\n            url: '/admissions/{id}'.replace('{id}', encodeURI(id)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getAdmittedPatients\n     */\n    getAdmittedPatientsUsingGET({ admissionrange, dischargerange, searchterms }: GetAdmittedPatientsUsingGETRequest): Observable<Array<AdmittedPatientDTO>>\n    getAdmittedPatientsUsingGET({ admissionrange, dischargerange, searchterms }: GetAdmittedPatientsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<AdmittedPatientDTO>>>\n    getAdmittedPatientsUsingGET({ admissionrange, dischargerange, searchterms }: GetAdmittedPatientsUsingGETRequest, opts?: OperationOpts): Observable<Array<AdmittedPatientDTO> | RawAjaxResponse<Array<AdmittedPatientDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (admissionrange != null) { query['admissionrange'] = admissionrange; }\n        if (dischargerange != null) { query['dischargerange'] = dischargerange; }\n        if (searchterms != null) { query['searchterms'] = searchterms; }\n\n        return this.request<Array<AdmittedPatientDTO>>({\n            url: '/admissions/admittedPatients',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getCurrentAdmission\n     */\n    getCurrentAdmissionUsingGET({ patientcode }: GetCurrentAdmissionUsingGETRequest): Observable<AdmissionDTO>\n    getCurrentAdmissionUsingGET({ patientcode }: GetCurrentAdmissionUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AdmissionDTO>>\n    getCurrentAdmissionUsingGET({ patientcode }: GetCurrentAdmissionUsingGETRequest, opts?: OperationOpts): Observable<AdmissionDTO | RawAjaxResponse<AdmissionDTO>> {\n        throwIfNullOrUndefined(patientcode, 'patientcode', 'getCurrentAdmissionUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'patientcode': patientcode,\n        };\n\n        return this.request<AdmissionDTO>({\n            url: '/admissions/current',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getNextYProg\n     */\n    getNextYProgUsingGET({ wardcode }: GetNextYProgUsingGETRequest): Observable<number>\n    getNextYProgUsingGET({ wardcode }: GetNextYProgUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    getNextYProgUsingGET({ wardcode }: GetNextYProgUsingGETRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(wardcode, 'wardcode', 'getNextYProgUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'wardcode': wardcode,\n        };\n\n        return this.request<number>({\n            url: '/admissions/getNextProgressiveIdInYear',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getPatientAdmissions\n     */\n    getPatientAdmissionsUsingGET({ patientcode }: GetPatientAdmissionsUsingGETRequest): Observable<Array<AdmissionDTO>>\n    getPatientAdmissionsUsingGET({ patientcode }: GetPatientAdmissionsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<AdmissionDTO>>>\n    getPatientAdmissionsUsingGET({ patientcode }: GetPatientAdmissionsUsingGETRequest, opts?: OperationOpts): Observable<Array<AdmissionDTO> | RawAjaxResponse<Array<AdmissionDTO>>> {\n        throwIfNullOrUndefined(patientcode, 'patientcode', 'getPatientAdmissionsUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'patientcode': patientcode,\n        };\n\n        return this.request<Array<AdmissionDTO>>({\n            url: '/admissions',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getUsedWardBed\n     */\n    getUsedWardBedUsingGET({ wardid }: GetUsedWardBedUsingGETRequest): Observable<number>\n    getUsedWardBedUsingGET({ wardid }: GetUsedWardBedUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    getUsedWardBedUsingGET({ wardid }: GetUsedWardBedUsingGETRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(wardid, 'wardid', 'getUsedWardBedUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'wardid': wardid,\n        };\n\n        return this.request<number>({\n            url: '/admissions/getBedsOccupationInWard',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newAdmissions\n     */\n    newAdmissionsUsingPOST({ newAdmissionDTO }: NewAdmissionsUsingPOSTRequest): Observable<number>\n    newAdmissionsUsingPOST({ newAdmissionDTO }: NewAdmissionsUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    newAdmissionsUsingPOST({ newAdmissionDTO }: NewAdmissionsUsingPOSTRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(newAdmissionDTO, 'newAdmissionDTO', 'newAdmissionsUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<number>({\n            url: '/admissions',\n            method: 'POST',\n            headers,\n            body: newAdmissionDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateAdmissions\n     */\n    updateAdmissionsUsingPUT({ updAdmissionDTO }: UpdateAdmissionsUsingPUTRequest): Observable<number>\n    updateAdmissionsUsingPUT({ updAdmissionDTO }: UpdateAdmissionsUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    updateAdmissionsUsingPUT({ updAdmissionDTO }: UpdateAdmissionsUsingPUTRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(updAdmissionDTO, 'updAdmissionDTO', 'updateAdmissionsUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<number>({\n            url: '/admissions',\n            method: 'PUT',\n            headers,\n            body: updAdmissionDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}