{"ast":null,"code":"import { of, concat } from \"rxjs\";\nimport { map, catchError, toArray } from \"rxjs/operators\";\nimport { Configuration, ExaminationControllerApi, OpdControllerApi, TherapyControllerApi, VisitsControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { convertToSummaryData } from \"../../libraries/reduxUtils/convert\";\nimport { GET_SUMMARY_FAIL, GET_SUMMARY_LOADING, GET_SUMMARY_SUCCESS, SummaryField } from \"./consts\";\nconst therapyControllerApi = new TherapyControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nconst opdControllerrApi = new OpdControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nconst visitsControllerApi = new VisitsControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nconst examinationControllerApi = new ExaminationControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const loadSummaryData = code => dispatch => {\n  dispatch({\n    type: GET_SUMMARY_LOADING\n  });\n  if (code) concat(examinationControllerApi.getByPatientIdUsingGET({\n    patId: code\n  }).pipe(map(res => convertToSummaryData(res, SummaryField.triage)), catchError(err => of([]))), opdControllerrApi.getOpdByPatientUsingGET({\n    pcode: code\n  }).pipe(map(res => convertToSummaryData(res, SummaryField.opd)), catchError(err => of([]))), therapyControllerApi.getTherapyRowsUsingGET({\n    codePatient: code\n  }).pipe(map(res => convertToSummaryData(res, SummaryField.therapy)), catchError(err => of([]))), visitsControllerApi.getVisitUsingGET({\n    patID: code\n  }).pipe(map(res => convertToSummaryData(res, SummaryField.visit)), catchError(err => of([])))).pipe(toArray()).subscribe(([triages, opds, therapies, visits]) => {\n    dispatch({\n      type: GET_SUMMARY_SUCCESS,\n      payload: [...triages, ...opds, ...therapies, ...visits]\n    });\n  }, error => {\n    dispatch({\n      type: GET_SUMMARY_FAIL,\n      error\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/summary/actions.ts"],"names":["of","concat","map","catchError","toArray","Configuration","ExaminationControllerApi","OpdControllerApi","TherapyControllerApi","VisitsControllerApi","applyTokenMiddleware","convertToSummaryData","GET_SUMMARY_FAIL","GET_SUMMARY_LOADING","GET_SUMMARY_SUCCESS","SummaryField","therapyControllerApi","middleware","opdControllerrApi","visitsControllerApi","examinationControllerApi","loadSummaryData","code","dispatch","type","getByPatientIdUsingGET","patId","pipe","res","triage","err","getOpdByPatientUsingGET","pcode","opd","getTherapyRowsUsingGET","codePatient","therapy","getVisitUsingGET","patID","visit","subscribe","triages","opds","therapies","visits","payload","error"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\";\nimport { of, concat } from \"rxjs\";\nimport { map, catchError, toArray } from \"rxjs/operators\";\nimport {\n  Configuration,\n  ExaminationControllerApi,\n  OpdControllerApi,\n  TherapyControllerApi,\n  VisitsControllerApi,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { convertToSummaryData } from \"../../libraries/reduxUtils/convert\";\nimport { IAction } from \"../types\";\nimport {\n  GET_SUMMARY_FAIL,\n  GET_SUMMARY_LOADING,\n  GET_SUMMARY_SUCCESS,\n  SummaryField,\n} from \"./consts\";\n\nconst therapyControllerApi = new TherapyControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\nconst opdControllerrApi = new OpdControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\nconst visitsControllerApi = new VisitsControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nconst examinationControllerApi = new ExaminationControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const loadSummaryData =\n  (code: number) =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: GET_SUMMARY_LOADING,\n    });\n    if (code)\n      concat(\n        examinationControllerApi.getByPatientIdUsingGET({ patId: code }).pipe(\n          map((res) => convertToSummaryData(res, SummaryField.triage)),\n          catchError((err) => of([]))\n        ),\n        opdControllerrApi.getOpdByPatientUsingGET({ pcode: code }).pipe(\n          map((res) => convertToSummaryData(res, SummaryField.opd)),\n          catchError((err) => of([]))\n        ),\n        therapyControllerApi.getTherapyRowsUsingGET({ codePatient: code }).pipe(\n          map((res) => convertToSummaryData(res, SummaryField.therapy)),\n          catchError((err) => of([]))\n        ),\n        visitsControllerApi.getVisitUsingGET({ patID: code }).pipe(\n          map((res) => convertToSummaryData(res, SummaryField.visit)),\n          catchError((err) => of([]))\n        )\n      )\n        .pipe(toArray())\n        .subscribe(\n          ([triages, opds, therapies, visits]) => {\n            dispatch({\n              type: GET_SUMMARY_SUCCESS,\n              payload: [...triages, ...opds, ...therapies, ...visits],\n            });\n          },\n          (error) => {\n            dispatch({\n              type: GET_SUMMARY_FAIL,\n              error,\n            });\n          }\n        );\n  };\n"]},"metadata":{},"sourceType":"module"}