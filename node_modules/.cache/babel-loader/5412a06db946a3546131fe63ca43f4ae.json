{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport \"./styles.scss\";\n\nconst NewBillActivity = ({\n  userCredentials,\n  createBill,\n  createBillReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n  billHomeRoute\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.billing\")]: \"/billing\",\n    [t(\"nav.newbill\")]: \"/bills\"\n  };\n\n  const onSubmit = bill => {\n    createBill(bill);\n  };\n\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  useEffect(() => {\n    if (activityTransitionState === \"TO_NEW_BILL_RESET\" || activityTransitionState === \"TO_BILL_HOME\") {\n      createBillReset();\n      setShouldResetForm(true);\n    }\n  }, [activityTransitionState, createBillReset]);\n  const infoBoxRef = useRef(null);\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  switch (activityTransitionState) {\n    case \"TO_BILL_HOME\":\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: dashboardRoute,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 20\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AppHeader, {\n        userCredentials: userCredentials,\n        breadcrumbMap: breadcrumbMap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient__background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }, t(\"nav.newpatient\")), /*#__PURE__*/React.createElement(PatientDataForm, {\n        fields: initialFields,\n        onSubmit: onSubmit,\n        submitButtonLabel: t(\"common.submit\"),\n        resetButtonLabel: t(\"common.clearall\"),\n        isLoading: isLoading,\n        shouldResetForm: shouldResetForm,\n        resetFormCallback: resetFormCallback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        ref: infoBoxRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, hasFailed && /*#__PURE__*/React.createElement(InfoBox, {\n        type: \"error\",\n        message: t(\"common.somethingwrong\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        isOpen: hasSucceeded,\n        title: \"Patient Created\",\n        icon: checkIcon,\n        info: t(\"common.patientregistrationsuccessfull\"),\n        primaryButtonLabel: t(\"common.dashboard\"),\n        secondaryButtonLabel: t(\"common.keepediting\"),\n        handlePrimaryButtonClick: () => setActivityTransitionState(\"TO_DASHBOARD\"),\n        handleSecondaryButtonClick: () => setActivityTransitionState(\"TO_NEW_PATIENT_RESET\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }));\n  }\n};\n\nexport default NewBillActivity;","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx"],"names":["React","useEffect","useRef","useState","AppHeader","Footer","useTranslation","Redirect","scrollToElement","NewBillActivity","userCredentials","createBill","createBillReset","isLoading","hasSucceeded","hasFailed","billHomeRoute","t","breadcrumbMap","onSubmit","bill","activityTransitionState","setActivityTransitionState","setShouldResetForm","infoBoxRef","current","shouldResetForm","resetFormCallback","dashboardRoute","initialFields","checkIcon"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { IState } from \"../../../types\";\nimport { useFormik } from \"formik\";\nimport { TextField } from '@material-ui/core';\nimport { BillDTO } from \"../../../generated\";\nimport { FullBillDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport \"./styles.scss\";\nimport {\n    createBill,\n    createBillReset,\n} from \"../../../state/bills/actions\";\nimport {\n    IDispatchProps,\n    IStateProps,\n    TActivityTransitionState,\n    TProps,\n} from \"./types\";\n\n\n\nconst NewBillActivity: FunctionComponent<TProps> = ({\n    userCredentials,\n    createBill,\n    createBillReset,\n    isLoading,\n    hasSucceeded,\n    hasFailed,\n    billHomeRoute,\n}) => {\n    const { t } = useTranslation();\n\n    const breadcrumbMap = {\n        [t(\"nav.dashboard\")]: \"/\",\n        [t(\"nav.billing\")]: \"/billing\",\n        [t(\"nav.newbill\")]: \"/bills\",\n    };\n\n    const onSubmit = (bill: FullBillDTO) => {\n        createBill(bill);\n    };\n\n    const [activityTransitionState, setActivityTransitionState] =\n        useState<TActivityTransitionState>(\"IDLE\");\n\n    useEffect(() => {\n        if (\n            activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n            activityTransitionState === \"TO_BILL_HOME\"\n        ) {\n            createBillReset();\n            setShouldResetForm(true);\n        }\n    }, [activityTransitionState, createBillReset]);\n\n\n    const infoBoxRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (hasFailed) {\n            scrollToElement(infoBoxRef.current);\n        }\n    }, [hasFailed]);\n\n    const [shouldResetForm, setShouldResetForm] = useState(false);\n\n    const resetFormCallback = () => {\n        setShouldResetForm(false);\n        setActivityTransitionState(\"IDLE\");\n        scrollToElement(null);\n    };\n\n    switch (activityTransitionState) {\n        case \"TO_BILL_HOME\":\n            return <Redirect to={dashboardRoute} />;\n        default:\n            return (\n                <div className=\"newPatient\">\n                    <AppHeader\n                        userCredentials={userCredentials}\n                        breadcrumbMap={breadcrumbMap}\n                    />\n                    <div className=\"newPatient__background\">\n                        <div className=\"newPatient__content\">\n                            <div className=\"newPatient__title\">{t(\"nav.newpatient\")}</div>\n                            <PatientDataForm\n                                fields={initialFields}\n                                onSubmit={onSubmit}\n                                submitButtonLabel={t(\"common.submit\")}\n                                resetButtonLabel={t(\"common.clearall\")}\n                                isLoading={isLoading}\n                                shouldResetForm={shouldResetForm}\n                                resetFormCallback={resetFormCallback}\n                            />\n                        </div>\n                    </div>\n                    <div ref={infoBoxRef}>\n                        {hasFailed && (\n                            <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />\n                        )}\n                    </div>\n                    <ConfirmationDialog\n                        isOpen={hasSucceeded}\n                        title=\"Patient Created\"\n                        icon={checkIcon}\n                        info={t(\"common.patientregistrationsuccessfull\")}\n                        primaryButtonLabel={t(\"common.dashboard\")}\n                        secondaryButtonLabel={t(\"common.keepediting\")}\n                        handlePrimaryButtonClick={() =>\n                            setActivityTransitionState(\"TO_DASHBOARD\")\n                        }\n                        handleSecondaryButtonClick={() =>\n                            setActivityTransitionState(\"TO_NEW_PATIENT_RESET\")\n                        }\n                    />\n                    <Footer />\n                </div>\n            );\n    }\n}\n\nexport default NewBillActivity;"]},"metadata":{},"sourceType":"module"}