{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/searchPatientActivity/SearchPatientActivity.tsx\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport React, { useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { object } from \"yup\";\nimport SearchIcon from \"../../../assets/SearchIcon\";\nimport { searchPatient, getPatientSuccess } from \"../../../state/patients/actions\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport InfoBox from \"../../accessories/infoBox/InfoBox\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport PatientSearchItem from \"./PatientSearchItem\";\nimport \"./styles.scss\";\nimport { useIsSearchById } from \"./useIsSearchById\";\n\nconst SearchPatientActivity = ({\n  userCredentials,\n  patientSearchResults,\n  searchPatient,\n  searchStatus,\n  getPatientSuccess\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.searchpatient\")]: \"/search\"\n  };\n  const resultsRef = useRef(null);\n  const initialValues = {\n    id: \"\",\n    firstName: \"\",\n    secondName: \"\",\n    birthDate: \"\",\n    address: \"\"\n  };\n  const validationSchema = object({//TODO: write schema\n  });\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: values => {\n      // First scroll to show searching message\n      searchPatient(values);\n    }\n  });\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n  /*useEffect(() => {\n    if (searchStatus === \"SUCCESS\" || searchStatus === \"SUCCESS_EMPTY\") {\n      // Second scroll to show results\n    }\n  }, [searchStatus]);*/\n\n\n  const isSearchById = useIsSearchById(formik);\n\n  const renderSearchResults = () => {\n    switch (searchStatus) {\n      case \"IDLE\":\n        return;\n\n      case \"LOADING\":\n        return /*#__PURE__*/React.createElement(\"h3\", {\n          className: \"searchPatient__loading\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }\n        }, t(\"common.searching\"));\n\n      case \"SUCCESS\":\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results_count\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }\n        }, t(\"common.results\"), \":\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }\n        }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.length)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"searchPatient__results_list\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }\n        }, patientSearchResults === null || patientSearchResults === void 0 ? void 0 : patientSearchResults.map((patient, index) => /*#__PURE__*/React.createElement(PatientSearchItem, {\n          key: index,\n          patient: patient,\n          getPatientSuccessCallback: getPatientSuccess,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        }))));\n\n      case \"SUCCESS_EMPTY\":\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"warning\",\n          message: t(\"common.searchnotfound\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(InfoBox, {\n          type: \"error\",\n          message: t(\"common.somethingwrong\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppHeader, {\n    userCredentials: userCredentials,\n    breadcrumbMap: breadcrumbMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, t(\"nav.searchpatient\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"searchPatient__panel\",\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    theme: \"light\",\n    field: formik.getFieldProps(\"id\"),\n    label: t(\"patient.patientID\"),\n    isValid: isValid(\"id\"),\n    errorText: getErrorText(\"id\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__buttonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"searchPatient__button\",\n    type: \"submit\",\n    disabled: searchStatus === \"LOADING\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    width: \"20\",\n    height: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__button__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, t(\"common.search\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, t(\"common.searchpatientinstruction\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"firstName\"),\n    theme: \"regular\",\n    label: t(\"patient.firstname\"),\n    isValid: isValid(\"firstName\"),\n    errorText: getErrorText(\"firstName\"),\n    onBlur: formik.handleBlur,\n    disabled: isSearchById,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"secondName\"),\n    theme: \"regular\",\n    label: t(\"patient.secondname\"),\n    isValid: isValid(\"secondName\"),\n    errorText: getErrorText(\"secondName\"),\n    onBlur: formik.handleBlur,\n    disabled: isSearchById,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"birthDate\"),\n    theme: \"regular\",\n    label: t(\"patient.birthdate\"),\n    isValid: isValid(\"birthDate\"),\n    errorText: getErrorText(\"birthDate\"),\n    onBlur: formik.handleBlur,\n    disabled: isSearchById,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchPatient__formItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"address\"),\n    theme: \"regular\",\n    label: t(\"patient.address\"),\n    isValid: isValid(\"address\"),\n    errorText: getErrorText(\"address\"),\n    onBlur: formik.handleBlur,\n    disabled: isSearchById,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 19\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: resultsRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, renderSearchResults()))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  patientSearchResults: state.patients.searchResults.data,\n  searchStatus: state.patients.searchResults.status || \"IDLE\"\n});\n\nconst mapDispatchToProps = {\n  searchPatient,\n  getPatientSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPatientActivity);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/searchPatientActivity/SearchPatientActivity.tsx"],"names":["Button","useFormik","get","has","React","useRef","useTranslation","connect","object","SearchIcon","searchPatient","getPatientSuccess","AppHeader","Footer","InfoBox","TextField","PatientSearchItem","useIsSearchById","SearchPatientActivity","userCredentials","patientSearchResults","searchStatus","t","breadcrumbMap","resultsRef","initialValues","id","firstName","secondName","birthDate","address","validationSchema","formik","onSubmit","values","isValid","fieldName","touched","errors","getErrorText","isSearchById","renderSearchResults","length","map","patient","index","handleSubmit","getFieldProps","handleBlur","mapStateToProps","state","main","authentication","data","patients","searchResults","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { object } from \"yup\";\nimport SearchIcon from \"../../../assets/SearchIcon\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport {\n  searchPatient,\n  getPatientSuccess,\n} from \"../../../state/patients/actions\";\nimport { IState } from \"../../../types\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport InfoBox from \"../../accessories/infoBox/InfoBox\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport PatientSearchItem from \"./PatientSearchItem\";\nimport \"./styles.scss\";\nimport { IDispatchProps, IStateProps, TValues, TProps } from \"./types\";\nimport { useIsSearchById } from \"./useIsSearchById\";\n\nconst SearchPatientActivity: FunctionComponent<TProps> = ({\n  userCredentials,\n  patientSearchResults,\n  searchPatient,\n  searchStatus,\n  getPatientSuccess,\n}) => {\n  const { t } = useTranslation();\n\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.searchpatient\")]: \"/search\",\n  };\n\n  const resultsRef = useRef<HTMLDivElement>(null);\n\n  const initialValues: TValues = {\n    id: \"\",\n    firstName: \"\",\n    secondName: \"\",\n    birthDate: \"\",\n    address: \"\",\n  };\n\n  const validationSchema = object({\n    //TODO: write schema\n  });\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: (values: TValues) => {\n      // First scroll to show searching message\n\n      searchPatient(values);\n    },\n  });\n\n  const isValid = (fieldName: string): boolean => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = (fieldName: string): string => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  /*useEffect(() => {\n    if (searchStatus === \"SUCCESS\" || searchStatus === \"SUCCESS_EMPTY\") {\n      // Second scroll to show results\n    }\n  }, [searchStatus]);*/\n\n  const isSearchById = useIsSearchById(formik);\n\n  const renderSearchResults = (): JSX.Element | undefined => {\n    switch (searchStatus) {\n      case \"IDLE\":\n        return;\n\n      case \"LOADING\":\n        return (\n          <h3 className=\"searchPatient__loading\">{t(\"common.searching\")}</h3>\n        );\n\n      case \"SUCCESS\":\n        return (\n          <div className=\"searchPatient__results\">\n            <div className=\"searchPatient__results_count\">\n              {t(\"common.results\")}:{\" \"}\n              <strong>{patientSearchResults?.length}</strong>\n            </div>\n            <div className=\"searchPatient__results_list\">\n              {patientSearchResults?.map((patient, index) => (\n                <PatientSearchItem\n                  key={index}\n                  patient={patient}\n                  getPatientSuccessCallback={getPatientSuccess}\n                />\n              ))}\n            </div>\n          </div>\n        );\n\n      case \"SUCCESS_EMPTY\":\n        return <InfoBox type=\"warning\" message={t(\"common.searchnotfound\")} />;\n\n      default:\n        return <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />;\n    }\n  };\n\n  return (\n    <div className=\"searchPatient\">\n      <AppHeader\n        userCredentials={userCredentials}\n        breadcrumbMap={breadcrumbMap}\n      />\n      <div className=\"searchPatient__background\">\n        <div className=\"container\">\n          <div className=\"searchPatient__title\">{t(\"nav.searchpatient\")}</div>\n          <form className=\"searchPatient__panel\" onSubmit={formik.handleSubmit}>\n            <div className=\"searchPatient__primary\">\n              <div className=\"row center-xs\">\n                <div className=\"searchPatient__formItem\">\n                  <TextField\n                    theme=\"light\"\n                    field={formik.getFieldProps(\"id\")}\n                    label={t(\"patient.patientID\")}\n                    isValid={isValid(\"id\")}\n                    errorText={getErrorText(\"id\")}\n                    onBlur={formik.handleBlur}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"searchPatient__buttonContainer\">\n              <Button\n                className=\"searchPatient__button\"\n                type=\"submit\"\n                disabled={searchStatus === \"LOADING\"}\n              >\n                <SearchIcon width=\"20\" height=\"20\" />\n                <div className=\"searchPatient__button__label\">\n                  {t(\"common.search\")}\n                </div>\n              </Button>\n            </div>\n            <div className=\"searchPatient__secondary\">\n              <div className=\"searchPatient__info\">\n                {t(\"common.searchpatientinstruction\")}\n              </div>\n              <div className=\"row center-xs\">\n                <div className=\"searchPatient__formItem\">\n                  <TextField\n                    field={formik.getFieldProps(\"firstName\")}\n                    theme=\"regular\"\n                    label={t(\"patient.firstname\")}\n                    isValid={isValid(\"firstName\")}\n                    errorText={getErrorText(\"firstName\")}\n                    onBlur={formik.handleBlur}\n                    disabled={isSearchById}\n                  />\n                </div>\n                <div className=\"searchPatient__formItem\">\n                  <TextField\n                    field={formik.getFieldProps(\"secondName\")}\n                    theme=\"regular\"\n                    label={t(\"patient.secondname\")}\n                    isValid={isValid(\"secondName\")}\n                    errorText={getErrorText(\"secondName\")}\n                    onBlur={formik.handleBlur}\n                    disabled={isSearchById}\n                  />\n                </div>\n              </div>\n              <div className=\"row center-xs\">\n                <div className=\"searchPatient__formItem\">\n                  <TextField\n                    field={formik.getFieldProps(\"birthDate\")}\n                    theme=\"regular\"\n                    label={t(\"patient.birthdate\")}\n                    isValid={isValid(\"birthDate\")}\n                    errorText={getErrorText(\"birthDate\")}\n                    onBlur={formik.handleBlur}\n                    disabled={isSearchById}\n                  />\n                </div>\n                <div className=\"searchPatient__formItem\">\n                  <TextField\n                    field={formik.getFieldProps(\"address\")}\n                    theme=\"regular\"\n                    label={t(\"patient.address\")}\n                    isValid={isValid(\"address\")}\n                    errorText={getErrorText(\"address\")}\n                    onBlur={formik.handleBlur}\n                    disabled={isSearchById}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n          <div ref={resultsRef}>{renderSearchResults()}</div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  userCredentials: state.main.authentication.data,\n  patientSearchResults: state.patients.searchResults.data,\n  searchStatus: state.patients.searchResults.status || \"IDLE\",\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  searchPatient,\n  getPatientSuccess,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchPatientActivity);\n"]},"metadata":{},"sourceType":"module"}