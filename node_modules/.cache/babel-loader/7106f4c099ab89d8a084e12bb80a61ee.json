{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTriage/PatientTriage.tsx\";\nimport { default as React, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect, useSelector } from \"react-redux\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { createExamination, createExaminationReset } from \"../../../state/examinations/actions\";\nimport ConfirmationDialog from \"../confirmationDialog/ConfirmationDialog\";\nimport InfoBox from \"../infoBox/InfoBox\";\nimport { initialFields } from \"./consts\";\nimport PatientTriageForm from \"./patientTriageForm/PatientTriageForm\";\nimport PatientTriageTable from \"./patientTriageTable/PatientTriageTable\";\nimport \"./styles.scss\";\n\nconst PatientTriage = ({\n  createExamination,\n  createExaminationReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const infoBoxRef = useRef(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [shouldUpdateTable, setShouldUpdateTable] = useState(false);\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const patientDataCode = useSelector(state => {\n    var _state$patients$selec;\n\n    return (_state$patients$selec = state.patients.selectedPatient.data) === null || _state$patients$selec === void 0 ? void 0 : _state$patients$selec.code;\n  });\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  useEffect(() => {\n    if (activityTransitionState === \"TO_RESET\") {\n      createExaminationReset();\n      setShouldResetForm(true);\n      setShouldUpdateTable(true);\n    }\n  }, [activityTransitionState, createExaminationReset]);\n\n  const onSubmit = triage => {\n    setShouldResetForm(false);\n    triage.patientCode = patientDataCode;\n    createExamination(triage);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setShouldUpdateTable(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTriage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PatientTriageForm, {\n    fields: initialFields,\n    onSubmit: onSubmit,\n    submitButtonLabel: t(\"common.savetriage\"),\n    resetButtonLabel: t(\"common.discard\"),\n    shouldResetForm: shouldResetForm,\n    resetFormCallback: resetFormCallback,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: infoBoxRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, hasFailed && /*#__PURE__*/React.createElement(InfoBox, {\n    type: \"error\",\n    message: \"Something went wrong, please retry later.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: hasSucceeded,\n    title: \"Patient Created\",\n    icon: checkIcon,\n    info: \"The examination registration was successful.\",\n    primaryButtonLabel: \"Ok\",\n    handlePrimaryButtonClick: () => setActivityTransitionState(\"TO_RESET\"),\n    handleSecondaryButtonClick: () => ({}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PatientTriageTable, {\n    shouldUpdateTable: shouldUpdateTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.examinations.createExamination.status === \"LOADING\",\n  hasSucceeded: state.examinations.createExamination.status === \"SUCCESS\",\n  hasFailed: state.examinations.createExamination.status === \"FAIL\"\n});\n\nconst mapDispatchToProps = {\n  createExamination,\n  createExaminationReset\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientTriage);","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTriage/PatientTriage.tsx"],"names":["default","React","useEffect","useRef","useState","useTranslation","connect","useSelector","checkIcon","scrollToElement","createExamination","createExaminationReset","ConfirmationDialog","InfoBox","initialFields","PatientTriageForm","PatientTriageTable","PatientTriage","isLoading","hasSucceeded","hasFailed","t","infoBoxRef","shouldResetForm","setShouldResetForm","shouldUpdateTable","setShouldUpdateTable","activityTransitionState","setActivityTransitionState","patientDataCode","state","patients","selectedPatient","data","code","current","onSubmit","triage","patientCode","resetFormCallback","mapStateToProps","examinations","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import {\n  default as React,\n  FunctionComponent,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect, useSelector } from \"react-redux\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport { PatientExaminationDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport {\n  createExamination,\n  createExaminationReset,\n} from \"../../../state/examinations/actions\";\nimport { IState } from \"../../../types\";\nimport ConfirmationDialog from \"../confirmationDialog/ConfirmationDialog\";\nimport InfoBox from \"../infoBox/InfoBox\";\nimport { initialFields } from \"./consts\";\nimport PatientTriageForm from \"./patientTriageForm/PatientTriageForm\";\nimport PatientTriageTable from \"./patientTriageTable/PatientTriageTable\";\nimport \"./styles.scss\";\nimport {\n  IDispatchProps,\n  IStateProps,\n  TActivityTransitionState,\n  TProps,\n} from \"./types\";\n\nconst PatientTriage: FunctionComponent<TProps> = ({\n  createExamination,\n  createExaminationReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n}) => {\n  const { t } = useTranslation();\n  const infoBoxRef = useRef<HTMLDivElement>(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [shouldUpdateTable, setShouldUpdateTable] = useState(false);\n  const [activityTransitionState, setActivityTransitionState] =\n    useState<TActivityTransitionState>(\"IDLE\");\n\n  const patientDataCode = useSelector(\n    (state: IState) => state.patients.selectedPatient.data?.code\n  );\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n\n  useEffect(() => {\n    if (activityTransitionState === \"TO_RESET\") {\n      createExaminationReset();\n      setShouldResetForm(true);\n      setShouldUpdateTable(true);\n    }\n  }, [activityTransitionState, createExaminationReset]);\n\n  const onSubmit = (triage: PatientExaminationDTO) => {\n    setShouldResetForm(false);\n    triage.patientCode = patientDataCode;\n    createExamination(triage);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setShouldUpdateTable(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  return (\n    <div className=\"patientTriage\">\n      <PatientTriageForm\n        fields={initialFields}\n        onSubmit={onSubmit}\n        submitButtonLabel={t(\"common.savetriage\")}\n        resetButtonLabel={t(\"common.discard\")}\n        shouldResetForm={shouldResetForm}\n        resetFormCallback={resetFormCallback}\n        isLoading={isLoading}\n      />\n      <div ref={infoBoxRef}>\n        {hasFailed && (\n          <InfoBox\n            type=\"error\"\n            message=\"Something went wrong, please retry later.\"\n          />\n        )}\n      </div>\n      <ConfirmationDialog\n        isOpen={hasSucceeded}\n        title=\"Patient Created\"\n        icon={checkIcon}\n        info=\"The examination registration was successful.\"\n        primaryButtonLabel=\"Ok\"\n        handlePrimaryButtonClick={() => setActivityTransitionState(\"TO_RESET\")}\n        handleSecondaryButtonClick={() => ({})}\n      />\n      <PatientTriageTable shouldUpdateTable={shouldUpdateTable} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  isLoading: state.examinations.createExamination.status === \"LOADING\",\n  hasSucceeded: state.examinations.createExamination.status === \"SUCCESS\",\n  hasFailed: state.examinations.createExamination.status === \"FAIL\",\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  createExamination,\n  createExaminationReset,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientTriage);\n"]},"metadata":{},"sourceType":"module"}