{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class MedicalTypeControllerApi extends BaseAPI {\n  /**\n   * createMedicalType\n   */\n  createMedicalTypeUsingPOST({\n    medicalTypeDTO\n  }, opts) {\n    throwIfNullOrUndefined(medicalTypeDTO, 'medicalTypeDTO', 'createMedicalTypeUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicaltypes',\n      method: 'POST',\n      headers,\n      body: medicalTypeDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  deleteMedicalTypeUsingDELETE({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'deleteMedicalTypeUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicaltypes/{code}'.replace('{code}', encodeURI(code)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMedicalTypesUsingGET(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicaltypes',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  isCodeUsedUsingGET1({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'isCodeUsedUsingGET1');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicaltypes/check/{code}'.replace('{code}', encodeURI(code)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateMedicalTypeUsingPUT({\n    medicalTypeDTO\n  }, opts) {\n    throwIfNullOrUndefined(medicalTypeDTO, 'medicalTypeDTO', 'updateMedicalTypeUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicaltypes',\n      method: 'PUT',\n      headers,\n      body: medicalTypeDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/generated/apis/MedicalTypeControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","MedicalTypeControllerApi","createMedicalTypeUsingPOST","medicalTypeDTO","opts","headers","configuration","apiKey","request","url","method","body","responseOpts","deleteMedicalTypeUsingDELETE","code","replace","getMedicalTypesUsingGET","isCodeUsedUsingGET1","updateMedicalTypeUsingPUT"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    MedicalTypeDTO,\n} from '../models';\n\nexport interface CreateMedicalTypeUsingPOSTRequest {\n    medicalTypeDTO: MedicalTypeDTO;\n}\n\nexport interface DeleteMedicalTypeUsingDELETERequest {\n    code: string;\n}\n\nexport interface IsCodeUsedUsingGET1Request {\n    code: string;\n}\n\nexport interface UpdateMedicalTypeUsingPUTRequest {\n    medicalTypeDTO: MedicalTypeDTO;\n}\n\n/**\n * no description\n */\nexport class MedicalTypeControllerApi extends BaseAPI {\n\n    /**\n     * createMedicalType\n     */\n    createMedicalTypeUsingPOST({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest): Observable<void>\n    createMedicalTypeUsingPOST({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>\n    createMedicalTypeUsingPOST({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {\n        throwIfNullOrUndefined(medicalTypeDTO, 'medicalTypeDTO', 'createMedicalTypeUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<void>({\n            url: '/medicaltypes',\n            method: 'POST',\n            headers,\n            body: medicalTypeDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * deleteMedicalType\n     */\n    deleteMedicalTypeUsingDELETE({ code }: DeleteMedicalTypeUsingDELETERequest): Observable<boolean>\n    deleteMedicalTypeUsingDELETE({ code }: DeleteMedicalTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deleteMedicalTypeUsingDELETE({ code }: DeleteMedicalTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(code, 'code', 'deleteMedicalTypeUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/medicaltypes/{code}'.replace('{code}', encodeURI(code)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMedicalTypes\n     */\n    getMedicalTypesUsingGET(): Observable<Array<MedicalTypeDTO>>\n    getMedicalTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MedicalTypeDTO>>>\n    getMedicalTypesUsingGET(opts?: OperationOpts): Observable<Array<MedicalTypeDTO> | RawAjaxResponse<Array<MedicalTypeDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<MedicalTypeDTO>>({\n            url: '/medicaltypes',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * isCodeUsed\n     */\n    isCodeUsedUsingGET1({ code }: IsCodeUsedUsingGET1Request): Observable<boolean>\n    isCodeUsedUsingGET1({ code }: IsCodeUsedUsingGET1Request, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    isCodeUsedUsingGET1({ code }: IsCodeUsedUsingGET1Request, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(code, 'code', 'isCodeUsedUsingGET1');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/medicaltypes/check/{code}'.replace('{code}', encodeURI(code)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateMedicalType\n     */\n    updateMedicalTypeUsingPUT({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest): Observable<void>\n    updateMedicalTypeUsingPUT({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>\n    updateMedicalTypeUsingPUT({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {\n        throwIfNullOrUndefined(medicalTypeDTO, 'medicalTypeDTO', 'updateMedicalTypeUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<void>({\n            url: '/medicaltypes',\n            method: 'PUT',\n            headers,\n            body: medicalTypeDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}