{"ast":null,"code":"import isEmpty from \"lodash.isempty\";\nimport { Configuration, GetMedicalsUsingGETSortByEnum, MedicalControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { GET_MEDICAL_FAIL, GET_MEDICAL_LOADING, GET_MEDICAL_SUCCESS } from \"./consts\";\nconst medicalControllerApi = new MedicalControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const getMedicals = () => dispatch => {\n  dispatch({\n    type: GET_MEDICAL_LOADING\n  });\n  medicalControllerApi.getMedicalsUsingGET({\n    sortBy: GetMedicalsUsingGETSortByEnum.NAME\n  }).subscribe(payload => {\n    if (typeof payload === \"object\" && !isEmpty(payload)) {\n      dispatch({\n        type: GET_MEDICAL_SUCCESS,\n        payload: payload\n      });\n    } else {\n      dispatch({\n        type: GET_MEDICAL_SUCCESS,\n        payload: []\n      });\n    }\n  }, error => {\n    dispatch({\n      type: GET_MEDICAL_FAIL,\n      error\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/medicals/actions.ts"],"names":["isEmpty","Configuration","GetMedicalsUsingGETSortByEnum","MedicalControllerApi","applyTokenMiddleware","GET_MEDICAL_FAIL","GET_MEDICAL_LOADING","GET_MEDICAL_SUCCESS","medicalControllerApi","middleware","getMedicals","dispatch","type","getMedicalsUsingGET","sortBy","NAME","subscribe","payload","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AAEA,SACEC,aADF,EAEEC,6BAFF,EAGEC,oBAHF,QAKO,iBALP;AAMA,SAASC,oBAAT,QAAqC,+CAArC;AAEA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,UAJP;AAMA,MAAMC,oBAAoB,GAAG,IAAIL,oBAAJ,CAC3B,IAAIF,aAAJ,CAAkB;AAAEQ,EAAAA,UAAU,EAAE,CAACL,oBAAD;AAAd,CAAlB,CAD2B,CAA7B;AAIA,OAAO,MAAMM,WAAW,GACtB,MACCC,QAAD,IAAyD;AACvDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEN;AADC,GAAD,CAAR;AAGAE,EAAAA,oBAAoB,CACjBK,mBADH,CACuB;AACnBC,IAAAA,MAAM,EAAEZ,6BAA6B,CAACa;AADnB,GADvB,EAIGC,SAJH,CAKKC,OAAD,IAAa;AACX,QAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACjB,OAAO,CAACiB,OAAD,CAA3C,EAAsD;AACpDN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,mBADC;AAEPU,QAAAA,OAAO,EAAEA;AAFF,OAAD,CAAR;AAID,KALD,MAKO;AACLN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,mBADC;AAEPU,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AACF,GAjBL,EAkBKC,KAAD,IAAW;AACTP,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,gBADC;AAEPa,MAAAA;AAFO,KAAD,CAAR;AAID,GAvBL;AAyBD,CA/BI","sourcesContent":["import isEmpty from \"lodash.isempty\";\nimport { Dispatch } from \"redux\";\nimport {\n  Configuration,\n  GetMedicalsUsingGETSortByEnum,\n  MedicalControllerApi,\n  MedicalDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n  GET_MEDICAL_FAIL,\n  GET_MEDICAL_LOADING,\n  GET_MEDICAL_SUCCESS,\n} from \"./consts\";\n\nconst medicalControllerApi = new MedicalControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const getMedicals =\n  () =>\n  (dispatch: Dispatch<IAction<MedicalDTO[], {}>>): void => {\n    dispatch({\n      type: GET_MEDICAL_LOADING,\n    });\n    medicalControllerApi\n      .getMedicalsUsingGET({\n        sortBy: GetMedicalsUsingGETSortByEnum.NAME,\n      })\n      .subscribe(\n        (payload) => {\n          if (typeof payload === \"object\" && !isEmpty(payload)) {\n            dispatch({\n              type: GET_MEDICAL_SUCCESS,\n              payload: payload,\n            });\n          } else {\n            dispatch({\n              type: GET_MEDICAL_SUCCESS,\n              payload: [],\n            });\n          }\n        },\n        (error) => {\n          dispatch({\n            type: GET_MEDICAL_FAIL,\n            error,\n          });\n        }\n      );\n  };\n"]},"metadata":{},"sourceType":"module"}