{"ast":null,"code":"import { Configuration, BillControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { CREATE_BILL_LOADING, CREATE_BILL_RESET } from \"./consts\";\nconst billControllerApi = new BillControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const createBill = () => dispatch => {\n  dispatch({\n    type: CREATE_BILL_LOADING,\n    ciao: 1\n  });\n};\nexport const createBillReset = () => dispatch => {\n  dispatch({\n    type: CREATE_BILL_RESET\n  });\n};\nexport const searchPatient = values => dispatch => {\n  dispatch({\n    type: SEARCH_PATIENT_LOADING\n  });\n\n  if (values.id) {\n    patientControllerApi.getPatientUsingGET({\n      code: parseInt(values.id)\n    }).subscribe(payload => {\n      if (typeof payload === \"object\" && !isEmpty(payload)) {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload: [payload]\n        });\n      } else {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload: []\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_PATIENT_FAIL,\n        error\n      });\n    });\n  } else {\n    patientControllerApi.searchPatientUsingGET(values).subscribe(payload => {\n      if (Array.isArray(payload)) {\n        dispatch({\n          type: SEARCH_PATIENT_SUCCESS,\n          payload\n        });\n      } else {\n        dispatch({\n          type: SEARCH_PATIENT_FAIL,\n          error: {\n            message: \"Unexpected response payload\"\n          }\n        });\n      }\n    }, error => {\n      dispatch({\n        type: SEARCH_PATIENT_FAIL,\n        error\n      });\n    });\n  }\n};\nexport const getPatientSuccess = patient => {\n  return {\n    type: GET_PATIENT_SUCCESS,\n    payload: patient\n  };\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/bills/actions.ts"],"names":["Configuration","BillControllerApi","applyTokenMiddleware","CREATE_BILL_LOADING","CREATE_BILL_RESET","billControllerApi","middleware","createBill","dispatch","type","ciao","createBillReset","searchPatient","values","SEARCH_PATIENT_LOADING","id","patientControllerApi","getPatientUsingGET","code","parseInt","subscribe","payload","isEmpty","SEARCH_PATIENT_SUCCESS","error","SEARCH_PATIENT_FAIL","searchPatientUsingGET","Array","isArray","message","getPatientSuccess","patient","GET_PATIENT_SUCCESS"],"mappings":"AACA,SACIA,aADJ,EAEIC,iBAFJ,QAKO,iBALP;AAMA,SAASC,oBAAT,QAAqC,+CAArC;AAEA,SAEIC,mBAFJ,EAGIC,iBAHJ,QAQO,UARP;AAUA,MAAMC,iBAAiB,GAAG,IAAIJ,iBAAJ,CACtB,IAAID,aAAJ,CAAkB;AAAEM,EAAAA,UAAU,EAAE,CAACJ,oBAAD;AAAd,CAAlB,CADsB,CAA1B;AAIA,OAAO,MAAMK,UAAU,GACnB,MACKC,QAAD,IAAiD;AAC7CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN,mBADD;AAELO,IAAAA,IAAI,EAAE;AAFD,GAAD,CAAR;AAIH,CAPF;AASP,OAAO,MAAMC,eAAe,GACxB,MACKH,QAAD,IAAiD;AAC7CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEL;AADD,GAAD,CAAR;AAGH,CANF;AAQC,OAAO,MAAMQ,aAAa,GAC/BC,MAAD,IACCL,QAAD,IAAyD;AACvDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEK;AADC,GAAD,CAAR;;AAIA,MAAID,MAAM,CAACE,EAAX,EAAe;AACbC,IAAAA,oBAAoB,CACjBC,kBADH,CACsB;AAAEC,MAAAA,IAAI,EAAEC,QAAQ,CAACN,MAAM,CAACE,EAAR;AAAhB,KADtB,EAEGK,SAFH,CAGKC,OAAD,IAAa;AACX,UAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACC,OAAO,CAACD,OAAD,CAA3C,EAAsD;AACpDb,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEc,sBADC;AAEPF,UAAAA,OAAO,EAAE,CAACA,OAAD;AAFF,SAAD,CAAR;AAID,OALD,MAKO;AACLb,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEc,sBADC;AAEPF,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KAfL,EAgBKG,KAAD,IAAW;AACThB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEgB,mBADC;AAEPD,QAAAA;AAFO,OAAD,CAAR;AAID,KArBL;AAuBD,GAxBD,MAwBO;AACLR,IAAAA,oBAAoB,CAACU,qBAArB,CAA2Cb,MAA3C,EAAmDO,SAAnD,CACGC,OAAD,IAAa;AACX,UAAIM,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAJ,EAA4B;AAC1Bb,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEc,sBADC;AAEPF,UAAAA;AAFO,SAAD,CAAR;AAID,OALD,MAKO;AACLb,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEgB,mBADC;AAEPD,UAAAA,KAAK,EAAE;AAAEK,YAAAA,OAAO,EAAE;AAAX;AAFA,SAAD,CAAR;AAID;AACF,KAbH,EAcGL,KAAD,IAAW;AACThB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEgB,mBADC;AAEPD,QAAAA;AAFO,OAAD,CAAR;AAID,KAnBH;AAqBD;AACF,CAtDY;AAwDf,OAAO,MAAMM,iBAAiB,GAC5BC,OAD+B,IAEH;AAC5B,SAAO;AACLtB,IAAAA,IAAI,EAAEuB,mBADD;AAELX,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CAPM","sourcesContent":["import { Dispatch } from \"redux\";\nimport {\n    Configuration,\n    BillControllerApi,\n    BillDTO,\n    FullBillDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n    CREATE_BILL_FAIL,\n    CREATE_BILL_LOADING,\n    CREATE_BILL_RESET,\n    CREATE_BILL_SUCCESS,\n    SEARCH_BILL_FAIL,\n    SEARCH_BILL_LOADING,\n    SEARCH_BILL_SUCCESS,\n} from \"./consts\";\n\nconst billControllerApi = new BillControllerApi(\n    new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const createBill =\n    () =>\n        (dispatch: Dispatch<IAction<null, {}>>): void => {\n            dispatch({\n                type: CREATE_BILL_LOADING,\n                ciao: 1,\n            });\n        };\n\nexport const createBillReset =\n    () =>\n        (dispatch: Dispatch<IAction<null, {}>>): void => {\n            dispatch({\n                type: CREATE_BILL_RESET,\n            });\n        };\n\n        export const searchPatient =\n  (values: TValues) =>\n  (dispatch: Dispatch<IAction<PatientDTO[], {}>>): void => {\n    dispatch({\n      type: SEARCH_PATIENT_LOADING,\n    });\n\n    if (values.id) {\n      patientControllerApi\n        .getPatientUsingGET({ code: parseInt(values.id) })\n        .subscribe(\n          (payload) => {\n            if (typeof payload === \"object\" && !isEmpty(payload)) {\n              dispatch({\n                type: SEARCH_PATIENT_SUCCESS,\n                payload: [payload],\n              });\n            } else {\n              dispatch({\n                type: SEARCH_PATIENT_SUCCESS,\n                payload: [],\n              });\n            }\n          },\n          (error) => {\n            dispatch({\n              type: SEARCH_PATIENT_FAIL,\n              error,\n            });\n          }\n        );\n    } else {\n      patientControllerApi.searchPatientUsingGET(values).subscribe(\n        (payload) => {\n          if (Array.isArray(payload)) {\n            dispatch({\n              type: SEARCH_PATIENT_SUCCESS,\n              payload,\n            });\n          } else {\n            dispatch({\n              type: SEARCH_PATIENT_FAIL,\n              error: { message: \"Unexpected response payload\" },\n            });\n          }\n        },\n        (error) => {\n          dispatch({\n            type: SEARCH_PATIENT_FAIL,\n            error,\n          });\n        }\n      );\n    }\n  };\n\nexport const getPatientSuccess = (\n  patient: PatientDTO\n): IAction<PatientDTO, {}> => {\n  return {\n    type: GET_PATIENT_SUCCESS,\n    payload: patient,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}