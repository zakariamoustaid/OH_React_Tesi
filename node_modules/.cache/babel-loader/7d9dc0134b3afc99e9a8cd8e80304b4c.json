{"ast":null,"code":"import { produce } from \"immer\";\nexport const getFromFields = (fields, fieldAddress) => {\n  return Object.keys(fields).reduce((acc, key) => {\n    acc[key] = fields[key][fieldAddress];\n    return acc;\n  }, {});\n};\n\nconst parseDate = raw => {\n  const unformatDate = new Date(+raw).toString();\n  return raw ? Date.parse(unformatDate).toString() : \"\";\n};\n\nexport const formatAllFieldValues = (fields, values) => {\n  return Object.keys(fields).reduce((acc, key) => {\n    switch (fields[key].type) {\n      case \"number\":\n        acc[key] = parseInt(values[key]);\n        break;\n\n      case \"date\":\n        acc[key] = parseDate(values[key]);\n        break;\n\n      default:\n        acc[key] = values[key];\n    }\n\n    return acc;\n  }, {});\n};\nexport const updateFields = (fields, values) => {\n  return produce(fields, draft => {\n    Object.keys(values).forEach(key => {\n      if (draft[key]) return draft[key].value = values[key];\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/libraries/formDataHandling/functions.ts"],"names":["produce","getFromFields","fields","fieldAddress","Object","keys","reduce","acc","key","parseDate","raw","unformatDate","Date","toString","parse","formatAllFieldValues","values","type","parseInt","updateFields","draft","forEach","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAIA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,MAD2B,EAE3BC,YAF2B,KAGH;AACxB,SAAOC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAA2B,CAACC,GAAD,EAA2BC,GAA3B,KAAmC;AACnED,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWN,MAAM,CAACM,GAAD,CAAN,CAAYL,YAAZ,CAAX;AACA,WAAOI,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CARM;;AAUP,MAAME,SAAS,GAAIC,GAAD,IAAiB;AACjC,QAAMC,YAAY,GAAG,IAAIC,IAAJ,CAAS,CAACF,GAAV,EAAeG,QAAf,EAArB;AACA,SAAOH,GAAG,GAAGE,IAAI,CAACE,KAAL,CAAWH,YAAX,EAAyBE,QAAzB,EAAH,GAAyC,EAAnD;AACD,CAHD;;AAKA,OAAO,MAAME,oBAAoB,GAAG,CAClCb,MADkC,EAElCc,MAFkC,KAGO;AACzC,SAAOZ,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CACL,CAACC,GAAD,EAA4CC,GAA5C,KAAoD;AAClD,YAAQN,MAAM,CAACM,GAAD,CAAN,CAAYS,IAApB;AACE,WAAK,QAAL;AACEV,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWU,QAAQ,CAACF,MAAM,CAACR,GAAD,CAAP,CAAnB;AACA;;AACF,WAAK,MAAL;AACED,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,SAAS,CAACO,MAAM,CAACR,GAAD,CAAP,CAApB;AACA;;AACF;AACED,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWQ,MAAM,CAACR,GAAD,CAAjB;AARJ;;AAUA,WAAOD,GAAP;AACD,GAbI,EAcL,EAdK,CAAP;AAgBD,CApBM;AAsBP,OAAO,MAAMY,YAAY,GAAG,CAC1BjB,MAD0B,EAE1Bc,MAF0B,KAGd;AACZ,SAAOhB,OAAO,CAACE,MAAD,EAAUkB,KAAD,IAAgC;AACrDhB,IAAAA,MAAM,CAACC,IAAP,CAAYW,MAAZ,EAAqBK,OAArB,CAA8Bb,GAAD,IAAS;AACpC,UAAIY,KAAK,CAACZ,GAAD,CAAT,EACE,OAAQY,KAAK,CAACZ,GAAD,CAAL,CAAqBc,KAArB,GAA6BN,MAAM,CAAER,GAAF,CAA3C;AACH,KAHD;AAID,GALa,CAAd;AAMD,CAVM","sourcesContent":["import { produce } from \"immer\";\nimport { PatientDTO } from \"../../generated\";\nimport { TFieldAddress, TFieldFormattedValue, TFields } from \"./types\";\n\nexport const getFromFields = (\n  fields: TFields,\n  fieldAddress: TFieldAddress\n): Record<string, any> => {\n  return Object.keys(fields).reduce((acc: Record<string, any>, key) => {\n    acc[key] = fields[key][fieldAddress];\n    return acc;\n  }, {});\n};\n\nconst parseDate = (raw: string) => {\n  const unformatDate = new Date(+raw).toString();\n  return raw ? Date.parse(unformatDate).toString() : \"\";\n};\n\nexport const formatAllFieldValues = (\n  fields: TFields,\n  values: Record<string, string>\n): Record<string, TFieldFormattedValue> => {\n  return Object.keys(fields).reduce(\n    (acc: Record<string, TFieldFormattedValue>, key) => {\n      switch (fields[key].type) {\n        case \"number\":\n          acc[key] = parseInt(values[key]);\n          break;\n        case \"date\":\n          acc[key] = parseDate(values[key]);\n          break;\n        default:\n          acc[key] = values[key];\n      }\n      return acc;\n    },\n    {}\n  );\n};\n\nexport const updateFields = (\n  fields: TFields,\n  values: PatientDTO | undefined\n): TFields => {\n  return produce(fields, (draft: Record<string, any>) => {\n    Object.keys(values!).forEach((key) => {\n      if (draft[key as string])\n        return (draft[key as string].value = values![key as keyof PatientDTO]);\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}