{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTherapy/PatientTherapy.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport PatientTherapyTable from \"./patientTherapyTable/PatientTherapyTable\";\nimport TherapyForm from \"./therapyForm/TherapyForm\";\nimport \"./styles.scss\";\nimport { createTherapy, getTherapiesByPatientId, createTherapyReset } from \"../../../state/therapies/actions\";\nimport { getMedicals } from \"../../../state/medicals/actions\";\nimport { initialFields } from \"./consts\";\nimport { useTranslation } from \"react-i18next\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { connect, useSelector } from \"react-redux\";\nimport ConfirmationDialog from \"../confirmationDialog/ConfirmationDialog\";\nimport InfoBox from \"../infoBox/InfoBox\";\nimport checkIcon from \"../../../assets/check-icon.png\";\n\nconst PatientTherapy = ({\n  createTherapy,\n  getTherapiesByPatientId,\n  createTherapyReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n  getMedicals\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const infoBoxRef = useRef(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [shouldUpdateTable, setShouldUpdateTable] = useState(false);\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const patientData = useSelector(state => state.patients.selectedPatient.data);\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  useEffect(() => {\n    getMedicals();\n  }, [getMedicals]);\n  useEffect(() => {\n    if (activityTransitionState === \"TO_RESET\") {\n      createTherapyReset();\n      setShouldResetForm(true);\n      setShouldUpdateTable(true);\n    }\n  }, [activityTransitionState, createTherapyReset]);\n  useEffect(() => {\n    getTherapiesByPatientId(patientData === null || patientData === void 0 ? void 0 : patientData.code);\n  }, [patientData, getTherapiesByPatientId]);\n\n  const onSubmit = therapy => {\n    setShouldResetForm(false);\n    therapy.patID = patientData;\n    createTherapy(therapy);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setShouldUpdateTable(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TherapyForm, {\n    fields: initialFields,\n    onSubmit: onSubmit,\n    submitButtonLabel: t(\"common.savetherapy\"),\n    resetButtonLabel: t(\"common.discard\"),\n    shouldResetForm: shouldResetForm,\n    resetFormCallback: resetFormCallback,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: infoBoxRef,\n    className: \"info-box-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, hasFailed && /*#__PURE__*/React.createElement(InfoBox, {\n    type: \"error\",\n    message: \"Something went wrong, please retry later.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: hasSucceeded,\n    title: \"Therapy Created\",\n    icon: checkIcon,\n    info: \"The therapy registration was successful.\",\n    primaryButtonLabel: \"Ok\",\n    handlePrimaryButtonClick: () => setActivityTransitionState(\"TO_RESET\"),\n    handleSecondaryButtonClick: () => ({}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PatientTherapyTable, {\n    shouldUpdateTable: shouldUpdateTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.therapies.createTherapy.status === \"LOADING\",\n  hasSucceeded: state.therapies.createTherapy.status === \"SUCCESS\",\n  hasFailed: state.therapies.createTherapy.status === \"FAIL\"\n});\n\nconst mapDispatchToProps = {\n  createTherapy,\n  createTherapyReset,\n  getMedicals,\n  getTherapiesByPatientId\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientTherapy);","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/accessories/patientTherapy/PatientTherapy.tsx"],"names":["React","useEffect","useRef","useState","PatientTherapyTable","TherapyForm","createTherapy","getTherapiesByPatientId","createTherapyReset","getMedicals","initialFields","useTranslation","scrollToElement","connect","useSelector","ConfirmationDialog","InfoBox","checkIcon","PatientTherapy","isLoading","hasSucceeded","hasFailed","t","infoBoxRef","shouldResetForm","setShouldResetForm","shouldUpdateTable","setShouldUpdateTable","activityTransitionState","setActivityTransitionState","patientData","state","patients","selectedPatient","data","current","code","onSubmit","therapy","patID","resetFormCallback","mapStateToProps","therapies","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\nimport PatientTherapyTable from \"./patientTherapyTable/PatientTherapyTable\";\nimport TherapyForm from \"./therapyForm/TherapyForm\";\nimport \"./styles.scss\";\nimport {\n  createTherapy,\n  getTherapiesByPatientId,\n  createTherapyReset,\n} from \"../../../state/therapies/actions\";\nimport { getMedicals } from \"../../../state/medicals/actions\";\nimport {\n  IDispatchProps,\n  IStateProps,\n  TherapyTransitionState,\n  TProps,\n} from \"./types\";\nimport { initialFields } from \"./consts\";\nimport { useTranslation } from \"react-i18next\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { TherapyRowDTO } from \"../../../generated\";\nimport { connect, useSelector } from \"react-redux\";\nimport { IState } from \"../../../types\";\nimport ConfirmationDialog from \"../confirmationDialog/ConfirmationDialog\";\nimport InfoBox from \"../infoBox/InfoBox\";\nimport checkIcon from \"../../../assets/check-icon.png\";\n\nconst PatientTherapy: FC<TProps> = ({\n  createTherapy,\n  getTherapiesByPatientId,\n  createTherapyReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n  getMedicals,\n}) => {\n  const { t } = useTranslation();\n  const infoBoxRef = useRef<HTMLDivElement>(null);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n  const [shouldUpdateTable, setShouldUpdateTable] = useState(false);\n  const [activityTransitionState, setActivityTransitionState] =\n    useState<TherapyTransitionState>(\"IDLE\");\n\n  const patientData = useSelector(\n    (state: IState) => state.patients.selectedPatient.data\n  );\n\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n\n  useEffect(() => {\n    getMedicals();\n  }, [getMedicals]);\n\n  useEffect(() => {\n    if (activityTransitionState === \"TO_RESET\") {\n      createTherapyReset();\n      setShouldResetForm(true);\n      setShouldUpdateTable(true);\n    }\n  }, [activityTransitionState, createTherapyReset]);\n\n  useEffect(() => {\n    getTherapiesByPatientId(patientData?.code);\n  }, [patientData, getTherapiesByPatientId]);\n\n  const onSubmit = (therapy: TherapyRowDTO) => {\n    setShouldResetForm(false);\n    therapy.patID = patientData;\n    createTherapy(therapy);\n  };\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setShouldUpdateTable(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  return (\n    <div className=\"patientTherapy\">\n      <TherapyForm\n        fields={initialFields}\n        onSubmit={onSubmit}\n        submitButtonLabel={t(\"common.savetherapy\")}\n        resetButtonLabel={t(\"common.discard\")}\n        shouldResetForm={shouldResetForm}\n        resetFormCallback={resetFormCallback}\n        isLoading={isLoading}\n      />\n      <div ref={infoBoxRef} className=\"info-box-container\">\n        {hasFailed && (\n          <InfoBox\n            type=\"error\"\n            message=\"Something went wrong, please retry later.\"\n          />\n        )}\n      </div>\n      <ConfirmationDialog\n        isOpen={hasSucceeded}\n        title=\"Therapy Created\"\n        icon={checkIcon}\n        info=\"The therapy registration was successful.\"\n        primaryButtonLabel=\"Ok\"\n        handlePrimaryButtonClick={() => setActivityTransitionState(\"TO_RESET\")}\n        handleSecondaryButtonClick={() => ({})}\n      />\n      <PatientTherapyTable shouldUpdateTable={shouldUpdateTable} />\n    </div>\n  );\n};\nconst mapStateToProps = (state: IState): IStateProps => ({\n  isLoading: state.therapies.createTherapy.status === \"LOADING\",\n  hasSucceeded: state.therapies.createTherapy.status === \"SUCCESS\",\n  hasFailed: state.therapies.createTherapy.status === \"FAIL\",\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  createTherapy,\n  createTherapyReset,\n  getMedicals,\n  getTherapiesByPatientId,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientTherapy);\n"]},"metadata":{},"sourceType":"module"}