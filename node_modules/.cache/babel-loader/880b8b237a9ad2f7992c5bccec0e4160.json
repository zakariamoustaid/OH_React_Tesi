{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAuthenticationSuccess } from \"../../state/main/actions\";\nimport { getAuthenticationFromSession } from \"./getAuthenticationFromSession\";\nimport { saveAuthenticationDataToSession } from \"./saveAuthenticationDataToSession\";\nimport { savePermissionDataToSession } from \"./savePermissionDataToSession\";\nexport const useAuthentication = () => {\n  const dispatch = useDispatch();\n  const userCredentials = useSelector(state => state.main.authentication.data);\n  useEffect(() => {\n    try {\n      const sessionData = getAuthenticationFromSession();\n\n      if (!userCredentials && sessionData) {\n        // hydrate redux from session\n        dispatch(setAuthenticationSuccess(sessionData));\n      }\n    } catch (e) {\n      if (userCredentials) {\n        // hydrate session from redux\n        const {\n          displayName,\n          token,\n          permission\n        } = userCredentials;\n        saveAuthenticationDataToSession({\n          displayName,\n          token\n        });\n        savePermissionDataToSession({\n          permission\n        });\n      }\n    }\n  }, [userCredentials, dispatch]);\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/libraries/authUtils/useAuthentication.ts"],"names":["useEffect","useDispatch","useSelector","setAuthenticationSuccess","getAuthenticationFromSession","saveAuthenticationDataToSession","savePermissionDataToSession","useAuthentication","dispatch","userCredentials","state","main","authentication","data","sessionData","e","displayName","token","permission"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,wBAAT,QAAyC,0BAAzC;AAEA,SAASC,4BAAT,QAA6C,gCAA7C;AACA,SAASC,+BAAT,QAAgD,mCAAhD;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACrC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,eAAe,GAAGP,WAAW,CAChCQ,KAAD,IAAmBA,KAAK,CAACC,IAAN,CAAWC,cAAX,CAA0BC,IADZ,CAAnC;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMc,WAAW,GAAGV,4BAA4B,EAAhD;;AACA,UAAI,CAACK,eAAD,IAAoBK,WAAxB,EAAqC;AACnC;AACAN,QAAAA,QAAQ,CAACL,wBAAwB,CAACW,WAAD,CAAzB,CAAR;AACD;AACF,KAND,CAME,OAAOC,CAAP,EAAU;AACV,UAAIN,eAAJ,EAAqB;AACnB;AACA,cAAM;AAAEO,UAAAA,WAAF;AAAeC,UAAAA,KAAf;AAAsBC,UAAAA;AAAtB,YAAqCT,eAA3C;AACAJ,QAAAA,+BAA+B,CAAC;AAC9BW,UAAAA,WAD8B;AAE9BC,UAAAA;AAF8B,SAAD,CAA/B;AAIAX,QAAAA,2BAA2B,CAAC;AAAEY,UAAAA;AAAF,SAAD,CAA3B;AACD;AACF;AACF,GAlBQ,EAkBN,CAACT,eAAD,EAAkBD,QAAlB,CAlBM,CAAT;AAmBD,CAzBM","sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAuthenticationSuccess } from \"../../state/main/actions\";\nimport { IState } from \"../../types\";\nimport { getAuthenticationFromSession } from \"./getAuthenticationFromSession\";\nimport { saveAuthenticationDataToSession } from \"./saveAuthenticationDataToSession\";\nimport { savePermissionDataToSession } from \"./savePermissionDataToSession\";\n\nexport const useAuthentication = () => {\n  const dispatch = useDispatch();\n  const userCredentials = useSelector(\n    (state: IState) => state.main.authentication.data\n  );\n\n  useEffect(() => {\n    try {\n      const sessionData = getAuthenticationFromSession();\n      if (!userCredentials && sessionData) {\n        // hydrate redux from session\n        dispatch(setAuthenticationSuccess(sessionData));\n      }\n    } catch (e) {\n      if (userCredentials) {\n        // hydrate session from redux\n        const { displayName, token, permission } = userCredentials;\n        saveAuthenticationDataToSession({\n          displayName,\n          token,\n        });\n        savePermissionDataToSession({ permission });\n      }\n    }\n  }, [userCredentials, dispatch]);\n};\n"]},"metadata":{},"sourceType":"module"}