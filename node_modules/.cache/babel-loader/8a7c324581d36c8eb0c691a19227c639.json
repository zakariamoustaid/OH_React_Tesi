{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map, concatMap } from 'rxjs/operators';\nexport const BASE_PATH = 'https://www.open-hospital.org/oh-api'.replace(/\\/+$/, '');\nexport class Configuration {\n  constructor(configuration = {}) {\n    this.configuration = configuration;\n  }\n\n  get basePath() {\n    var _this$configuration$b;\n\n    return (_this$configuration$b = this.configuration.basePath) !== null && _this$configuration$b !== void 0 ? _this$configuration$b : BASE_PATH;\n  }\n\n  get middleware() {\n    var _this$configuration$m;\n\n    return (_this$configuration$m = this.configuration.middleware) !== null && _this$configuration$m !== void 0 ? _this$configuration$m : [];\n  }\n\n  get username() {\n    return this.configuration.username;\n  }\n\n  get password() {\n    return this.configuration.password;\n  }\n\n  get apiKey() {\n    const {\n      apiKey\n    } = this.configuration;\n    return apiKey ? typeof apiKey === 'string' ? () => apiKey : apiKey : undefined;\n  }\n\n  get accessToken() {\n    const {\n      accessToken\n    } = this.configuration;\n    return accessToken ? typeof accessToken === 'string' ? () => accessToken : accessToken : undefined;\n  }\n\n}\n/**\n * This is the base class for all generated API classes.\n */\n\nexport class BaseAPI {\n  constructor(configuration = new Configuration()) {\n    this.configuration = configuration;\n    this.middleware = [];\n\n    this.withMiddleware = middlewares => {\n      const next = this.clone();\n      next.middleware = next.middleware.concat(middlewares);\n      return next;\n    };\n\n    this.withPreMiddleware = preMiddlewares => this.withMiddleware(preMiddlewares.map(pre => ({\n      pre\n    })));\n\n    this.withPostMiddleware = postMiddlewares => this.withMiddleware(postMiddlewares.map(post => ({\n      post\n    })));\n\n    this.createRequestArgs = ({\n      url: baseUrl,\n      query,\n      method,\n      headers,\n      body,\n      responseType\n    }) => {\n      // only add the queryString to the URL if there are query parameters.\n      // this is done to avoid urls ending with a '?' character which buggy webservers\n      // do not handle correctly sometimes.\n      const url = `${this.configuration.basePath}${baseUrl}${query && Object.keys(query).length ? `?${queryString(query)}` : ''}`;\n      return {\n        url,\n        method,\n        headers,\n        body: body instanceof FormData ? body : JSON.stringify(body),\n        responseType: responseType !== null && responseType !== void 0 ? responseType : 'json'\n      };\n    };\n\n    this.rxjsRequest = params => of(params).pipe(map(request => {\n      this.middleware.filter(item => item.pre).forEach(mw => request = mw.pre(request));\n      return request;\n    }), concatMap(args => ajax(args).pipe(map(response => {\n      this.middleware.filter(item => item.post).forEach(mw => response = mw.post(response));\n      return response;\n    }))));\n\n    this.clone = () => Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n\n    this.middleware = configuration.middleware;\n  }\n\n  request(requestOpts, responseOpts) {\n    return this.rxjsRequest(this.createRequestArgs(requestOpts)).pipe(map(res => {\n      const {\n        status,\n        response\n      } = res;\n\n      if (status >= 200 && status < 300) {\n        return (responseOpts === null || responseOpts === void 0 ? void 0 : responseOpts.respone) === 'raw' ? res : response;\n      }\n\n      throw res;\n    }));\n  }\n\n}\n/**\n * @deprecated\n * export for not being a breaking change\n */\n\nexport class RequiredError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = 'RequiredError';\n  }\n\n}\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|'\n};\nexport const encodeURI = value => encodeURIComponent(`${value}`);\n\nconst queryString = params => Object.entries(params).map(([key, value]) => value instanceof Array ? value.map(val => `${encodeURI(key)}=${encodeURI(val)}`).join('&') : `${encodeURI(key)}=${encodeURI(value)}`).join('&'); // alias fallback for not being a breaking change\n\n\nexport const querystring = queryString;\n/**\n * @deprecated\n */\n\nexport const throwIfRequired = (params, key, nickname) => {\n  if (!params || params[key] == null) {\n    throw new RequiredError(`Required parameter ${key} was null or undefined when calling ${nickname}.`);\n  }\n};\nexport const throwIfNullOrUndefined = (value, paramName, nickname) => {\n  if (value == null) {\n    throw new Error(`Parameter \"${paramName}\" was null or undefined when calling \"${nickname}\".`);\n  }\n}; // alias for easier importing","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/runtime.ts"],"names":["of","ajax","map","concatMap","BASE_PATH","replace","Configuration","constructor","configuration","basePath","middleware","username","password","apiKey","undefined","accessToken","BaseAPI","withMiddleware","middlewares","next","clone","concat","withPreMiddleware","preMiddlewares","pre","withPostMiddleware","postMiddlewares","post","createRequestArgs","url","baseUrl","query","method","headers","body","responseType","Object","keys","length","queryString","FormData","JSON","stringify","rxjsRequest","params","pipe","request","filter","item","forEach","mw","args","response","assign","create","getPrototypeOf","requestOpts","responseOpts","res","status","respone","RequiredError","Error","name","COLLECTION_FORMATS","csv","ssv","tsv","pipes","encodeURI","value","encodeURIComponent","entries","key","Array","val","join","querystring","throwIfRequired","nickname","throwIfNullOrUndefined","paramName"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable, of, Subscriber } from 'rxjs';\nimport { ajax, AjaxRequest, AjaxResponse } from 'rxjs/ajax';\nimport { map, concatMap } from 'rxjs/operators';\n\nexport const BASE_PATH = 'https://www.open-hospital.org/oh-api'.replace(/\\/+$/, '');\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    middleware?: Middleware[]; // middleware to apply before/after rxjs requests\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\n    accessToken?: string | ((name?: string, scopes?: string[]) => string); // parameter for oauth2 security\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    get basePath(): string {\n        return this.configuration.basePath ?? BASE_PATH;\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware ?? [];\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string) | undefined {\n        const { apiKey } = this.configuration;\n        return apiKey ? (typeof apiKey === 'string' ? () => apiKey : apiKey) : undefined;\n    }\n\n    get accessToken(): ((name: string, scopes?: string[]) => string) | undefined {\n        const { accessToken } = this.configuration;\n        return accessToken ? (typeof accessToken === 'string' ? () => accessToken : accessToken) : undefined;\n    }\n}\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n    private middleware: Middleware[] = [];\n\n    constructor(protected configuration = new Configuration()) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware = (middlewares: Middleware[]): this => {\n        const next = this.clone();\n        next.middleware = next.middleware.concat(middlewares);\n        return next;\n    };\n\n    withPreMiddleware = (preMiddlewares: Array<Middleware['pre']>) =>\n        this.withMiddleware(preMiddlewares.map((pre) => ({ pre })));\n\n    withPostMiddleware = (postMiddlewares: Array<Middleware['post']>) =>\n        this.withMiddleware(postMiddlewares.map((post) => ({ post })));\n\n    protected request<T>(requestOpts: RequestOpts): Observable<T>\n    protected request<T>(requestOpts: RequestOpts, responseOpts?: ResponseOpts): Observable<RawAjaxResponse<T>>\n    protected request<T>(requestOpts: RequestOpts, responseOpts?: ResponseOpts): Observable<T | RawAjaxResponse<T>> {\n        return this.rxjsRequest(this.createRequestArgs(requestOpts)).pipe(\n            map((res) => {\n                const { status, response } = res;\n                if (status >= 200 && status < 300) {\n                    return responseOpts?.respone === 'raw' ? res : response;\n                }\n                throw res;\n            })\n        );\n    }\n\n    private createRequestArgs = ({ url: baseUrl, query, method, headers, body, responseType }: RequestOpts): RequestArgs => {\n        // only add the queryString to the URL if there are query parameters.\n        // this is done to avoid urls ending with a '?' character which buggy webservers\n        // do not handle correctly sometimes.\n        const url = `${this.configuration.basePath}${baseUrl}${query && Object.keys(query).length ? `?${queryString(query)}`: ''}`;\n\n        return {\n            url,\n            method,\n            headers,\n            body: body instanceof FormData ? body : JSON.stringify(body),\n            responseType: responseType ?? 'json',\n        };\n    }\n\n    private rxjsRequest = (params: RequestArgs): Observable<AjaxResponse> =>\n        of(params).pipe(\n            map((request) => {\n                this.middleware.filter((item) => item.pre).forEach((mw) => (request = mw.pre!(request)));\n                return request;\n            }),\n            concatMap((args) =>\n                ajax(args).pipe(\n                    map((response) => {\n                        this.middleware.filter((item) => item.post).forEach((mw) => (response = mw.post!(response)));\n                        return response;\n                    })\n                )\n            )\n        );\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone = (): this =>\n        Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n}\n\n/**\n * @deprecated\n * export for not being a breaking change\n */\nexport class RequiredError extends Error {\n    name: 'RequiredError' = 'RequiredError';\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: ',',\n    ssv: ' ',\n    tsv: '\\t',\n    pipes: '|',\n};\n\nexport type Json = any;\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\nexport type HttpHeaders = { [key: string]: string };\nexport type HttpQuery = Partial<{ [key: string]: string | number | null | boolean | Array<string | number | null | boolean> }>; // partial is needed for strict mode\nexport type HttpBody = Json | FormData;\n\nexport interface RequestOpts extends AjaxRequest {\n    query?: HttpQuery; // additional prop\n    // the following props have improved types over AjaxRequest \n    method: HttpMethod;\n    headers?: HttpHeaders;\n    body?: HttpBody;\n    responseType?: 'json' | 'blob' | 'arraybuffer' | 'text';\n}\n\nexport interface ResponseOpts {\n    respone?: 'raw';\n}\n\nexport interface OperationOpts {\n    responseOpts?: ResponseOpts;\n}\n\n// AjaxResponse with typed response \nexport interface RawAjaxResponse<T> extends AjaxResponse {\n    response: T;\n}\n\nexport const encodeURI = (value: any) => encodeURIComponent(`${value}`);\n\nconst queryString = (params: HttpQuery): string => Object.entries(params)\n    .map(([key, value]) => value instanceof Array\n        ? value.map((val) => `${encodeURI(key)}=${encodeURI(val)}`).join('&')\n        : `${encodeURI(key)}=${encodeURI(value)}`\n    )\n    .join('&');\n\n// alias fallback for not being a breaking change\nexport const querystring = queryString;\n\n/**\n * @deprecated\n */\nexport const throwIfRequired = (params: {[key: string]: any}, key: string, nickname: string) => {\n    if (!params || params[key] == null) {\n        throw new RequiredError(`Required parameter ${key} was null or undefined when calling ${nickname}.`);\n    }\n};\n\nexport const throwIfNullOrUndefined = (value: any, paramName: string, nickname: string) => {\n    if (value == null) {\n        throw new Error(`Parameter \"${paramName}\" was null or undefined when calling \"${nickname}\".`);\n    }\n};\n\n// alias for easier importing\nexport interface RequestArgs extends AjaxRequest {}\nexport interface ResponseArgs extends AjaxResponse {}\n\nexport interface Middleware {\n    pre?(request: RequestArgs): RequestArgs;\n    post?(response: ResponseArgs): ResponseArgs;\n}\n"]},"metadata":{},"sourceType":"module"}