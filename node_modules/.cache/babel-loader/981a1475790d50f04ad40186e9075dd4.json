{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class PatientControllerApi extends BaseAPI {\n  /**\n   * deletePatient\n   */\n  deletePatientUsingDELETE({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'deletePatientUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/patients/{code}'.replace('{code}', encodeURI(code)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getPatientUsingGET({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'getPatientUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/patients/{code}'.replace('{code}', encodeURI(code)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getPatientsUsingGET({\n    page,\n    size\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (page != null) {\n      query['page'] = page;\n    }\n\n    if (size != null) {\n      query['size'] = size;\n    }\n\n    return this.request({\n      url: '/patients',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newPatientUsingPOST({\n    newPatient\n  }, opts) {\n    throwIfNullOrUndefined(newPatient, 'newPatient', 'newPatientUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/patients',\n      method: 'POST',\n      headers,\n      body: newPatient\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  searchPatientUsingGET({\n    address,\n    birthDate,\n    firstName,\n    secondName\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (address != null) {\n      query['address'] = address;\n    }\n\n    if (birthDate != null) {\n      query['birthDate'] = birthDate;\n    }\n\n    if (firstName != null) {\n      query['firstName'] = firstName;\n    }\n\n    if (secondName != null) {\n      query['secondName'] = secondName;\n    }\n\n    return this.request({\n      url: '/patients/search',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updatePatientUsingPUT({\n    code,\n    updatePatient\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'updatePatientUsingPUT');\n    throwIfNullOrUndefined(updatePatient, 'updatePatient', 'updatePatientUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/patients/{code}'.replace('{code}', encodeURI(code)),\n      method: 'PUT',\n      headers,\n      body: updatePatient\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/apis/PatientControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","PatientControllerApi","deletePatientUsingDELETE","code","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","getPatientUsingGET","getPatientsUsingGET","page","size","query","newPatientUsingPOST","newPatient","body","searchPatientUsingGET","address","birthDate","firstName","secondName","updatePatientUsingPUT","updatePatient"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    PatientDTO,\n    ResponseEntity,\n} from '../models';\n\nexport interface DeletePatientUsingDELETERequest {\n    code: number;\n}\n\nexport interface GetPatientUsingGETRequest {\n    code: number;\n}\n\nexport interface GetPatientsUsingGETRequest {\n    page?: number;\n    size?: number;\n}\n\nexport interface NewPatientUsingPOSTRequest {\n    newPatient: PatientDTO;\n}\n\nexport interface SearchPatientUsingGETRequest {\n    address?: string;\n    birthDate?: string;\n    firstName?: string;\n    secondName?: string;\n}\n\nexport interface UpdatePatientUsingPUTRequest {\n    code: number;\n    updatePatient: PatientDTO;\n}\n\n/**\n * no description\n */\nexport class PatientControllerApi extends BaseAPI {\n\n    /**\n     * deletePatient\n     */\n    deletePatientUsingDELETE({ code }: DeletePatientUsingDELETERequest): Observable<ResponseEntity>\n    deletePatientUsingDELETE({ code }: DeletePatientUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<ResponseEntity>>\n    deletePatientUsingDELETE({ code }: DeletePatientUsingDELETERequest, opts?: OperationOpts): Observable<ResponseEntity | RawAjaxResponse<ResponseEntity>> {\n        throwIfNullOrUndefined(code, 'code', 'deletePatientUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<ResponseEntity>({\n            url: '/patients/{code}'.replace('{code}', encodeURI(code)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getPatient\n     */\n    getPatientUsingGET({ code }: GetPatientUsingGETRequest): Observable<PatientDTO>\n    getPatientUsingGET({ code }: GetPatientUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PatientDTO>>\n    getPatientUsingGET({ code }: GetPatientUsingGETRequest, opts?: OperationOpts): Observable<PatientDTO | RawAjaxResponse<PatientDTO>> {\n        throwIfNullOrUndefined(code, 'code', 'getPatientUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<PatientDTO>({\n            url: '/patients/{code}'.replace('{code}', encodeURI(code)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getPatients\n     */\n    getPatientsUsingGET({ page, size }: GetPatientsUsingGETRequest): Observable<Array<PatientDTO>>\n    getPatientsUsingGET({ page, size }: GetPatientsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PatientDTO>>>\n    getPatientsUsingGET({ page, size }: GetPatientsUsingGETRequest, opts?: OperationOpts): Observable<Array<PatientDTO> | RawAjaxResponse<Array<PatientDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (page != null) { query['page'] = page; }\n        if (size != null) { query['size'] = size; }\n\n        return this.request<Array<PatientDTO>>({\n            url: '/patients',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newPatient\n     */\n    newPatientUsingPOST({ newPatient }: NewPatientUsingPOSTRequest): Observable<number>\n    newPatientUsingPOST({ newPatient }: NewPatientUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    newPatientUsingPOST({ newPatient }: NewPatientUsingPOSTRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(newPatient, 'newPatient', 'newPatientUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<number>({\n            url: '/patients',\n            method: 'POST',\n            headers,\n            body: newPatient,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * searchPatient\n     */\n    searchPatientUsingGET({ address, birthDate, firstName, secondName }: SearchPatientUsingGETRequest): Observable<Array<PatientDTO>>\n    searchPatientUsingGET({ address, birthDate, firstName, secondName }: SearchPatientUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PatientDTO>>>\n    searchPatientUsingGET({ address, birthDate, firstName, secondName }: SearchPatientUsingGETRequest, opts?: OperationOpts): Observable<Array<PatientDTO> | RawAjaxResponse<Array<PatientDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (address != null) { query['address'] = address; }\n        if (birthDate != null) { query['birthDate'] = birthDate; }\n        if (firstName != null) { query['firstName'] = firstName; }\n        if (secondName != null) { query['secondName'] = secondName; }\n\n        return this.request<Array<PatientDTO>>({\n            url: '/patients/search',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updatePatient\n     */\n    updatePatientUsingPUT({ code, updatePatient }: UpdatePatientUsingPUTRequest): Observable<number>\n    updatePatientUsingPUT({ code, updatePatient }: UpdatePatientUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    updatePatientUsingPUT({ code, updatePatient }: UpdatePatientUsingPUTRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(code, 'code', 'updatePatientUsingPUT');\n        throwIfNullOrUndefined(updatePatient, 'updatePatient', 'updatePatientUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<number>({\n            url: '/patients/{code}'.replace('{code}', encodeURI(code)),\n            method: 'PUT',\n            headers,\n            body: updatePatient,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}