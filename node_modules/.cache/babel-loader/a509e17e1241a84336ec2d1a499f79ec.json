{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class UserControllerApi extends BaseAPI {\n  /**\n   * deleteGroup\n   */\n  deleteGroupUsingDELETE({\n    groupCode\n  }, opts) {\n    throwIfNullOrUndefined(groupCode, 'groupCode', 'deleteGroupUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/groups/{group_code}'.replace('{group_code}', encodeURI(groupCode)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  deleteUserUsingDELETE({\n    username\n  }, opts) {\n    throwIfNullOrUndefined(username, 'username', 'deleteUserUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/{username}'.replace('{username}', encodeURI(username)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getGroupMenuUsingGET({\n    groupCode\n  }, opts) {\n    throwIfNullOrUndefined(groupCode, 'groupCode', 'getGroupMenuUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/group-menus/{group_code}'.replace('{group_code}', encodeURI(groupCode)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMenuUsingGET({\n    username\n  }, opts) {\n    throwIfNullOrUndefined(username, 'username', 'getMenuUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/menus/{username}'.replace('{username}', encodeURI(username)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getUserByNameUsingGET({\n    username\n  }, opts) {\n    throwIfNullOrUndefined(username, 'username', 'getUserByNameUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/{username}'.replace('{username}', encodeURI(username)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getUserGroupUsingGET(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/groups',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getUserUsingGET({\n    groupId\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (groupId != null) {\n      query['group_id'] = groupId;\n    }\n\n    return this.request({\n      url: '/users',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newUserGroupUsingPOST({\n    aGroup\n  }, opts) {\n    throwIfNullOrUndefined(aGroup, 'aGroup', 'newUserGroupUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/groups',\n      method: 'POST',\n      headers,\n      body: aGroup\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newUserUsingPOST({\n    userDTO\n  }, opts) {\n    throwIfNullOrUndefined(userDTO, 'userDTO', 'newUserUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users',\n      method: 'POST',\n      headers,\n      body: userDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrievePermissionsByCurrentLoggedInUserUsingGET(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/permissions',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrievePermissionsByUsernameUsingGET({\n    username\n  }, opts) {\n    throwIfNullOrUndefined(username, 'username', 'retrievePermissionsByUsernameUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/permissions/username/{username}'.replace('{username}', encodeURI(username)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  retrieveProfileByCurrentLoggedInUserUsingGET(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/me',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  setGroupMenuUsingPOST({\n    groupCode,\n    menusDTO\n  }, opts) {\n    throwIfNullOrUndefined(groupCode, 'groupCode', 'setGroupMenuUsingPOST');\n    throwIfNullOrUndefined(menusDTO, 'menusDTO', 'setGroupMenuUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/groups/{group_code}'.replace('{group_code}', encodeURI(groupCode)),\n      method: 'POST',\n      headers,\n      body: menusDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateUserGroupUsingPUT({\n    aGroup\n  }, opts) {\n    throwIfNullOrUndefined(aGroup, 'aGroup', 'updateUserGroupUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/users/groups',\n      method: 'PUT',\n      headers,\n      body: aGroup\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateUserUsingPUT({\n    userDTO,\n    password\n  }, opts) {\n    throwIfNullOrUndefined(userDTO, 'userDTO', 'updateUserUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (password != null) {\n      query['password'] = password;\n    }\n\n    return this.request({\n      url: '/users',\n      method: 'PUT',\n      headers,\n      query,\n      body: userDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/apis/UserControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","UserControllerApi","deleteGroupUsingDELETE","groupCode","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","deleteUserUsingDELETE","username","getGroupMenuUsingGET","getMenuUsingGET","getUserByNameUsingGET","getUserGroupUsingGET","getUserUsingGET","groupId","query","newUserGroupUsingPOST","aGroup","body","newUserUsingPOST","userDTO","retrievePermissionsByCurrentLoggedInUserUsingGET","retrievePermissionsByUsernameUsingGET","retrieveProfileByCurrentLoggedInUserUsingGET","setGroupMenuUsingPOST","menusDTO","updateUserGroupUsingPUT","updateUserUsingPUT","password"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    LitePermissionDTO,\n    UserDTO,\n    UserGroupDTO,\n    UserMenuItemDTO,\n    UserProfileDTO,\n} from '../models';\n\nexport interface DeleteGroupUsingDELETERequest {\n    groupCode: string;\n}\n\nexport interface DeleteUserUsingDELETERequest {\n    username: string;\n}\n\nexport interface GetGroupMenuUsingGETRequest {\n    groupCode: string;\n}\n\nexport interface GetMenuUsingGETRequest {\n    username: string;\n}\n\nexport interface GetUserByNameUsingGETRequest {\n    username: string;\n}\n\nexport interface GetUserUsingGETRequest {\n    groupId?: string;\n}\n\nexport interface NewUserGroupUsingPOSTRequest {\n    aGroup: UserGroupDTO;\n}\n\nexport interface NewUserUsingPOSTRequest {\n    userDTO: UserDTO;\n}\n\nexport interface RetrievePermissionsByUsernameUsingGETRequest {\n    username: string;\n}\n\nexport interface SetGroupMenuUsingPOSTRequest {\n    groupCode: string;\n    menusDTO: Array<UserMenuItemDTO>;\n}\n\nexport interface UpdateUserGroupUsingPUTRequest {\n    aGroup: UserGroupDTO;\n}\n\nexport interface UpdateUserUsingPUTRequest {\n    userDTO: UserDTO;\n    password?: boolean;\n}\n\n/**\n * no description\n */\nexport class UserControllerApi extends BaseAPI {\n\n    /**\n     * deleteGroup\n     */\n    deleteGroupUsingDELETE({ groupCode }: DeleteGroupUsingDELETERequest): Observable<boolean>\n    deleteGroupUsingDELETE({ groupCode }: DeleteGroupUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deleteGroupUsingDELETE({ groupCode }: DeleteGroupUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(groupCode, 'groupCode', 'deleteGroupUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/users/groups/{group_code}'.replace('{group_code}', encodeURI(groupCode)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * deleteUser\n     */\n    deleteUserUsingDELETE({ username }: DeleteUserUsingDELETERequest): Observable<boolean>\n    deleteUserUsingDELETE({ username }: DeleteUserUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deleteUserUsingDELETE({ username }: DeleteUserUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(username, 'username', 'deleteUserUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/users/{username}'.replace('{username}', encodeURI(username)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getGroupMenu\n     */\n    getGroupMenuUsingGET({ groupCode }: GetGroupMenuUsingGETRequest): Observable<Array<UserMenuItemDTO>>\n    getGroupMenuUsingGET({ groupCode }: GetGroupMenuUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserMenuItemDTO>>>\n    getGroupMenuUsingGET({ groupCode }: GetGroupMenuUsingGETRequest, opts?: OperationOpts): Observable<Array<UserMenuItemDTO> | RawAjaxResponse<Array<UserMenuItemDTO>>> {\n        throwIfNullOrUndefined(groupCode, 'groupCode', 'getGroupMenuUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<UserMenuItemDTO>>({\n            url: '/users/group-menus/{group_code}'.replace('{group_code}', encodeURI(groupCode)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMenu\n     */\n    getMenuUsingGET({ username }: GetMenuUsingGETRequest): Observable<Array<UserMenuItemDTO>>\n    getMenuUsingGET({ username }: GetMenuUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserMenuItemDTO>>>\n    getMenuUsingGET({ username }: GetMenuUsingGETRequest, opts?: OperationOpts): Observable<Array<UserMenuItemDTO> | RawAjaxResponse<Array<UserMenuItemDTO>>> {\n        throwIfNullOrUndefined(username, 'username', 'getMenuUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<UserMenuItemDTO>>({\n            url: '/users/menus/{username}'.replace('{username}', encodeURI(username)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getUserByName\n     */\n    getUserByNameUsingGET({ username }: GetUserByNameUsingGETRequest): Observable<UserDTO>\n    getUserByNameUsingGET({ username }: GetUserByNameUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDTO>>\n    getUserByNameUsingGET({ username }: GetUserByNameUsingGETRequest, opts?: OperationOpts): Observable<UserDTO | RawAjaxResponse<UserDTO>> {\n        throwIfNullOrUndefined(username, 'username', 'getUserByNameUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<UserDTO>({\n            url: '/users/{username}'.replace('{username}', encodeURI(username)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getUserGroup\n     */\n    getUserGroupUsingGET(): Observable<Array<UserGroupDTO>>\n    getUserGroupUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserGroupDTO>>>\n    getUserGroupUsingGET(opts?: OperationOpts): Observable<Array<UserGroupDTO> | RawAjaxResponse<Array<UserGroupDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<UserGroupDTO>>({\n            url: '/users/groups',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getUser\n     */\n    getUserUsingGET({ groupId }: GetUserUsingGETRequest): Observable<Array<UserDTO>>\n    getUserUsingGET({ groupId }: GetUserUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserDTO>>>\n    getUserUsingGET({ groupId }: GetUserUsingGETRequest, opts?: OperationOpts): Observable<Array<UserDTO> | RawAjaxResponse<Array<UserDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (groupId != null) { query['group_id'] = groupId; }\n\n        return this.request<Array<UserDTO>>({\n            url: '/users',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newUserGroup\n     */\n    newUserGroupUsingPOST({ aGroup }: NewUserGroupUsingPOSTRequest): Observable<boolean>\n    newUserGroupUsingPOST({ aGroup }: NewUserGroupUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newUserGroupUsingPOST({ aGroup }: NewUserGroupUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(aGroup, 'aGroup', 'newUserGroupUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/users/groups',\n            method: 'POST',\n            headers,\n            body: aGroup,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newUser\n     */\n    newUserUsingPOST({ userDTO }: NewUserUsingPOSTRequest): Observable<boolean>\n    newUserUsingPOST({ userDTO }: NewUserUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newUserUsingPOST({ userDTO }: NewUserUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(userDTO, 'userDTO', 'newUserUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/users',\n            method: 'POST',\n            headers,\n            body: userDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrievePermissionsByCurrentLoggedInUser\n     */\n    retrievePermissionsByCurrentLoggedInUserUsingGET(): Observable<Array<LitePermissionDTO>>\n    retrievePermissionsByCurrentLoggedInUserUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<LitePermissionDTO>>>\n    retrievePermissionsByCurrentLoggedInUserUsingGET(opts?: OperationOpts): Observable<Array<LitePermissionDTO> | RawAjaxResponse<Array<LitePermissionDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<LitePermissionDTO>>({\n            url: '/users/permissions',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrievePermissionsByUsername\n     */\n    retrievePermissionsByUsernameUsingGET({ username }: RetrievePermissionsByUsernameUsingGETRequest): Observable<Array<LitePermissionDTO>>\n    retrievePermissionsByUsernameUsingGET({ username }: RetrievePermissionsByUsernameUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<LitePermissionDTO>>>\n    retrievePermissionsByUsernameUsingGET({ username }: RetrievePermissionsByUsernameUsingGETRequest, opts?: OperationOpts): Observable<Array<LitePermissionDTO> | RawAjaxResponse<Array<LitePermissionDTO>>> {\n        throwIfNullOrUndefined(username, 'username', 'retrievePermissionsByUsernameUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<LitePermissionDTO>>({\n            url: '/users/permissions/username/{username}'.replace('{username}', encodeURI(username)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * retrieveProfileByCurrentLoggedInUser\n     */\n    retrieveProfileByCurrentLoggedInUserUsingGET(): Observable<UserProfileDTO>\n    retrieveProfileByCurrentLoggedInUserUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<UserProfileDTO>>\n    retrieveProfileByCurrentLoggedInUserUsingGET(opts?: OperationOpts): Observable<UserProfileDTO | RawAjaxResponse<UserProfileDTO>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<UserProfileDTO>({\n            url: '/users/me',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * setGroupMenu\n     */\n    setGroupMenuUsingPOST({ groupCode, menusDTO }: SetGroupMenuUsingPOSTRequest): Observable<boolean>\n    setGroupMenuUsingPOST({ groupCode, menusDTO }: SetGroupMenuUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    setGroupMenuUsingPOST({ groupCode, menusDTO }: SetGroupMenuUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(groupCode, 'groupCode', 'setGroupMenuUsingPOST');\n        throwIfNullOrUndefined(menusDTO, 'menusDTO', 'setGroupMenuUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/users/groups/{group_code}'.replace('{group_code}', encodeURI(groupCode)),\n            method: 'POST',\n            headers,\n            body: menusDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateUserGroup\n     */\n    updateUserGroupUsingPUT({ aGroup }: UpdateUserGroupUsingPUTRequest): Observable<boolean>\n    updateUserGroupUsingPUT({ aGroup }: UpdateUserGroupUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    updateUserGroupUsingPUT({ aGroup }: UpdateUserGroupUsingPUTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(aGroup, 'aGroup', 'updateUserGroupUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/users/groups',\n            method: 'PUT',\n            headers,\n            body: aGroup,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateUser\n     */\n    updateUserUsingPUT({ userDTO, password }: UpdateUserUsingPUTRequest): Observable<boolean>\n    updateUserUsingPUT({ userDTO, password }: UpdateUserUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    updateUserUsingPUT({ userDTO, password }: UpdateUserUsingPUTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(userDTO, 'userDTO', 'updateUserUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (password != null) { query['password'] = password; }\n\n        return this.request<boolean>({\n            url: '/users',\n            method: 'PUT',\n            headers,\n            query,\n            body: userDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}