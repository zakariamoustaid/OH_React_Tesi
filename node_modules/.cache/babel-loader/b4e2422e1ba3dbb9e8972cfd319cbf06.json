{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport { useFormik } from \"formik\";\nimport \"./styles.scss\";\nimport { createBill, createBillReset } from \"../../../state/bills/actions\";\nimport { searchPatient, getPatientSuccess } from \"../../../state/patients/actions\";\n\nconst NewBillActivity = ({\n  userCredentials,\n  isLoading,\n  hasSucceeded,\n  createBill,\n  createBillReset,\n  hasFailed,\n  billHomeRoute,\n  patientSearchResults,\n  getPatientSuccess,\n  searchStatus\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.billing\")]: \"/billing\",\n    [t(\"nav.newbill\")]: \"/bills\"\n  };\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n  const initialValues = {\n    id: \"\",\n    firstName: \"\",\n    secondName: \"\",\n    birthDate: \"\",\n    address: \"\"\n  };\n  const formik = useFormik({\n    initialValues,\n    onSubmit: values => {\n      // First scroll to show searching message\n      searchPatient(values);\n    }\n  });\n  useEffect(() => {\n    if (searchStatus === \"SUCCESS\" || searchStatus === \"SUCCESS_EMPTY\") {// Second scroll to show results\n    }\n  }, [searchStatus]);\n  const resultsRef = useRef(null);\n  /*useEffect(() => {\n      if (\n          activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n          activityTransitionState === \"TO_BILL_HOME\"\n      ) {\n          createBillReset();\n          setShouldResetForm(true);\n      }\n  }, [activityTransitionState, createBillReset]);\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n   useEffect(() => {\n      if (hasFailed) {\n          scrollToElement(infoBoxRef.current);\n      }\n  }, [hasFailed]);\n   const [shouldResetForm, setShouldResetForm] = useState(false);\n   const resetFormCallback = () => {\n      setShouldResetForm(false);\n      setActivityTransitionState(\"IDLE\");\n      scrollToElement(null);\n  };\n   const formik = useFormik({\n      initialValues: {\n          firstName: '',\n      },\n      onSubmit: (values) => {\n          console.log(values);\n      },\n  });\n  */\n\n  const renderSearchResults = () => {\n    switch (searchStatus) {\n      case \"IDLE\":\n        console.log('niente');\n        return;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new_Bill\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppHeader, {\n    userCredentials: userCredentials,\n    breadcrumbMap: breadcrumbMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, t(\"nav.newbill\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newBill__panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: resultsRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  }, renderSearchResults())))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  patientSearchResults: state.patients.searchResults.data,\n  isLoading: state.bills.createBill.status === \"LOADING\",\n  hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n  hasFailed: state.bills.createBill.status === \"FAIL\",\n  searchStatus: state.patients.searchResults.status || \"IDLE\"\n});\n\nconst mapDispatchToProps = {\n  createBill,\n  createBillReset,\n  getPatientSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/newBillActivity/NewBillActivity.tsx"],"names":["React","useEffect","useRef","useState","AppHeader","Footer","useTranslation","connect","get","has","useFormik","createBill","createBillReset","searchPatient","getPatientSuccess","NewBillActivity","userCredentials","isLoading","hasSucceeded","hasFailed","billHomeRoute","patientSearchResults","searchStatus","t","breadcrumbMap","isValid","fieldName","formik","touched","errors","getErrorText","activityTransitionState","setActivityTransitionState","test_succ","initialValues","id","firstName","secondName","birthDate","address","onSubmit","values","resultsRef","renderSearchResults","console","log","mapStateToProps","state","main","authentication","data","patients","searchResults","bills","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport { IState } from \"../../../types\";\nimport { useFormik } from \"formik\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport { BillDTO } from \"../../../generated\";\nimport { FullBillDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport \"./styles.scss\";\nimport SearchIcon from \"../../../assets/SearchIcon\";\nimport Test from \"./Test\";\nimport {\n    createBill,\n    createBillReset,\n} from \"../../../state/bills/actions\";\nimport {\n    searchPatient,\n    getPatientSuccess,\n} from \"../../../state/patients/actions\";\n\nimport {\n    IDispatchProps,\n    IStateProps,\n    TActivityTransitionState,\n    TProps,\n    TValues,\n} from \"./types\";\n\n\nconst NewBillActivity: FunctionComponent<TProps> = ({\n    userCredentials,\n    isLoading,\n    hasSucceeded,\n    createBill,\n    createBillReset,\n    hasFailed,\n    billHomeRoute,\n    patientSearchResults,\n    getPatientSuccess,\n    searchStatus,\n}) => {\n    const { t } = useTranslation();\n\n    const breadcrumbMap = {\n        [t(\"nav.dashboard\")]: \"/\",\n        [t(\"nav.billing\")]: \"/billing\",\n        [t(\"nav.newbill\")]: \"/bills\",\n    };\n\n    const isValid = (fieldName: string): boolean => {\n        return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n    };\n\n    const getErrorText = (fieldName: string): string => {\n        return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n    };\n\n    const [activityTransitionState, setActivityTransitionState] =\n        useState<TActivityTransitionState>(\"IDLE\");\n\n    const test_succ = \"SEARCH_PATIENT_SUCCESS\";\n\n    const initialValues: TValues = {\n        id: \"\",\n        firstName: \"\",\n        secondName: \"\",\n        birthDate: \"\",\n        address: \"\",\n    };\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: (values: TValues) => {\n            // First scroll to show searching message\n\n            searchPatient(values);\n        },\n    });\n\n    useEffect(() => {\n        if (searchStatus === \"SUCCESS\" || searchStatus === \"SUCCESS_EMPTY\") {\n            // Second scroll to show results\n\n        }\n    }, [searchStatus]);\n\n    const resultsRef = useRef<HTMLDivElement>(null);\n    /*useEffect(() => {\n        if (\n            activityTransitionState === \"TO_NEW_BILL_RESET\" ||\n            activityTransitionState === \"TO_BILL_HOME\"\n        ) {\n            createBillReset();\n            setShouldResetForm(true);\n        }\n    }, [activityTransitionState, createBillReset]);\n\n\n    //const infoBoxRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (hasFailed) {\n            scrollToElement(infoBoxRef.current);\n        }\n    }, [hasFailed]);\n\n    const [shouldResetForm, setShouldResetForm] = useState(false);\n\n    const resetFormCallback = () => {\n        setShouldResetForm(false);\n        setActivityTransitionState(\"IDLE\");\n        scrollToElement(null);\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n        },\n        onSubmit: (values) => {\n            console.log(values);\n        },\n    });\n    */\n    const renderSearchResults = (): JSX.Element | undefined => {\n        switch (searchStatus) {\n            case \"IDLE\":\n                console.log('niente')\n                return;\n        }\n    };\n\n    return (\n        <div className=\"new_Bill\">\n            <AppHeader\n                userCredentials={userCredentials}\n                breadcrumbMap={breadcrumbMap}\n            />\n            <div className=\"newBill__background\">\n                <div className=\"newBill__content\">\n                    <div className=\"newBill__title\">{t(\"nav.newbill\")}</div>\n                    <div className=\"newBill__panel\">\n                        <div className=\"table\">\n                        </div>\n                        <div ref={resultsRef}>{renderSearchResults()}</div>\n                    </div>\n                </div>\n            </div>\n            <Footer />\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n    userCredentials: state.main.authentication.data,\n    patientSearchResults: state.patients.searchResults.data,\n    isLoading: state.bills.createBill.status === \"LOADING\",\n    hasSucceeded: state.bills.createBill.status === \"SUCCESS\",\n    hasFailed: state.bills.createBill.status === \"FAIL\",\n    searchStatus: state.patients.searchResults.status || \"IDLE\",\n});\n\n\n\n\nconst mapDispatchToProps: IDispatchProps = {\n    createBill,\n    createBillReset,\n    getPatientSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBillActivity);\n"]},"metadata":{},"sourceType":"module"}