{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class LaboratoryControllerApi extends BaseAPI {\n  /**\n   * deleteExam\n   */\n  deleteExamUsingDELETE2({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'deleteExamUsingDELETE2');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories/{code}'.replace('{code}', encodeURI(code)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getLaboratoryForPrintUsingGET({\n    dateFrom,\n    dateTo,\n    examName\n  }, opts) {\n    throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getLaboratoryForPrintUsingGET');\n    throwIfNullOrUndefined(dateTo, 'dateTo', 'getLaboratoryForPrintUsingGET');\n    throwIfNullOrUndefined(examName, 'examName', 'getLaboratoryForPrintUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'dateFrom': dateFrom.toISOString(),\n      'dateTo': dateTo.toISOString(),\n      'examName': examName\n    };\n    return this.request({\n      url: '/laboratories/exams',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getLaboratoryUsingGET({\n    patId\n  }, opts) {\n    throwIfNullOrUndefined(patId, 'patId', 'getLaboratoryUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories/byPatientId/{patId}'.replace('{patId}', encodeURI(patId)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getLaboratoryUsingGET1(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMaterialsUsingGET(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories/materials',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newLaboratory2UsingPOST({\n    labsWithRows\n  }, opts) {\n    throwIfNullOrUndefined(labsWithRows, 'labsWithRows', 'newLaboratory2UsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories/insertList',\n      method: 'POST',\n      headers,\n      body: labsWithRows\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newLaboratoryUsingPOST({\n    labWithRowsDTO\n  }, opts) {\n    throwIfNullOrUndefined(labWithRowsDTO, 'labWithRowsDTO', 'newLaboratoryUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories',\n      method: 'POST',\n      headers,\n      body: labWithRowsDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateLaboratoryUsingPUT({\n    code,\n    labWithRowsDTO\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'updateLaboratoryUsingPUT');\n    throwIfNullOrUndefined(labWithRowsDTO, 'labWithRowsDTO', 'updateLaboratoryUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/laboratories/{code}'.replace('{code}', encodeURI(code)),\n      method: 'PUT',\n      headers,\n      body: labWithRowsDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/generated/apis/LaboratoryControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","LaboratoryControllerApi","deleteExamUsingDELETE2","code","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","getLaboratoryForPrintUsingGET","dateFrom","dateTo","examName","query","toISOString","getLaboratoryUsingGET","patId","getLaboratoryUsingGET1","getMaterialsUsingGET","newLaboratory2UsingPOST","labsWithRows","body","newLaboratoryUsingPOST","labWithRowsDTO","updateLaboratoryUsingPUT"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    LabWithRowsDTO,\n    LaboratoryDTO,\n    LaboratoryForPrintDTO,\n    ResponseEntity,\n} from '../models';\n\nexport interface DeleteExamUsingDELETE2Request {\n    code: number;\n}\n\nexport interface GetLaboratoryForPrintUsingGETRequest {\n    dateFrom: string;\n    dateTo: string;\n    examName: string;\n}\n\nexport interface GetLaboratoryUsingGETRequest {\n    patId: number;\n}\n\nexport interface NewLaboratory2UsingPOSTRequest {\n    labsWithRows: Array<LabWithRowsDTO>;\n}\n\nexport interface NewLaboratoryUsingPOSTRequest {\n    labWithRowsDTO: LabWithRowsDTO;\n}\n\nexport interface UpdateLaboratoryUsingPUTRequest {\n    code: number;\n    labWithRowsDTO: LabWithRowsDTO;\n}\n\n/**\n * no description\n */\nexport class LaboratoryControllerApi extends BaseAPI {\n\n    /**\n     * deleteExam\n     */\n    deleteExamUsingDELETE2({ code }: DeleteExamUsingDELETE2Request): Observable<ResponseEntity>\n    deleteExamUsingDELETE2({ code }: DeleteExamUsingDELETE2Request, opts?: OperationOpts): Observable<RawAjaxResponse<ResponseEntity>>\n    deleteExamUsingDELETE2({ code }: DeleteExamUsingDELETE2Request, opts?: OperationOpts): Observable<ResponseEntity | RawAjaxResponse<ResponseEntity>> {\n        throwIfNullOrUndefined(code, 'code', 'deleteExamUsingDELETE2');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<ResponseEntity>({\n            url: '/laboratories/{code}'.replace('{code}', encodeURI(code)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getLaboratoryForPrint\n     */\n    getLaboratoryForPrintUsingGET({ dateFrom, dateTo, examName }: GetLaboratoryForPrintUsingGETRequest): Observable<Array<LaboratoryForPrintDTO>>\n    getLaboratoryForPrintUsingGET({ dateFrom, dateTo, examName }: GetLaboratoryForPrintUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<LaboratoryForPrintDTO>>>\n    getLaboratoryForPrintUsingGET({ dateFrom, dateTo, examName }: GetLaboratoryForPrintUsingGETRequest, opts?: OperationOpts): Observable<Array<LaboratoryForPrintDTO> | RawAjaxResponse<Array<LaboratoryForPrintDTO>>> {\n        throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getLaboratoryForPrintUsingGET');\n        throwIfNullOrUndefined(dateTo, 'dateTo', 'getLaboratoryForPrintUsingGET');\n        throwIfNullOrUndefined(examName, 'examName', 'getLaboratoryForPrintUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'dateFrom': (dateFrom as any).toISOString(),\n            'dateTo': (dateTo as any).toISOString(),\n            'examName': examName,\n        };\n\n        return this.request<Array<LaboratoryForPrintDTO>>({\n            url: '/laboratories/exams',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getLaboratory\n     */\n    getLaboratoryUsingGET({ patId }: GetLaboratoryUsingGETRequest): Observable<Array<LaboratoryDTO>>\n    getLaboratoryUsingGET({ patId }: GetLaboratoryUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<LaboratoryDTO>>>\n    getLaboratoryUsingGET({ patId }: GetLaboratoryUsingGETRequest, opts?: OperationOpts): Observable<Array<LaboratoryDTO> | RawAjaxResponse<Array<LaboratoryDTO>>> {\n        throwIfNullOrUndefined(patId, 'patId', 'getLaboratoryUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<LaboratoryDTO>>({\n            url: '/laboratories/byPatientId/{patId}'.replace('{patId}', encodeURI(patId)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getLaboratory\n     */\n    getLaboratoryUsingGET1(): Observable<Array<LaboratoryDTO>>\n    getLaboratoryUsingGET1(opts?: OperationOpts): Observable<RawAjaxResponse<Array<LaboratoryDTO>>>\n    getLaboratoryUsingGET1(opts?: OperationOpts): Observable<Array<LaboratoryDTO> | RawAjaxResponse<Array<LaboratoryDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<LaboratoryDTO>>({\n            url: '/laboratories',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMaterials\n     */\n    getMaterialsUsingGET(): Observable<Array<string>>\n    getMaterialsUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<string>>>\n    getMaterialsUsingGET(opts?: OperationOpts): Observable<Array<string> | RawAjaxResponse<Array<string>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<string>>({\n            url: '/laboratories/materials',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newLaboratory2\n     */\n    newLaboratory2UsingPOST({ labsWithRows }: NewLaboratory2UsingPOSTRequest): Observable<ResponseEntity>\n    newLaboratory2UsingPOST({ labsWithRows }: NewLaboratory2UsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ResponseEntity>>\n    newLaboratory2UsingPOST({ labsWithRows }: NewLaboratory2UsingPOSTRequest, opts?: OperationOpts): Observable<ResponseEntity | RawAjaxResponse<ResponseEntity>> {\n        throwIfNullOrUndefined(labsWithRows, 'labsWithRows', 'newLaboratory2UsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<ResponseEntity>({\n            url: '/laboratories/insertList',\n            method: 'POST',\n            headers,\n            body: labsWithRows,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newLaboratory\n     */\n    newLaboratoryUsingPOST({ labWithRowsDTO }: NewLaboratoryUsingPOSTRequest): Observable<boolean>\n    newLaboratoryUsingPOST({ labWithRowsDTO }: NewLaboratoryUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newLaboratoryUsingPOST({ labWithRowsDTO }: NewLaboratoryUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(labWithRowsDTO, 'labWithRowsDTO', 'newLaboratoryUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/laboratories',\n            method: 'POST',\n            headers,\n            body: labWithRowsDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateLaboratory\n     */\n    updateLaboratoryUsingPUT({ code, labWithRowsDTO }: UpdateLaboratoryUsingPUTRequest): Observable<ResponseEntity>\n    updateLaboratoryUsingPUT({ code, labWithRowsDTO }: UpdateLaboratoryUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ResponseEntity>>\n    updateLaboratoryUsingPUT({ code, labWithRowsDTO }: UpdateLaboratoryUsingPUTRequest, opts?: OperationOpts): Observable<ResponseEntity | RawAjaxResponse<ResponseEntity>> {\n        throwIfNullOrUndefined(code, 'code', 'updateLaboratoryUsingPUT');\n        throwIfNullOrUndefined(labWithRowsDTO, 'labWithRowsDTO', 'updateLaboratoryUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<ResponseEntity>({\n            url: '/laboratories/{code}'.replace('{code}', encodeURI(code)),\n            method: 'PUT',\n            headers,\n            body: labWithRowsDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}