{"ast":null,"code":"import isEmpty from \"lodash.isempty\";\nimport { Configuration, DiseaseControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { GET_DISEASE_FAIL, GET_DISEASE_LOADING, GET_DISEASE_SUCCESS } from \"./consts\";\nconst desaseControllerApi = new DiseaseControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const getDiseasesOpd = () => dispatch => {\n  dispatch({\n    type: GET_DISEASE_LOADING\n  });\n  desaseControllerApi.getDiseasesOpdUsingGET().subscribe(payload => {\n    if (typeof payload === \"object\" && !isEmpty(payload)) {\n      dispatch({\n        type: GET_DISEASE_SUCCESS,\n        payload: payload\n      });\n    } else {\n      dispatch({\n        type: GET_DISEASE_SUCCESS,\n        payload: []\n      });\n    }\n  }, error => {\n    dispatch({\n      type: GET_DISEASE_FAIL,\n      error\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/state/diseases/actions.ts"],"names":["isEmpty","Configuration","DiseaseControllerApi","applyTokenMiddleware","GET_DISEASE_FAIL","GET_DISEASE_LOADING","GET_DISEASE_SUCCESS","desaseControllerApi","middleware","getDiseasesOpd","dispatch","type","getDiseasesOpdUsingGET","subscribe","payload","error"],"mappings":"AACA,OAAOA,OAAP,MAAoB,gBAApB;AAEA,SACEC,aADF,EAEEC,oBAFF,QAIO,iBAJP;AAKA,SAASC,oBAAT,QAAqC,+CAArC;AAEA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,UAJP;AAMA,MAAMC,mBAAmB,GAAG,IAAIL,oBAAJ,CAC1B,IAAID,aAAJ,CAAkB;AAAEO,EAAAA,UAAU,EAAE,CAACL,oBAAD;AAAd,CAAlB,CAD0B,CAA5B;AAIA,OAAO,MAAMM,cAAc,GACzB,MACCC,QAAD,IAAyD;AACvDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEN;AADC,GAAD,CAAR;AAGAE,EAAAA,mBAAmB,CAACK,sBAApB,GAA6CC,SAA7C,CACGC,OAAD,IAAa;AACX,QAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACd,OAAO,CAACc,OAAD,CAA3C,EAAsD;AACpDJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,mBADC;AAEPQ,QAAAA,OAAO,EAAEA;AAFF,OAAD,CAAR;AAID,KALD,MAKO;AACLJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,mBADC;AAEPQ,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AACF,GAbH,EAcGC,KAAD,IAAW;AACTL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,gBADC;AAEPW,MAAAA;AAFO,KAAD,CAAR;AAID,GAnBH;AAqBD,CA3BI","sourcesContent":["import { format } from \"date-fns\";\nimport isEmpty from \"lodash.isempty\";\nimport { Dispatch } from \"redux\";\nimport {\n  Configuration,\n  DiseaseControllerApi,\n  DiseaseDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { IAction } from \"../types\";\nimport {\n  GET_DISEASE_FAIL,\n  GET_DISEASE_LOADING,\n  GET_DISEASE_SUCCESS,\n} from \"./consts\";\n\nconst desaseControllerApi = new DiseaseControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const getDiseasesOpd =\n  () =>\n  (dispatch: Dispatch<IAction<DiseaseDTO[], {}>>): void => {\n    dispatch({\n      type: GET_DISEASE_LOADING,\n    });\n    desaseControllerApi.getDiseasesOpdUsingGET().subscribe(\n      (payload) => {\n        if (typeof payload === \"object\" && !isEmpty(payload)) {\n          dispatch({\n            type: GET_DISEASE_SUCCESS,\n            payload: payload,\n          });\n        } else {\n          dispatch({\n            type: GET_DISEASE_SUCCESS,\n            payload: [],\n          });\n        }\n      },\n      (error) => {\n        dispatch({\n          type: GET_DISEASE_FAIL,\n          error,\n        });\n      }\n    );\n  };\n"]},"metadata":{},"sourceType":"module"}