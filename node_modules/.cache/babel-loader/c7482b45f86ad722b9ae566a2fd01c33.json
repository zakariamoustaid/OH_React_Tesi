{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class MedicalStockWardControllerApi extends BaseAPI {\n  /**\n   * getCurrentQuantityInWard\n   */\n  getCurrentQuantityInWardUsingGET({\n    medId,\n    wardCode\n  }, opts) {\n    throwIfNullOrUndefined(medId, 'medId', 'getCurrentQuantityInWardUsingGET');\n    throwIfNullOrUndefined(wardCode, 'wardCode', 'getCurrentQuantityInWardUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'med_id': medId\n    };\n    return this.request({\n      url: '/medicalstockward/current/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMedicalsWardUsingGET({\n    wardCode\n  }, opts) {\n    throwIfNullOrUndefined(wardCode, 'wardCode', 'getMedicalsWardUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicalstockward/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMovementWardUsingGET({\n    from,\n    to,\n    wardCode\n  }, opts) {\n    throwIfNullOrUndefined(from, 'from', 'getMovementWardUsingGET');\n    throwIfNullOrUndefined(to, 'to', 'getMovementWardUsingGET');\n    throwIfNullOrUndefined(wardCode, 'wardCode', 'getMovementWardUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'from': from.toISOString(),\n      'to': to.toISOString()\n    };\n    return this.request({\n      url: '/medicalstockward/movements/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMovementWardUsingGET1(opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicalstockward/movements',\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getWardMovementsToWardUsingGET({\n    from,\n    targetWardCode,\n    to\n  }, opts) {\n    throwIfNullOrUndefined(from, 'from', 'getWardMovementsToWardUsingGET');\n    throwIfNullOrUndefined(targetWardCode, 'targetWardCode', 'getWardMovementsToWardUsingGET');\n    throwIfNullOrUndefined(to, 'to', 'getWardMovementsToWardUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {\n      // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n      'from': from.toISOString(),\n      'to': to.toISOString()\n    };\n    return this.request({\n      url: '/medicalstockward/movements/to/{target_ward_code}'.replace('{target_ward_code}', encodeURI(targetWardCode)),\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newMovementWardUsingPOST({\n    newMovementDTOs\n  }, opts) {\n    throwIfNullOrUndefined(newMovementDTOs, 'newMovementDTOs', 'newMovementWardUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicalstockward/movements/all',\n      method: 'POST',\n      headers,\n      body: newMovementDTOs\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newMovementWardUsingPOST1({\n    newMovementDTO\n  }, opts) {\n    throwIfNullOrUndefined(newMovementDTO, 'newMovementDTO', 'newMovementWardUsingPOST1');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicalstockward/movements',\n      method: 'POST',\n      headers,\n      body: newMovementDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateMovementWardUsingPUT({\n    movementWardDTO\n  }, opts) {\n    throwIfNullOrUndefined(movementWardDTO, 'movementWardDTO', 'updateMovementWardUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicalstockward/movements',\n      method: 'PUT',\n      headers,\n      body: movementWardDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/generated/apis/MedicalStockWardControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","MedicalStockWardControllerApi","getCurrentQuantityInWardUsingGET","medId","wardCode","opts","headers","configuration","apiKey","query","request","url","replace","method","responseOpts","getMedicalsWardUsingGET","getMovementWardUsingGET","from","to","toISOString","getMovementWardUsingGET1","getWardMovementsToWardUsingGET","targetWardCode","newMovementWardUsingPOST","newMovementDTOs","body","newMovementWardUsingPOST1","newMovementDTO","updateMovementWardUsingPUT","movementWardDTO"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    MedicalWardDTO,\n    MovementWardDTO,\n} from '../models';\n\nexport interface GetCurrentQuantityInWardUsingGETRequest {\n    medId: number;\n    wardCode: string;\n}\n\nexport interface GetMedicalsWardUsingGETRequest {\n    wardCode: string;\n}\n\nexport interface GetMovementWardUsingGETRequest {\n    from: string;\n    to: string;\n    wardCode: string;\n}\n\nexport interface GetWardMovementsToWardUsingGETRequest {\n    from: string;\n    targetWardCode: string;\n    to: string;\n}\n\nexport interface NewMovementWardUsingPOSTRequest {\n    newMovementDTOs: Array<MovementWardDTO>;\n}\n\nexport interface NewMovementWardUsingPOST1Request {\n    newMovementDTO: MovementWardDTO;\n}\n\nexport interface UpdateMovementWardUsingPUTRequest {\n    movementWardDTO: MovementWardDTO;\n}\n\n/**\n * no description\n */\nexport class MedicalStockWardControllerApi extends BaseAPI {\n\n    /**\n     * getCurrentQuantityInWard\n     */\n    getCurrentQuantityInWardUsingGET({ medId, wardCode }: GetCurrentQuantityInWardUsingGETRequest): Observable<number>\n    getCurrentQuantityInWardUsingGET({ medId, wardCode }: GetCurrentQuantityInWardUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>\n    getCurrentQuantityInWardUsingGET({ medId, wardCode }: GetCurrentQuantityInWardUsingGETRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {\n        throwIfNullOrUndefined(medId, 'medId', 'getCurrentQuantityInWardUsingGET');\n        throwIfNullOrUndefined(wardCode, 'wardCode', 'getCurrentQuantityInWardUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'med_id': medId,\n        };\n\n        return this.request<number>({\n            url: '/medicalstockward/current/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMedicalsWard\n     */\n    getMedicalsWardUsingGET({ wardCode }: GetMedicalsWardUsingGETRequest): Observable<Array<MedicalWardDTO>>\n    getMedicalsWardUsingGET({ wardCode }: GetMedicalsWardUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MedicalWardDTO>>>\n    getMedicalsWardUsingGET({ wardCode }: GetMedicalsWardUsingGETRequest, opts?: OperationOpts): Observable<Array<MedicalWardDTO> | RawAjaxResponse<Array<MedicalWardDTO>>> {\n        throwIfNullOrUndefined(wardCode, 'wardCode', 'getMedicalsWardUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<MedicalWardDTO>>({\n            url: '/medicalstockward/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMovementWard\n     */\n    getMovementWardUsingGET({ from, to, wardCode }: GetMovementWardUsingGETRequest): Observable<Array<MovementWardDTO>>\n    getMovementWardUsingGET({ from, to, wardCode }: GetMovementWardUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementWardDTO>>>\n    getMovementWardUsingGET({ from, to, wardCode }: GetMovementWardUsingGETRequest, opts?: OperationOpts): Observable<Array<MovementWardDTO> | RawAjaxResponse<Array<MovementWardDTO>>> {\n        throwIfNullOrUndefined(from, 'from', 'getMovementWardUsingGET');\n        throwIfNullOrUndefined(to, 'to', 'getMovementWardUsingGET');\n        throwIfNullOrUndefined(wardCode, 'wardCode', 'getMovementWardUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'from': (from as any).toISOString(),\n            'to': (to as any).toISOString(),\n        };\n\n        return this.request<Array<MovementWardDTO>>({\n            url: '/medicalstockward/movements/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMovementWard\n     */\n    getMovementWardUsingGET1(): Observable<Array<MovementWardDTO>>\n    getMovementWardUsingGET1(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementWardDTO>>>\n    getMovementWardUsingGET1(opts?: OperationOpts): Observable<Array<MovementWardDTO> | RawAjaxResponse<Array<MovementWardDTO>>> {\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<Array<MovementWardDTO>>({\n            url: '/medicalstockward/movements',\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getWardMovementsToWard\n     */\n    getWardMovementsToWardUsingGET({ from, targetWardCode, to }: GetWardMovementsToWardUsingGETRequest): Observable<Array<MovementWardDTO>>\n    getWardMovementsToWardUsingGET({ from, targetWardCode, to }: GetWardMovementsToWardUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementWardDTO>>>\n    getWardMovementsToWardUsingGET({ from, targetWardCode, to }: GetWardMovementsToWardUsingGETRequest, opts?: OperationOpts): Observable<Array<MovementWardDTO> | RawAjaxResponse<Array<MovementWardDTO>>> {\n        throwIfNullOrUndefined(from, 'from', 'getWardMovementsToWardUsingGET');\n        throwIfNullOrUndefined(targetWardCode, 'targetWardCode', 'getWardMovementsToWardUsingGET');\n        throwIfNullOrUndefined(to, 'to', 'getWardMovementsToWardUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined\n            'from': (from as any).toISOString(),\n            'to': (to as any).toISOString(),\n        };\n\n        return this.request<Array<MovementWardDTO>>({\n            url: '/medicalstockward/movements/to/{target_ward_code}'.replace('{target_ward_code}', encodeURI(targetWardCode)),\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newMovementWard\n     */\n    newMovementWardUsingPOST({ newMovementDTOs }: NewMovementWardUsingPOSTRequest): Observable<boolean>\n    newMovementWardUsingPOST({ newMovementDTOs }: NewMovementWardUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newMovementWardUsingPOST({ newMovementDTOs }: NewMovementWardUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(newMovementDTOs, 'newMovementDTOs', 'newMovementWardUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/medicalstockward/movements/all',\n            method: 'POST',\n            headers,\n            body: newMovementDTOs,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newMovementWard\n     */\n    newMovementWardUsingPOST1({ newMovementDTO }: NewMovementWardUsingPOST1Request): Observable<boolean>\n    newMovementWardUsingPOST1({ newMovementDTO }: NewMovementWardUsingPOST1Request, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    newMovementWardUsingPOST1({ newMovementDTO }: NewMovementWardUsingPOST1Request, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(newMovementDTO, 'newMovementDTO', 'newMovementWardUsingPOST1');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/medicalstockward/movements',\n            method: 'POST',\n            headers,\n            body: newMovementDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateMovementWard\n     */\n    updateMovementWardUsingPUT({ movementWardDTO }: UpdateMovementWardUsingPUTRequest): Observable<boolean>\n    updateMovementWardUsingPUT({ movementWardDTO }: UpdateMovementWardUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    updateMovementWardUsingPUT({ movementWardDTO }: UpdateMovementWardUsingPUTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(movementWardDTO, 'movementWardDTO', 'updateMovementWardUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/medicalstockward/movements',\n            method: 'PUT',\n            headers,\n            body: movementWardDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}