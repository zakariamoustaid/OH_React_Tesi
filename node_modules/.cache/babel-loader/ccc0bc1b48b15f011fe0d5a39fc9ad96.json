{"ast":null,"code":"import { Configuration, OpdControllerApi } from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { opdDataFormatter } from \"../../libraries/formatUtils/dataFormatting\";\nimport { CREATE_OPD_RESET, CREATE_OPD_LOADING, CREATE_OPD_SUCCESS, CREATE_OPD_FAIL, GET_OPD_FAIL, GET_OPD_LOADING, GET_OPD_SUCCESS, GET_OPD_SUCCESS_EMPTY } from \"./consts\";\nconst opdControllerApi = new OpdControllerApi(new Configuration({\n  middleware: [applyTokenMiddleware]\n}));\nexport const createOpd = (opdValues, diseaseList) => dispatch => {\n  dispatch({\n    type: CREATE_OPD_LOADING\n  });\n  const opdDTO = opdDataFormatter(opdValues, diseaseList);\n  opdControllerApi.newOpdUsingPOST({\n    opdDTO\n  }).subscribe(() => {\n    dispatch({\n      type: CREATE_OPD_SUCCESS\n    });\n  }, error => {\n    dispatch({\n      type: CREATE_OPD_FAIL,\n      error\n    });\n  });\n};\nexport const createOpdReset = () => dispatch => {\n  dispatch({\n    type: CREATE_OPD_RESET\n  });\n};\nexport const getOpds = code => dispatch => {\n  dispatch({\n    type: GET_OPD_LOADING\n  });\n\n  if (code) {\n    opdControllerApi.getOpdByPatientUsingGET({\n      pcode: code\n    }).subscribe(payload => {\n      if (Array.isArray(payload) && payload.length > 0) {\n        dispatch({\n          type: GET_OPD_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: GET_OPD_SUCCESS_EMPTY,\n          payload: []\n        });\n      }\n    }, error => {\n      dispatch({\n        type: GET_OPD_FAIL,\n        error\n      });\n    });\n  } else {\n    dispatch({\n      type: GET_OPD_FAIL,\n      error: \"patient code should not be empty\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/state/opds/actions.ts"],"names":["Configuration","OpdControllerApi","applyTokenMiddleware","opdDataFormatter","CREATE_OPD_RESET","CREATE_OPD_LOADING","CREATE_OPD_SUCCESS","CREATE_OPD_FAIL","GET_OPD_FAIL","GET_OPD_LOADING","GET_OPD_SUCCESS","GET_OPD_SUCCESS_EMPTY","opdControllerApi","middleware","createOpd","opdValues","diseaseList","dispatch","type","opdDTO","newOpdUsingPOST","subscribe","error","createOpdReset","getOpds","code","getOpdByPatientUsingGET","pcode","payload","Array","isArray","length"],"mappings":"AACA,SACEA,aADF,EAGEC,gBAHF,QAKO,iBALP;AAMA,SAASC,oBAAT,QAAqC,+CAArC;AACA,SAASC,gBAAT,QAAiC,4CAAjC;AAEA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,YALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,qBARF,QASO,UATP;AAWA,MAAMC,gBAAgB,GAAG,IAAIX,gBAAJ,CACvB,IAAID,aAAJ,CAAkB;AAAEa,EAAAA,UAAU,EAAE,CAACX,oBAAD;AAAd,CAAlB,CADuB,CAAzB;AAIA,OAAO,MAAMY,SAAS,GACpB,CAACC,SAAD,EAAiCC,WAAjC,KACCC,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEb;AADC,GAAD,CAAR;AAGA,QAAMc,MAAM,GAAGhB,gBAAgB,CAACY,SAAD,EAAYC,WAAZ,CAA/B;AACAJ,EAAAA,gBAAgB,CAACQ,eAAjB,CAAiC;AAAED,IAAAA;AAAF,GAAjC,EAA6CE,SAA7C,CACE,MAAM;AACJJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAGD,GALH,EAMGgB,KAAD,IAAW;AACTL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX,eADC;AAEPe,MAAAA;AAFO,KAAD,CAAR;AAID,GAXH;AAaD,CApBI;AAsBP,OAAO,MAAMC,cAAc,GACzB,MACCN,QAAD,IAAiD;AAC/CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEd;AADC,GAAD,CAAR;AAGD,CANI;AAQP,OAAO,MAAMoB,OAAO,GACjBC,IAAD,IACCR,QAAD,IAAqD;AACnDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR;;AAGA,MAAIgB,IAAJ,EAAU;AACRb,IAAAA,gBAAgB,CACbc,uBADH,CAC2B;AACvBC,MAAAA,KAAK,EAAEF;AADgB,KAD3B,EAIGJ,SAJH,CAKKO,OAAD,IAAa;AACX,UAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,KAA0BA,OAAO,CAACG,MAAR,GAAiB,CAA/C,EAAkD;AAChDd,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAER,eADC;AAEPkB,UAAAA,OAAO,EAAEA;AAFF,SAAD,CAAR;AAID,OALD,MAKO;AACLX,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEP,qBADC;AAEPiB,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAID;AACF,KAjBL,EAkBKN,KAAD,IAAW;AACTL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEV,YADC;AAEPc,QAAAA;AAFO,OAAD,CAAR;AAID,KAvBL;AAyBD,GA1BD,MA0BO;AACLL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,YADC;AAEPc,MAAAA,KAAK,EAAE;AAFA,KAAD,CAAR;AAID;AACF,CAtCI","sourcesContent":["import { Dispatch } from \"redux\";\nimport {\n  Configuration,\n  DiseaseDTO,\n  OpdControllerApi,\n  OpdDTO,\n} from \"../../generated\";\nimport { applyTokenMiddleware } from \"../../libraries/apiUtils/applyTokenMiddleware\";\nimport { opdDataFormatter } from \"../../libraries/formatUtils/dataFormatting\";\nimport { IAction } from \"../types\";\nimport {\n  CREATE_OPD_RESET,\n  CREATE_OPD_LOADING,\n  CREATE_OPD_SUCCESS,\n  CREATE_OPD_FAIL,\n  GET_OPD_FAIL,\n  GET_OPD_LOADING,\n  GET_OPD_SUCCESS,\n  GET_OPD_SUCCESS_EMPTY,\n} from \"./consts\";\n\nconst opdControllerApi = new OpdControllerApi(\n  new Configuration({ middleware: [applyTokenMiddleware] })\n);\n\nexport const createOpd =\n  (opdValues: Record<string, any>, diseaseList: DiseaseDTO[] | undefined) =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_OPD_LOADING,\n    });\n    const opdDTO = opdDataFormatter(opdValues, diseaseList);\n    opdControllerApi.newOpdUsingPOST({ opdDTO }).subscribe(\n      () => {\n        dispatch({\n          type: CREATE_OPD_SUCCESS,\n        });\n      },\n      (error) => {\n        dispatch({\n          type: CREATE_OPD_FAIL,\n          error,\n        });\n      }\n    );\n  };\n\nexport const createOpdReset =\n  () =>\n  (dispatch: Dispatch<IAction<null, {}>>): void => {\n    dispatch({\n      type: CREATE_OPD_RESET,\n    });\n  };\n\nexport const getOpds =\n  (code: number | undefined) =>\n  (dispatch: Dispatch<IAction<OpdDTO[], {}>>): void => {\n    dispatch({\n      type: GET_OPD_LOADING,\n    });\n    if (code) {\n      opdControllerApi\n        .getOpdByPatientUsingGET({\n          pcode: code,\n        })\n        .subscribe(\n          (payload) => {\n            if (Array.isArray(payload) && payload.length > 0) {\n              dispatch({\n                type: GET_OPD_SUCCESS,\n                payload: payload,\n              });\n            } else {\n              dispatch({\n                type: GET_OPD_SUCCESS_EMPTY,\n                payload: [],\n              });\n            }\n          },\n          (error) => {\n            dispatch({\n              type: GET_OPD_FAIL,\n              error,\n            });\n          }\n        );\n    } else {\n      dispatch({\n        type: GET_OPD_FAIL,\n        error: \"patient code should not be empty\",\n      });\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}