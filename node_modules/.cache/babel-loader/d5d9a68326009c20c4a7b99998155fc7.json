{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/activities/loginActivity/LoginActivity.tsx\";\nimport { InputAdornment } from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport { RemoveRedEye } from \"@material-ui/icons\";\nimport classNames from \"classnames\";\nimport { useFormik } from \"formik\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport { default as React, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { object, string } from \"yup\";\nimport logo from \"../../../assets/logo-color.svg\";\nimport { useAuthentication } from \"../../../libraries/authUtils/useAuthentication\";\nimport { setAuthenticationThunk } from \"../../../state/main/actions\";\nimport Button from \"../../accessories/button/Button\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport \"./styles.scss\";\n\nconst LoginActivity = ({\n  setAuthenticationThunk,\n  status\n}) => {\n  useAuthentication();\n  const {\n    t\n  } = useTranslation();\n  const initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n  const validationSchema = object({\n    username: string().required(t(\"login.insertavalidusername\")),\n    password: string().required(t(\"login.insertthepassword\"))\n  });\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: values => {\n      setAuthenticationThunk(values.username, values.password);\n    }\n  });\n  const [state, setState] = useState({\n    isPasswordVisible: false\n  });\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container login__background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Open Hospital\",\n    className: \"login__logo\",\n    width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Princeton-Plainsboro Teaching Hospital\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login__panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"login__panel__form\",\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login__panel__textField\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"username\"),\n    theme: \"regular\",\n    label: t(\"login.username\"),\n    isValid: isValid(\"username\"),\n    errorText: getErrorText(\"username\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login__panel__textField\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"password\"),\n    theme: \"regular\",\n    label: t(\"login.password\"),\n    type: state.isPasswordVisible ? \"text\" : \"password\",\n    isValid: isValid(\"password\"),\n    errorText: getErrorText(\"password\"),\n    onBlur: formik.handleBlur,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login__passwordToggler\",\n        onClick: () => setState({\n          isPasswordVisible: !state.isPasswordVisible\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(RemoveRedEye, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"login__invalidCredentials\", {\n      hidden: status !== \"FAIL\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, t(\"login.incorrectcredentials\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login__buttonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: status === \"LOADING\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, t(\"login.login\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    className: \"login__panel__resetPassword\",\n    component: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, t(\"login.forgotpassword\"))), \"\\u2003\"))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  status: state.main.authentication.status || \"IDLE\"\n});\n\nconst mapDispatchToProps = {\n  setAuthenticationThunk\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginActivity);","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/activities/loginActivity/LoginActivity.tsx"],"names":["InputAdornment","Link","RemoveRedEye","classNames","useFormik","get","has","default","React","useState","useTranslation","connect","object","string","useAuthentication","setAuthenticationThunk","Button","Footer","TextField","LoginActivity","status","t","initialValues","username","password","validationSchema","required","formik","onSubmit","values","state","setState","isPasswordVisible","isValid","fieldName","touched","errors","getErrorText","logo","handleSubmit","getFieldProps","handleBlur","endAdornment","hidden","mapStateToProps","main","authentication","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { InputAdornment } from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport { RemoveRedEye } from \"@material-ui/icons\";\nimport classNames from \"classnames\";\nimport { useFormik } from \"formik\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport { default as React, FunctionComponent, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { object, string } from \"yup\";\nimport logo from \"../../../assets/logo-color.svg\";\nimport { useAuthentication } from \"../../../libraries/authUtils/useAuthentication\";\nimport { setAuthenticationThunk } from \"../../../state/main/actions\";\nimport { IState } from \"../../../types\";\nimport Button from \"../../accessories/button/Button\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport TextField from \"../../accessories/textField/TextField\";\nimport \"./styles.scss\";\nimport { IDispatchProps, IStateProps, IValues, TProps } from \"./types\";\n\nconst LoginActivity: FunctionComponent<TProps> = ({\n  setAuthenticationThunk,\n  status,\n}) => {\n  useAuthentication();\n\n  const { t } = useTranslation();\n\n  const initialValues: IValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  const validationSchema = object({\n    username: string().required(t(\"login.insertavalidusername\")),\n    password: string().required(t(\"login.insertthepassword\")),\n  });\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: (values: IValues) => {\n      setAuthenticationThunk(values.username, values.password);\n    },\n  });\n\n  const [state, setState] = useState({ isPasswordVisible: false });\n\n  const isValid = (fieldName: string): boolean => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = (fieldName: string): string => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"container login__background\">\n        <img\n          src={logo}\n          alt=\"Open Hospital\"\n          className=\"login__logo\"\n          width=\"150px\"\n        />\n        <div className=\"login__title\">\n          Princeton-Plainsboro Teaching Hospital\n        </div>\n        <div className=\"login__panel\">\n          <form className=\"login__panel__form\" onSubmit={formik.handleSubmit}>\n            <div className=\"login__panel__textField\">\n              <TextField\n                field={formik.getFieldProps(\"username\")}\n                theme=\"regular\"\n                label={t(\"login.username\")}\n                isValid={isValid(\"username\")}\n                errorText={getErrorText(\"username\")}\n                onBlur={formik.handleBlur}\n              />\n            </div>\n            <div className=\"login__panel__textField\">\n              <TextField\n                field={formik.getFieldProps(\"password\")}\n                theme=\"regular\"\n                label={t(\"login.password\")}\n                type={state.isPasswordVisible ? \"text\" : \"password\"}\n                isValid={isValid(\"password\")}\n                errorText={getErrorText(\"password\")}\n                onBlur={formik.handleBlur}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <div\n                        className=\"login__passwordToggler\"\n                        onClick={() =>\n                          setState({\n                            isPasswordVisible: !state.isPasswordVisible,\n                          })\n                        }\n                      >\n                        <RemoveRedEye />\n                      </div>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </div>\n            <div\n              className={classNames(\"login__invalidCredentials\", {\n                hidden: status !== \"FAIL\",\n              })}\n            >\n              {t(\"login.incorrectcredentials\")}\n            </div>\n            <div className=\"login__buttonContainer\">\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={status === \"LOADING\"}\n              >\n                {t(\"login.login\")}\n              </Button>\n            </div>\n            <div>\n              <Link className=\"login__panel__resetPassword\" component=\"button\">\n                {t(\"login.forgotpassword\")}\n              </Link>\n            </div>\n            &emsp;\n          </form>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  status: state.main.authentication.status || \"IDLE\",\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  setAuthenticationThunk,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginActivity);\n"]},"metadata":{},"sourceType":"module"}