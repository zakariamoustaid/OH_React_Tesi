{"ast":null,"code":"var _jsxFileName = \"/home/zak/projects/OH_R/openhospital-ui/src/components/activities/newPatientActivity/NewPatientActivity.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport { createPatient, createPatientReset } from \"../../../state/patients/actions\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport ConfirmationDialog from \"../../accessories/confirmationDialog/ConfirmationDialog\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport InfoBox from \"../../accessories/infoBox/InfoBox\";\nimport PatientDataForm from \"../../accessories/patientDataForm/PatientDataForm\";\nimport { initialFields } from \"./consts\";\nimport \"./styles.scss\";\n\nconst NewPatientActivity = ({\n  userCredentials,\n  createPatient,\n  createPatientReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n  dashboardRoute\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.newpatient\")]: \"/new\"\n  };\n\n  const onSubmit = patient => {\n    createPatient(patient);\n  };\n\n  const [activityTransitionState, setActivityTransitionState] = useState(\"IDLE\");\n  useEffect(() => {\n    if (activityTransitionState === \"TO_NEW_PATIENT_RESET\" || activityTransitionState === \"TO_DASHBOARD\") {\n      createPatientReset();\n      setShouldResetForm(true);\n    }\n  }, [activityTransitionState, createPatientReset]);\n  const infoBoxRef = useRef(null);\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  switch (activityTransitionState) {\n    case \"TO_DASHBOARD\":\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: dashboardRoute,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AppHeader, {\n        userCredentials: userCredentials,\n        breadcrumbMap: breadcrumbMap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient__background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"newPatient__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }, t(\"nav.newpatient\")), /*#__PURE__*/React.createElement(PatientDataForm, {\n        fields: initialFields,\n        onSubmit: onSubmit,\n        submitButtonLabel: t(\"common.submit\"),\n        resetButtonLabel: t(\"common.clearall\"),\n        isLoading: isLoading,\n        shouldResetForm: shouldResetForm,\n        resetFormCallback: resetFormCallback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        ref: infoBoxRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, hasFailed && /*#__PURE__*/React.createElement(InfoBox, {\n        type: \"error\",\n        message: t(\"common.somethingwrong\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n        isOpen: hasSucceeded,\n        title: \"Patient Created\",\n        icon: checkIcon,\n        info: t(\"common.patientregistrationsuccessfull\"),\n        primaryButtonLabel: t(\"common.dashboard\"),\n        secondaryButtonLabel: t(\"common.keepediting\"),\n        handlePrimaryButtonClick: () => setActivityTransitionState(\"TO_DASHBOARD\"),\n        handleSecondaryButtonClick: () => setActivityTransitionState(\"TO_NEW_PATIENT_RESET\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }));\n  }\n};\n\nconst mapStateToProps = state => ({\n  userCredentials: state.main.authentication.data,\n  isLoading: state.patients.createPatient.status === \"LOADING\",\n  hasSucceeded: state.patients.createPatient.status === \"SUCCESS\",\n  hasFailed: state.patients.createPatient.status === \"FAIL\"\n});\n\nconst mapDispatchToProps = {\n  createPatient,\n  createPatientReset\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPatientActivity);","map":{"version":3,"sources":["/home/zak/projects/OH_R/openhospital-ui/src/components/activities/newPatientActivity/NewPatientActivity.tsx"],"names":["React","useEffect","useRef","useState","useTranslation","connect","Redirect","checkIcon","scrollToElement","createPatient","createPatientReset","AppHeader","ConfirmationDialog","Footer","InfoBox","PatientDataForm","initialFields","NewPatientActivity","userCredentials","isLoading","hasSucceeded","hasFailed","dashboardRoute","t","breadcrumbMap","onSubmit","patient","activityTransitionState","setActivityTransitionState","setShouldResetForm","infoBoxRef","current","shouldResetForm","resetFormCallback","mapStateToProps","state","main","authentication","data","patients","status","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport checkIcon from \"../../../assets/check-icon.png\";\nimport { PatientDTO } from \"../../../generated\";\nimport { scrollToElement } from \"../../../libraries/uiUtils/scrollToElement\";\nimport {\n  createPatient,\n  createPatientReset,\n} from \"../../../state/patients/actions\";\nimport { IState } from \"../../../types\";\nimport AppHeader from \"../../accessories/appHeader/AppHeader\";\nimport ConfirmationDialog from \"../../accessories/confirmationDialog/ConfirmationDialog\";\nimport Footer from \"../../accessories/footer/Footer\";\nimport InfoBox from \"../../accessories/infoBox/InfoBox\";\nimport PatientDataForm from \"../../accessories/patientDataForm/PatientDataForm\";\nimport { initialFields } from \"./consts\";\nimport \"./styles.scss\";\nimport {\n  IDispatchProps,\n  IStateProps,\n  TActivityTransitionState,\n  TProps,\n} from \"./types\";\n\nconst NewPatientActivity: FunctionComponent<TProps> = ({\n  userCredentials,\n  createPatient,\n  createPatientReset,\n  isLoading,\n  hasSucceeded,\n  hasFailed,\n  dashboardRoute,\n}) => {\n  const { t } = useTranslation();\n  const breadcrumbMap = {\n    [t(\"nav.dashboard\")]: \"/\",\n    [t(\"nav.newpatient\")]: \"/new\",\n  };\n\n  const onSubmit = (patient: PatientDTO) => {\n    createPatient(patient);\n  };\n\n  const [activityTransitionState, setActivityTransitionState] =\n    useState<TActivityTransitionState>(\"IDLE\");\n\n  useEffect(() => {\n    if (\n      activityTransitionState === \"TO_NEW_PATIENT_RESET\" ||\n      activityTransitionState === \"TO_DASHBOARD\"\n    ) {\n      createPatientReset();\n      setShouldResetForm(true);\n    }\n  }, [activityTransitionState, createPatientReset]);\n\n  const infoBoxRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (hasFailed) {\n      scrollToElement(infoBoxRef.current);\n    }\n  }, [hasFailed]);\n\n  const [shouldResetForm, setShouldResetForm] = useState(false);\n\n  const resetFormCallback = () => {\n    setShouldResetForm(false);\n    setActivityTransitionState(\"IDLE\");\n    scrollToElement(null);\n  };\n\n  switch (activityTransitionState) {\n    case \"TO_DASHBOARD\":\n      return <Redirect to={dashboardRoute} />;\n    default:\n      return (\n        <div className=\"newPatient\">\n          <AppHeader\n            userCredentials={userCredentials}\n            breadcrumbMap={breadcrumbMap}\n          />\n          <div className=\"newPatient__background\">\n            <div className=\"newPatient__content\">\n              <div className=\"newPatient__title\">{t(\"nav.newpatient\")}</div>\n              <PatientDataForm\n                fields={initialFields}\n                onSubmit={onSubmit}\n                submitButtonLabel={t(\"common.submit\")}\n                resetButtonLabel={t(\"common.clearall\")}\n                isLoading={isLoading}\n                shouldResetForm={shouldResetForm}\n                resetFormCallback={resetFormCallback}\n              />\n            </div>\n          </div>\n          <div ref={infoBoxRef}>\n            {hasFailed && (\n              <InfoBox type=\"error\" message={t(\"common.somethingwrong\")} />\n            )}\n          </div>\n          <ConfirmationDialog\n            isOpen={hasSucceeded}\n            title=\"Patient Created\"\n            icon={checkIcon}\n            info={t(\"common.patientregistrationsuccessfull\")}\n            primaryButtonLabel={t(\"common.dashboard\")}\n            secondaryButtonLabel={t(\"common.keepediting\")}\n            handlePrimaryButtonClick={() =>\n              setActivityTransitionState(\"TO_DASHBOARD\")\n            }\n            handleSecondaryButtonClick={() =>\n              setActivityTransitionState(\"TO_NEW_PATIENT_RESET\")\n            }\n          />\n          <Footer />\n        </div>\n      );\n  }\n};\n\nconst mapStateToProps = (state: IState): IStateProps => ({\n  userCredentials: state.main.authentication.data,\n  isLoading: state.patients.createPatient.status === \"LOADING\",\n  hasSucceeded: state.patients.createPatient.status === \"SUCCESS\",\n  hasFailed: state.patients.createPatient.status === \"FAIL\",\n});\n\nconst mapDispatchToProps: IDispatchProps = {\n  createPatient,\n  createPatientReset,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPatientActivity);\n"]},"metadata":{},"sourceType":"module"}