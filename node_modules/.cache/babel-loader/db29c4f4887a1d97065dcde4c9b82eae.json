{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientOPD/patientOPDForm/PatientOPDForm.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { formatAllFieldValues, getFromFields } from \"../../../../libraries/formDataHandling/functions\";\nimport DateField from \"../../dateField/DateField\";\nimport { object, string } from \"yup\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport TextButton from \"../../textButton/TextButton\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport TextField from \"../../textField/TextField\";\nimport has from \"lodash.has\";\nimport get from \"lodash.get\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport SelectField from \"../../selectField/SelectField\";\n\nconst PatientOPDForm = ({\n  fields,\n  onSubmit,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n  shouldResetForm,\n  resetFormCallback\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const validationSchema = object({\n    date: string().required(t(\"common.required\")),\n    disease: string().required(t(\"common.required\")),\n    disease2: string().test({\n      name: \"disease2\",\n      message: t(\"opd.validatedisease\"),\n      test: function (value) {\n        return !value || this.parent.disease && value !== this.parent.disease;\n      }\n    }),\n    disease3: string().test({\n      name: \"disease3\",\n      message: t(\"opd.validatedisease\"),\n      test: function (value) {\n        return !value || this.parent.disease && this.parent.disease2 && value !== this.parent.disease && value !== this.parent.disease2;\n      }\n    })\n  });\n  const initialValues = getFromFields(fields, \"value\");\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    }\n  });\n  const {\n    values,\n    setFieldValue,\n    resetForm,\n    handleBlur\n  } = formik;\n  const dateFieldHandleOnChange = useCallback(fieldName => value => {\n    setFieldValue(fieldName, value);\n  }, [setFieldValue]);\n\n  const diseasesOptionsSelector = state => {\n    return state.diseases.diseasesOpd.data ? state.diseases.diseasesOpd.data.map(item => {\n      return {\n        value: item.code + \"\",\n        label: item.description + \"\"\n      };\n    }) : [];\n  };\n\n  const diseasesOptions = useSelector(state => diseasesOptionsSelector(state));\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n  const onBlurCallback = useCallback(fieldName => (e, value) => {\n    handleBlur(e);\n    setFieldValue(fieldName, value);\n  }, [setFieldValue, handleBlur]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"patientOpdForm__form\",\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateField, {\n    fieldName: \"date\",\n    fieldValue: formik.values.date,\n    disableFuture: true,\n    theme: \"regular\",\n    format: \"dd/MM/yyyy\",\n    isValid: isValid(\"date\"),\n    errorText: getErrorText(\"date\"),\n    label: t(\"opd.dateopd\"),\n    onChange: dateFieldHandleOnChange(\"date\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__item fullWith\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"anamnesis\"),\n    multiline: true,\n    theme: \"regular\",\n    label: t(\"opd.anamnesis\"),\n    isValid: isValid(\"anamnesis\"),\n    errorText: getErrorText(\"anamnesis\"),\n    onBlur: formik.handleBlur,\n    type: \"string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__item fullWith\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"disease\",\n    fieldValue: formik.values.disease,\n    label: t(\"opd.disease1\"),\n    isValid: isValid(\"disease\"),\n    errorText: getErrorText(\"disease\"),\n    onBlur: onBlurCallback(\"disease\"),\n    options: diseasesOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__item fullWith\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"disease2\",\n    fieldValue: formik.values.disease2,\n    label: t(\"opd.disease2\"),\n    isValid: isValid(\"disease2\"),\n    errorText: getErrorText(\"disease2\"),\n    onBlur: onBlurCallback(\"disease2\"),\n    options: diseasesOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__item fullWith\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"disease3\",\n    fieldValue: formik.values.disease3,\n    label: t(\"opd.disease3\"),\n    isValid: isValid(\"disease3\"),\n    errorText: getErrorText(\"disease3\"),\n    onBlur: onBlurCallback(\"disease3\"),\n    options: diseasesOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__item fullWith\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"note\"),\n    multiline: true,\n    theme: \"regular\",\n    label: t(\"opd.note\"),\n    isValid: isValid(\"note\"),\n    errorText: getErrorText(\"note\"),\n    onBlur: formik.handleBlur,\n    type: \"string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientOpdForm__buttonSet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SmallButton, {\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, submitButtonLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => setOpenResetConfirmation(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, resetButtonLabel))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: openResetConfirmation,\n    title: resetButtonLabel.toUpperCase(),\n    info: t(\"common.resetform\", {\n      resetButtonLabel\n    }),\n    icon: warningIcon,\n    primaryButtonLabel: resetButtonLabel,\n    secondaryButtonLabel: t(\"common.dismiss\"),\n    handlePrimaryButtonClick: handleResetConfirmation,\n    handleSecondaryButtonClick: () => setOpenResetConfirmation(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default PatientOPDForm;","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientOPD/patientOPDForm/PatientOPDForm.tsx"],"names":["React","useCallback","useEffect","useState","useFormik","formatAllFieldValues","getFromFields","DateField","object","string","ConfirmationDialog","TextButton","SmallButton","warningIcon","TextField","has","get","useTranslation","useSelector","SelectField","PatientOPDForm","fields","onSubmit","submitButtonLabel","resetButtonLabel","isLoading","shouldResetForm","resetFormCallback","t","validationSchema","date","required","disease","disease2","test","name","message","value","parent","disease3","initialValues","formik","enableReinitialize","values","formattedValues","setFieldValue","resetForm","handleBlur","dateFieldHandleOnChange","fieldName","diseasesOptionsSelector","state","diseases","diseasesOpd","data","map","item","code","label","description","diseasesOptions","isValid","touched","errors","getErrorText","openResetConfirmation","setOpenResetConfirmation","handleResetConfirmation","onBlurCallback","e","handleSubmit","getFieldProps","toUpperCase"],"mappings":"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","sourcesContent":["import React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useFormik } from \"formik\";\nimport {\n  formatAllFieldValues,\n  getFromFields,\n} from \"../../../../libraries/formDataHandling/functions\";\nimport DateField from \"../../dateField/DateField\";\nimport { object, string } from \"yup\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport TextButton from \"../../textButton/TextButton\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport TextField from \"../../textField/TextField\";\nimport has from \"lodash.has\";\nimport get from \"lodash.get\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { TProps } from \"./types\";\nimport { IState } from \"../../../../types\";\nimport { useSelector } from \"react-redux\";\nimport SelectField from \"../../selectField/SelectField\";\n\nconst PatientOPDForm: FunctionComponent<TProps> = ({\n  fields,\n  onSubmit,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n  shouldResetForm,\n  resetFormCallback,\n}) => {\n  const { t } = useTranslation();\n\n  const validationSchema = object({\n    date: string().required(t(\"common.required\")),\n    disease: string().required(t(\"common.required\")),\n    disease2: string().test({\n      name: \"disease2\",\n      message: t(\"opd.validatedisease\"),\n      test: function (value) {\n        return !value || (this.parent.disease && value !== this.parent.disease);\n      },\n    }),\n    disease3: string().test({\n      name: \"disease3\",\n      message: t(\"opd.validatedisease\"),\n      test: function (value) {\n        return (\n          !value ||\n          (this.parent.disease &&\n            this.parent.disease2 &&\n            value !== this.parent.disease &&\n            value !== this.parent.disease2)\n        );\n      },\n    }),\n  });\n\n  const initialValues = getFromFields(fields, \"value\");\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    },\n  });\n\n  const { values, setFieldValue, resetForm, handleBlur } = formik;\n\n  const dateFieldHandleOnChange = useCallback(\n    (fieldName: string) => (value: any) => {\n      setFieldValue(fieldName, value);\n    },\n    [setFieldValue]\n  );\n  const diseasesOptionsSelector = (state: IState) => {\n    return state.diseases.diseasesOpd.data\n      ? state.diseases.diseasesOpd.data.map((item) => {\n          return { value: item.code + \"\", label: item.description + \"\" };\n        })\n      : [];\n  };\n  const diseasesOptions = useSelector<\n    IState,\n    { value: string; label: string }[]\n  >((state: IState) => diseasesOptionsSelector(state));\n\n  const isValid = (fieldName: string): boolean => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = (fieldName: string): string => {\n    return has(formik.touched, fieldName)\n      ? (get(formik.errors, fieldName) as string)\n      : \"\";\n  };\n\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n\n  const onBlurCallback = useCallback(\n    (fieldName: string) =>\n      (\n        e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n        value: string\n      ) => {\n        handleBlur(e);\n\n        setFieldValue(fieldName, value);\n      },\n    [setFieldValue, handleBlur]\n  );\n\n  return (\n    <>\n      <div className=\"patientOpdForm\">\n        <form className=\"patientOpdForm__form\" onSubmit={formik.handleSubmit}>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientOpdForm__item\">\n              <DateField\n                fieldName=\"date\"\n                fieldValue={formik.values.date}\n                disableFuture={true}\n                theme=\"regular\"\n                format=\"dd/MM/yyyy\"\n                isValid={isValid(\"date\")}\n                errorText={getErrorText(\"date\")}\n                label={t(\"opd.dateopd\")}\n                onChange={dateFieldHandleOnChange(\"date\")}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientOpdForm__item fullWith\">\n              <TextField\n                field={formik.getFieldProps(\"anamnesis\")}\n                multiline={true}\n                theme=\"regular\"\n                label={t(\"opd.anamnesis\")}\n                isValid={isValid(\"anamnesis\")}\n                errorText={getErrorText(\"anamnesis\")}\n                onBlur={formik.handleBlur}\n                type=\"string\"\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientOpdForm__item fullWith\">\n              <SelectField\n                fieldName=\"disease\"\n                fieldValue={formik.values.disease}\n                label={t(\"opd.disease1\")}\n                isValid={isValid(\"disease\")}\n                errorText={getErrorText(\"disease\")}\n                onBlur={onBlurCallback(\"disease\")}\n                options={diseasesOptions}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientOpdForm__item fullWith\">\n              <SelectField\n                fieldName=\"disease2\"\n                fieldValue={formik.values.disease2}\n                label={t(\"opd.disease2\")}\n                isValid={isValid(\"disease2\")}\n                errorText={getErrorText(\"disease2\")}\n                onBlur={onBlurCallback(\"disease2\")}\n                options={diseasesOptions}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientOpdForm__item fullWith\">\n              <SelectField\n                fieldName=\"disease3\"\n                fieldValue={formik.values.disease3}\n                label={t(\"opd.disease3\")}\n                isValid={isValid(\"disease3\")}\n                errorText={getErrorText(\"disease3\")}\n                onBlur={onBlurCallback(\"disease3\")}\n                options={diseasesOptions}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientOpdForm__item fullWith\">\n              <TextField\n                field={formik.getFieldProps(\"note\")}\n                multiline={true}\n                theme=\"regular\"\n                label={t(\"opd.note\")}\n                isValid={isValid(\"note\")}\n                errorText={getErrorText(\"note\")}\n                onBlur={formik.handleBlur}\n                type=\"string\"\n              />\n            </div>\n          </div>\n          <div className=\"patientOpdForm__buttonSet\">\n            <div className=\"submit_button\">\n              <SmallButton type=\"submit\" disabled={isLoading}>\n                {submitButtonLabel}\n              </SmallButton>\n            </div>\n            <div className=\"reset_button\">\n              <TextButton onClick={() => setOpenResetConfirmation(true)}>\n                {resetButtonLabel}\n              </TextButton>\n            </div>\n          </div>\n          <ConfirmationDialog\n            isOpen={openResetConfirmation}\n            title={resetButtonLabel.toUpperCase()}\n            info={t(\"common.resetform\", { resetButtonLabel })}\n            icon={warningIcon}\n            primaryButtonLabel={resetButtonLabel}\n            secondaryButtonLabel={t(\"common.dismiss\")}\n            handlePrimaryButtonClick={handleResetConfirmation}\n            handleSecondaryButtonClick={() => setOpenResetConfirmation(false)}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default PatientOPDForm;\n"]},"metadata":{},"sourceType":"module"}