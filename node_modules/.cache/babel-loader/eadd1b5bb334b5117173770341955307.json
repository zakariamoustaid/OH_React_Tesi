{"ast":null,"code":"import patientDTO from \"../fixtures/patientDTO\";\nexport const patientRoutes = server => {\n  server.namespace(\"/patients\", () => {\n    server.post(\"/\").intercept((req, res) => {\n      const body = req.jsonBody();\n\n      switch (body.id) {\n        case \"fail\":\n          res.status(400);\n          break;\n\n        default:\n          res.status(201);\n          break;\n      }\n    });\n    server.get(\"/:code\").intercept((req, res) => {\n      const code = req.params.code;\n\n      switch (code) {\n        case \"1234561\":\n          res.status(400);\n          break;\n\n        case \"1234562\":\n          res.status(204);\n          res.body = null;\n          break;\n\n        default:\n          res.status(200).json(patientDTO);\n      }\n    });\n    server.put(\"/:code\").intercept((req, res) => {\n      const code = req.params.code;\n\n      switch (code) {\n        case \"1234561\":\n          res.status(400);\n          break;\n\n        case \"1234562\":\n          res.status(204);\n          res.body = null;\n          break;\n\n        default:\n          res.status(200).json(patientDTO);\n      }\n    });\n    server.get(\"/search\").intercept((req, res) => {\n      console.log(\"search invoked\");\n\n      switch (req.query.firstName) {\n        case \"empty\":\n          res.status(200).json([]);\n          break;\n\n        case \"unexpected\":\n          res.status(200).json({});\n          break;\n\n        case \"fail\":\n          res.status(400);\n          break;\n\n        default:\n          res.status(200).json([patientDTO, patientDTO, patientDTO, patientDTO, patientDTO, patientDTO]);\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/mockServer/routes/patients.js"],"names":["patientDTO","patientRoutes","server","namespace","post","intercept","req","res","body","jsonBody","id","status","get","code","params","json","put","console","log","query","firstName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AAEA,OAAO,MAAMC,aAAa,GAAIC,MAAD,IAAY;AACvCA,EAAAA,MAAM,CAACC,SAAP,CAAiB,WAAjB,EAA8B,MAAM;AAClCD,IAAAA,MAAM,CAACE,IAAP,CAAY,GAAZ,EAAiBC,SAAjB,CAA2B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvC,YAAMC,IAAI,GAAGF,GAAG,CAACG,QAAJ,EAAb;;AACA,cAAQD,IAAI,CAACE,EAAb;AACE,aAAK,MAAL;AACEH,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;;AACF;AACEJ,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;AANJ;AAQD,KAVD;AAYAT,IAAAA,MAAM,CAACU,GAAP,CAAW,QAAX,EAAqBP,SAArB,CAA+B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3C,YAAMM,IAAI,GAAGP,GAAG,CAACQ,MAAJ,CAAWD,IAAxB;;AACA,cAAQA,IAAR;AACE,aAAK,SAAL;AACEN,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;;AACF,aAAK,SAAL;AACEJ,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACAJ,UAAAA,GAAG,CAACC,IAAJ,GAAW,IAAX;AACA;;AACF;AACED,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBf,UAArB;AATJ;AAWD,KAbD;AAeAE,IAAAA,MAAM,CAACc,GAAP,CAAW,QAAX,EAAqBX,SAArB,CAA+B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3C,YAAMM,IAAI,GAAGP,GAAG,CAACQ,MAAJ,CAAWD,IAAxB;;AACA,cAAQA,IAAR;AACE,aAAK,SAAL;AACEN,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;;AACF,aAAK,SAAL;AACEJ,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACAJ,UAAAA,GAAG,CAACC,IAAJ,GAAW,IAAX;AACA;;AACF;AACED,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBf,UAArB;AATJ;AAWD,KAbD;AAeAE,IAAAA,MAAM,CAACU,GAAP,CAAW,SAAX,EAAsBP,SAAtB,CAAgC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5CU,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,cAAQZ,GAAG,CAACa,KAAJ,CAAUC,SAAlB;AACE,aAAK,OAAL;AACEb,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,EAArB;AACA;;AACF,aAAK,YAAL;AACER,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,EAArB;AACA;;AACF,aAAK,MAAL;AACER,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACA;;AACF;AACEJ,UAAAA,GAAG,CACAI,MADH,CACU,GADV,EAEGI,IAFH,CAEQ,CACJf,UADI,EAEJA,UAFI,EAGJA,UAHI,EAIJA,UAJI,EAKJA,UALI,EAMJA,UANI,CAFR;AAXJ;AAsBD,KAxBD;AAyBD,GApED;AAqED,CAtEM","sourcesContent":["import patientDTO from \"../fixtures/patientDTO\";\n\nexport const patientRoutes = (server) => {\n  server.namespace(\"/patients\", () => {\n    server.post(\"/\").intercept((req, res) => {\n      const body = req.jsonBody();\n      switch (body.id) {\n        case \"fail\":\n          res.status(400);\n          break;\n        default:\n          res.status(201);\n          break;\n      }\n    });\n\n    server.get(\"/:code\").intercept((req, res) => {\n      const code = req.params.code;\n      switch (code) {\n        case \"1234561\":\n          res.status(400);\n          break;\n        case \"1234562\":\n          res.status(204);\n          res.body = null;\n          break;\n        default:\n          res.status(200).json(patientDTO);\n      }\n    });\n\n    server.put(\"/:code\").intercept((req, res) => {\n      const code = req.params.code;\n      switch (code) {\n        case \"1234561\":\n          res.status(400);\n          break;\n        case \"1234562\":\n          res.status(204);\n          res.body = null;\n          break;\n        default:\n          res.status(200).json(patientDTO);\n      }\n    });\n\n    server.get(\"/search\").intercept((req, res) => {\n      console.log(\"search invoked\");\n      switch (req.query.firstName) {\n        case \"empty\":\n          res.status(200).json([]);\n          break;\n        case \"unexpected\":\n          res.status(200).json({});\n          break;\n        case \"fail\":\n          res.status(400);\n          break;\n        default:\n          res\n            .status(200)\n            .json([\n              patientDTO,\n              patientDTO,\n              patientDTO,\n              patientDTO,\n              patientDTO,\n              patientDTO,\n            ]);\n      }\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}