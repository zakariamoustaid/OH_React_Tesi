{"ast":null,"code":"var _jsxFileName = \"/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientTherapy/therapyForm/TherapyForm.tsx\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport moment from \"moment\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { object, string } from \"yup\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport { formatAllFieldValues, getFromFields } from \"../../../../libraries/formDataHandling/functions\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport DateField from \"../../dateField/DateField\";\nimport SelectField from \"../../selectField/SelectField\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport TextButton from \"../../textButton/TextButton\";\nimport TextField from \"../../textField/TextField\";\nimport \"./styles.scss\";\n\nconst TherapyForm = ({\n  fields,\n  onSubmit,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n  shouldResetForm,\n  resetFormCallback\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const validationSchema = object({\n    medicalId: string().required(t(\"common.required\")),\n    startDate: string().required(t(\"common.required\")),\n    endDate: string().required(t(\"common.required\")).test({\n      name: \"endDate\",\n      message: t(\"therapy.validatelastdate\"),\n      test: function (value) {\n        return moment(value).isSameOrAfter(moment(this.parent.startDate));\n      }\n    })\n  });\n  const initialValues = getFromFields(fields, \"value\");\n\n  const medicalOptionsSelector = state => {\n    if (state.medicals.medicalsOrderByName.data) {\n      return state.medicals.medicalsOrderByName.data.map(medical => {\n        return {\n          value: medical.code + \"\",\n          label: medical.description + \"\"\n        };\n      });\n    } else return [];\n  };\n\n  const medicalOptions = useSelector(state => medicalOptionsSelector(state));\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    }\n  });\n  const {\n    setFieldValue,\n    resetForm,\n    handleBlur\n  } = formik;\n  const dateFieldHandleOnChange = useCallback(fieldName => value => {\n    setFieldValue(fieldName, value);\n  }, [setFieldValue]);\n\n  const isValid = fieldName => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = fieldName => {\n    return has(formik.touched, fieldName) ? get(formik.errors, fieldName) : \"\";\n  };\n\n  const onBlurCallback = useCallback(fieldName => (e, value) => {\n    handleBlur(e);\n    setFieldValue(fieldName, value);\n  }, [setFieldValue, handleBlur]);\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    formik.resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"patientTherapyForm__form\",\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectField, {\n    fieldName: \"medicalId\",\n    fieldValue: formik.values.medicalId,\n    label: t(\"therapy.medical\"),\n    isValid: isValid(\"medicalId\"),\n    errorText: getErrorText(\"medicalId\"),\n    onBlur: onBlurCallback(\"medicalId\"),\n    options: medicalOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"qty\"),\n    theme: \"regular\",\n    label: t(\"therapy.quantity\"),\n    isValid: isValid(\"qty\"),\n    errorText: getErrorText(\"qty\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"freqInDay\"),\n    theme: \"regular\",\n    label: t(\"therapy.frequencyInDay\"),\n    isValid: isValid(\"freqInDay\"),\n    errorText: getErrorText(\"freqInDay\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs bottom-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"nbDays\"),\n    theme: \"regular\",\n    label: t(\"therapy.nbdays\"),\n    isValid: isValid(\"nbDays\"),\n    errorText: getErrorText(\"nbDays\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"nbWeeks\"),\n    theme: \"regular\",\n    label: t(\"therapy.nbweeks\"),\n    isValid: isValid(\"nbWeeks\"),\n    errorText: getErrorText(\"nbWeeks\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"nbMonths\"),\n    theme: \"regular\",\n    label: t(\"therapy.nbmonths\"),\n    isValid: isValid(\"nbMonths\"),\n    errorText: getErrorText(\"nbMonths\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"frequency\",\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    field: formik.getFieldProps(\"freqInPeriod\"),\n    theme: \"regular\",\n    label: t(\"therapy.frequencyInPeriod\"),\n    isValid: isValid(\"freqInPeriod\"),\n    errorText: getErrorText(\"freqInPeriod\"),\n    onBlur: formik.handleBlur,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateField, {\n    fieldName: \"startDate\",\n    fieldValue: formik.values.startDate,\n    disableFuture: false,\n    theme: \"regular\",\n    format: \"dd/MM/yyyy\",\n    isValid: isValid(\"startDate\"),\n    errorText: getErrorText(\"startDate\"),\n    label: t(\"therapy.startDate\"),\n    onChange: dateFieldHandleOnChange(\"startDate\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateField, {\n    fieldName: \"endDate\",\n    fieldValue: formik.values.endDate,\n    disableFuture: false,\n    theme: \"regular\",\n    format: \"dd/MM/yyyy\",\n    isValid: isValid(\"endDate\"),\n    errorText: getErrorText(\"endDate\"),\n    label: t(\"therapy.endDate\"),\n    onChange: dateFieldHandleOnChange(\"endDate\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: formik.values.notifyInt === 1,\n      onChange: () => setFieldValue(\"notifyInt\", formik.values.notifyInt === 1 ? 0 : 1),\n      name: \"notifyInt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }),\n    label: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 24\n      }\n    }, t(\"therapy.sendnotification\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      name: \"smsInt\",\n      checked: formik.values.smsInt === 1,\n      onChange: () => setFieldValue(\"smsInt\", formik.values.smsInt === 1 ? 0 : 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 19\n      }\n    }),\n    label: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 24\n      }\n    }, t(\"therapy.sendsms\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row start-sm center-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fullWidth patientTherapyForm__item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    multiline: true,\n    theme: \"regular\",\n    type: \"text\",\n    field: formik.getFieldProps(\"note\"),\n    label: t(\"therapy.note\"),\n    isValid: isValid(\"note\"),\n    errorText: getErrorText(\"note\"),\n    onBlur: formik.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"patientTherapyForm__buttonSet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SmallButton, {\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  }, submitButtonLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => setOpenResetConfirmation(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, resetButtonLabel))), /*#__PURE__*/React.createElement(ConfirmationDialog, {\n    isOpen: openResetConfirmation,\n    title: resetButtonLabel.toUpperCase(),\n    info: `Are you sure to ${resetButtonLabel} the Form?`,\n    icon: warningIcon,\n    primaryButtonLabel: resetButtonLabel,\n    secondaryButtonLabel: \"Dismiss\",\n    handlePrimaryButtonClick: handleResetConfirmation,\n    handleSecondaryButtonClick: () => setOpenResetConfirmation(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default TherapyForm;","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/components/accessories/patientTherapy/therapyForm/TherapyForm.tsx"],"names":["Checkbox","FormControlLabel","useFormik","get","has","moment","React","useCallback","useEffect","useState","useTranslation","useSelector","object","string","warningIcon","formatAllFieldValues","getFromFields","ConfirmationDialog","DateField","SelectField","SmallButton","TextButton","TextField","TherapyForm","fields","onSubmit","submitButtonLabel","resetButtonLabel","isLoading","shouldResetForm","resetFormCallback","t","validationSchema","medicalId","required","startDate","endDate","test","name","message","value","isSameOrAfter","parent","initialValues","medicalOptionsSelector","state","medicals","medicalsOrderByName","data","map","medical","code","label","description","medicalOptions","formik","enableReinitialize","values","formattedValues","setFieldValue","resetForm","handleBlur","dateFieldHandleOnChange","fieldName","isValid","touched","errors","getErrorText","onBlurCallback","e","openResetConfirmation","setOpenResetConfirmation","handleResetConfirmation","handleSubmit","getFieldProps","notifyInt","smsInt","toUpperCase"],"mappings":"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","sourcesContent":["import { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport get from \"lodash.get\";\nimport has from \"lodash.has\";\nimport moment from \"moment\";\nimport React, { FC, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { object, string } from \"yup\";\nimport warningIcon from \"../../../../assets/warning-icon.png\";\nimport {\n  formatAllFieldValues,\n  getFromFields,\n} from \"../../../../libraries/formDataHandling/functions\";\nimport { IState } from \"../../../../types\";\nimport ConfirmationDialog from \"../../confirmationDialog/ConfirmationDialog\";\nimport DateField from \"../../dateField/DateField\";\nimport SelectField from \"../../selectField/SelectField\";\nimport SmallButton from \"../../smallButton/SmallButton\";\nimport TextButton from \"../../textButton/TextButton\";\nimport TextField from \"../../textField/TextField\";\nimport \"./styles.scss\";\nimport { TherapyProps } from \"./types\";\n\nconst TherapyForm: FC<TherapyProps> = ({\n  fields,\n  onSubmit,\n  submitButtonLabel,\n  resetButtonLabel,\n  isLoading,\n  shouldResetForm,\n  resetFormCallback,\n}) => {\n  const { t } = useTranslation();\n  const validationSchema = object({\n    medicalId: string().required(t(\"common.required\")),\n    startDate: string().required(t(\"common.required\")),\n    endDate: string()\n      .required(t(\"common.required\"))\n      .test({\n        name: \"endDate\",\n        message: t(\"therapy.validatelastdate\"),\n        test: function (value) {\n          return moment(value).isSameOrAfter(moment(this.parent.startDate));\n        },\n      }),\n  });\n\n  const initialValues = getFromFields(fields, \"value\");\n\n  const medicalOptionsSelector = (state: IState) => {\n    if (state.medicals.medicalsOrderByName.data) {\n      return state.medicals.medicalsOrderByName.data.map((medical) => {\n        return {\n          value: medical.code + \"\",\n          label: medical.description + \"\",\n        };\n      });\n    } else return [];\n  };\n  const medicalOptions = useSelector((state: IState) =>\n    medicalOptionsSelector(state)\n  );\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      const formattedValues = formatAllFieldValues(fields, values);\n      onSubmit(formattedValues);\n    },\n  });\n\n  const { setFieldValue, resetForm, handleBlur } = formik;\n\n  const dateFieldHandleOnChange = useCallback(\n    (fieldName: string) => (value: any) => {\n      setFieldValue(fieldName, value);\n    },\n    [setFieldValue]\n  );\n\n  const isValid = (fieldName: string): boolean => {\n    return has(formik.touched, fieldName) && has(formik.errors, fieldName);\n  };\n\n  const getErrorText = (fieldName: string): string => {\n    return has(formik.touched, fieldName)\n      ? (get(formik.errors, fieldName) as string)\n      : \"\";\n  };\n\n  const onBlurCallback = useCallback(\n    (fieldName: string) =>\n      (\n        e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n        value: string\n      ) => {\n        handleBlur(e);\n        setFieldValue(fieldName, value);\n      },\n    [setFieldValue, handleBlur]\n  );\n\n  const [openResetConfirmation, setOpenResetConfirmation] = useState(false);\n\n  const handleResetConfirmation = () => {\n    setOpenResetConfirmation(false);\n    formik.resetForm();\n  };\n\n  useEffect(() => {\n    if (shouldResetForm) {\n      resetForm();\n      resetFormCallback();\n    }\n  }, [shouldResetForm, resetForm, resetFormCallback]);\n\n  return (\n    <>\n      <div className=\"patientTherapyForm\">\n        <form\n          className=\"patientTherapyForm__form\"\n          onSubmit={formik.handleSubmit}\n        >\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientTherapyForm__item\">\n              <SelectField\n                fieldName=\"medicalId\"\n                fieldValue={formik.values.medicalId}\n                label={t(\"therapy.medical\")}\n                isValid={isValid(\"medicalId\")}\n                errorText={getErrorText(\"medicalId\")}\n                onBlur={onBlurCallback(\"medicalId\")}\n                options={medicalOptions}\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"qty\")}\n                theme=\"regular\"\n                label={t(\"therapy.quantity\")}\n                isValid={isValid(\"qty\")}\n                errorText={getErrorText(\"qty\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"freqInDay\")}\n                theme=\"regular\"\n                label={t(\"therapy.frequencyInDay\")}\n                isValid={isValid(\"freqInDay\")}\n                errorText={getErrorText(\"freqInDay\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs bottom-sm\">\n            <div className=\"patientTherapyForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"nbDays\")}\n                theme=\"regular\"\n                label={t(\"therapy.nbdays\")}\n                isValid={isValid(\"nbDays\")}\n                errorText={getErrorText(\"nbDays\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"nbWeeks\")}\n                theme=\"regular\"\n                label={t(\"therapy.nbweeks\")}\n                isValid={isValid(\"nbWeeks\")}\n                errorText={getErrorText(\"nbWeeks\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"nbMonths\")}\n                theme=\"regular\"\n                label={t(\"therapy.nbmonths\")}\n                isValid={isValid(\"nbMonths\")}\n                errorText={getErrorText(\"nbMonths\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div id=\"frequency\" className=\"patientTherapyForm__item\">\n              <TextField\n                field={formik.getFieldProps(\"freqInPeriod\")}\n                theme=\"regular\"\n                label={t(\"therapy.frequencyInPeriod\")}\n                isValid={isValid(\"freqInPeriod\")}\n                errorText={getErrorText(\"freqInPeriod\")}\n                onBlur={formik.handleBlur}\n                type=\"number\"\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <DateField\n                fieldName=\"startDate\"\n                fieldValue={formik.values.startDate}\n                disableFuture={false}\n                theme=\"regular\"\n                format=\"dd/MM/yyyy\"\n                isValid={isValid(\"startDate\")}\n                errorText={getErrorText(\"startDate\")}\n                label={t(\"therapy.startDate\")}\n                onChange={dateFieldHandleOnChange(\"startDate\")}\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <DateField\n                fieldName=\"endDate\"\n                fieldValue={formik.values.endDate}\n                disableFuture={false}\n                theme=\"regular\"\n                format=\"dd/MM/yyyy\"\n                isValid={isValid(\"endDate\")}\n                errorText={getErrorText(\"endDate\")}\n                label={t(\"therapy.endDate\")}\n                onChange={dateFieldHandleOnChange(\"endDate\")}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"patientTherapyForm__item\">\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={formik.values.notifyInt === 1}\n                    onChange={() =>\n                      setFieldValue(\n                        \"notifyInt\",\n                        formik.values.notifyInt === 1 ? 0 : 1\n                      )\n                    }\n                    name=\"notifyInt\"\n                  />\n                }\n                label={<span>{t(\"therapy.sendnotification\")}</span>}\n              />\n            </div>\n            <div className=\"patientTherapyForm__item\">\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"smsInt\"\n                    checked={formik.values.smsInt === 1}\n                    onChange={() =>\n                      setFieldValue(\n                        \"smsInt\",\n                        formik.values.smsInt === 1 ? 0 : 1\n                      )\n                    }\n                  />\n                }\n                label={<span>{t(\"therapy.sendsms\")}</span>}\n              />\n            </div>\n          </div>\n          <div className=\"row start-sm center-xs\">\n            <div className=\"fullWidth patientTherapyForm__item\">\n              <TextField\n                multiline={true}\n                theme=\"regular\"\n                type=\"text\"\n                field={formik.getFieldProps(\"note\")}\n                label={t(\"therapy.note\")}\n                isValid={isValid(\"note\")}\n                errorText={getErrorText(\"note\")}\n                onBlur={formik.handleBlur}\n              />\n            </div>\n          </div>\n          <div className=\"patientTherapyForm__buttonSet\">\n            <div className=\"submit_button\">\n              <SmallButton type=\"submit\" disabled={isLoading}>\n                {submitButtonLabel}\n              </SmallButton>\n            </div>\n            <div className=\"reset_button\">\n              <TextButton onClick={() => setOpenResetConfirmation(true)}>\n                {resetButtonLabel}\n              </TextButton>\n            </div>\n          </div>\n          <ConfirmationDialog\n            isOpen={openResetConfirmation}\n            title={resetButtonLabel.toUpperCase()}\n            info={`Are you sure to ${resetButtonLabel} the Form?`}\n            icon={warningIcon}\n            primaryButtonLabel={resetButtonLabel}\n            secondaryButtonLabel=\"Dismiss\"\n            handlePrimaryButtonClick={handleResetConfirmation}\n            handleSecondaryButtonClick={() => setOpenResetConfirmation(false)}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default TherapyForm;\n"]},"metadata":{},"sourceType":"module"}