{"ast":null,"code":"// tslint:disable\n\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';\n\n/**\n * no description\n */\nexport class MedicalControllerApi extends BaseAPI {\n  /**\n   * deleteMedical\n   */\n  deleteMedicalUsingDELETE({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'deleteMedicalUsingDELETE');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicals/{code}'.replace('{code}', encodeURI(code)),\n      method: 'DELETE',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  filterMedicalsUsingGET({\n    critical,\n    desc,\n    nameSorted,\n    type\n  }, opts) {\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (critical != null) {\n      query['critical'] = critical;\n    }\n\n    if (desc != null) {\n      query['desc'] = desc;\n    }\n\n    if (nameSorted != null) {\n      query['name_sorted'] = nameSorted;\n    }\n\n    if (type != null) {\n      query['type'] = type;\n    }\n\n    return this.request({\n      url: '/medicals/filter',\n      method: 'GET',\n      headers,\n      query\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  getMedicalUsingGET({\n    code\n  }, opts) {\n    throwIfNullOrUndefined(code, 'code', 'getMedicalUsingGET');\n    const headers = { ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    return this.request({\n      url: '/medicals/{code}'.replace('{code}', encodeURI(code)),\n      method: 'GET',\n      headers\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  newMedicalUsingPOST({\n    medicalDTO,\n    ignoreSimilar\n  }, opts) {\n    throwIfNullOrUndefined(medicalDTO, 'medicalDTO', 'newMedicalUsingPOST');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (ignoreSimilar != null) {\n      query['ignore_similar'] = ignoreSimilar;\n    }\n\n    return this.request({\n      url: '/medicals',\n      method: 'POST',\n      headers,\n      query,\n      body: medicalDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n  updateMedicalUsingPUT({\n    medicalDTO,\n    ignoreSimilar\n  }, opts) {\n    throwIfNullOrUndefined(medicalDTO, 'medicalDTO', 'updateMedicalUsingPUT');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.configuration.apiKey && {\n        'Authorization': this.configuration.apiKey('Authorization')\n      }) // JWT authentication\n\n    };\n    const query = {};\n\n    if (ignoreSimilar != null) {\n      query['ignore_similar'] = ignoreSimilar;\n    }\n\n    return this.request({\n      url: '/medicals',\n      method: 'PUT',\n      headers,\n      query,\n      body: medicalDTO\n    }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);\n  }\n\n}\n/**\n * @export\n * @enum {string}\n */\n\nexport let GetMedicalsUsingGETSortByEnum;\n\n(function (GetMedicalsUsingGETSortByEnum) {\n  GetMedicalsUsingGETSortByEnum[\"NONE\"] = \"NONE\";\n  GetMedicalsUsingGETSortByEnum[\"CODE\"] = \"CODE\";\n  GetMedicalsUsingGETSortByEnum[\"NAME\"] = \"NAME\";\n})(GetMedicalsUsingGETSortByEnum || (GetMedicalsUsingGETSortByEnum = {}));","map":{"version":3,"sources":["/home/zak/Tesi/OH_React_Tesi/src/generated/apis/MedicalControllerApi.ts"],"names":["BaseAPI","throwIfNullOrUndefined","encodeURI","MedicalControllerApi","deleteMedicalUsingDELETE","code","opts","headers","configuration","apiKey","request","url","replace","method","responseOpts","filterMedicalsUsingGET","critical","desc","nameSorted","type","query","getMedicalUsingGET","newMedicalUsingPOST","medicalDTO","ignoreSimilar","body","updateMedicalUsingPUT","GetMedicalsUsingGETSortByEnum"],"mappings":"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","sourcesContent":["// tslint:disable\n/**\n * OH 2.0 Api Documentation\n * OH 2.0 Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Observable } from 'rxjs';\nimport { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';\nimport {\n    MedicalDTO,\n} from '../models';\n\nexport interface DeleteMedicalUsingDELETERequest {\n    code: number;\n}\n\nexport interface FilterMedicalsUsingGETRequest {\n    critical?: boolean;\n    desc?: string;\n    nameSorted?: boolean;\n    type?: string;\n}\n\nexport interface GetMedicalUsingGETRequest {\n    code: number;\n}\n\nexport interface GetMedicalsUsingGETRequest {\n    sortBy?: GetMedicalsUsingGETSortByEnum;\n}\n\nexport interface NewMedicalUsingPOSTRequest {\n    medicalDTO: MedicalDTO;\n    ignoreSimilar?: boolean;\n}\n\nexport interface UpdateMedicalUsingPUTRequest {\n    medicalDTO: MedicalDTO;\n    ignoreSimilar?: boolean;\n}\n\n/**\n * no description\n */\nexport class MedicalControllerApi extends BaseAPI {\n\n    /**\n     * deleteMedical\n     */\n    deleteMedicalUsingDELETE({ code }: DeleteMedicalUsingDELETERequest): Observable<boolean>\n    deleteMedicalUsingDELETE({ code }: DeleteMedicalUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>\n    deleteMedicalUsingDELETE({ code }: DeleteMedicalUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {\n        throwIfNullOrUndefined(code, 'code', 'deleteMedicalUsingDELETE');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<boolean>({\n            url: '/medicals/{code}'.replace('{code}', encodeURI(code)),\n            method: 'DELETE',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * filterMedicals\n     */\n    filterMedicalsUsingGET({ critical, desc, nameSorted, type }: FilterMedicalsUsingGETRequest): Observable<Array<MedicalDTO>>\n    filterMedicalsUsingGET({ critical, desc, nameSorted, type }: FilterMedicalsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MedicalDTO>>>\n    filterMedicalsUsingGET({ critical, desc, nameSorted, type }: FilterMedicalsUsingGETRequest, opts?: OperationOpts): Observable<Array<MedicalDTO> | RawAjaxResponse<Array<MedicalDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (critical != null) { query['critical'] = critical; }\n        if (desc != null) { query['desc'] = desc; }\n        if (nameSorted != null) { query['name_sorted'] = nameSorted; }\n        if (type != null) { query['type'] = type; }\n\n        return this.request<Array<MedicalDTO>>({\n            url: '/medicals/filter',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMedical\n     */\n    getMedicalUsingGET({ code }: GetMedicalUsingGETRequest): Observable<MedicalDTO>\n    getMedicalUsingGET({ code }: GetMedicalUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MedicalDTO>>\n    getMedicalUsingGET({ code }: GetMedicalUsingGETRequest, opts?: OperationOpts): Observable<MedicalDTO | RawAjaxResponse<MedicalDTO>> {\n        throwIfNullOrUndefined(code, 'code', 'getMedicalUsingGET');\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        return this.request<MedicalDTO>({\n            url: '/medicals/{code}'.replace('{code}', encodeURI(code)),\n            method: 'GET',\n            headers,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * getMedicals\n     *//*\n    getMedicalsUsingGET({ sortBy }: GetMedicalsUsingGETRequest): Observable<Array<MedicalDTO>>\n    getMedicalsUsingGET({ sortBy }: GetMedicalsUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MedicalDTO>>>\n    getMedicalsUsingGET({ sortBy }: GetMedicalsUsingGETRequest, opts?: OperationOpts): Observable<Array<MedicalDTO> | RawAjaxResponse<Array<MedicalDTO>>> {\n\n        const headers: HttpHeaders = {\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (sortBy != null) { query['sort_by'] = sortBy; }\n\n        return this.request<Array<MedicalDTO>>({\n            url: '/medicals',\n            method: 'GET',\n            headers,\n            query,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * newMedical\n     */\n    newMedicalUsingPOST({ medicalDTO, ignoreSimilar }: NewMedicalUsingPOSTRequest): Observable<void>\n    newMedicalUsingPOST({ medicalDTO, ignoreSimilar }: NewMedicalUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>\n    newMedicalUsingPOST({ medicalDTO, ignoreSimilar }: NewMedicalUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {\n        throwIfNullOrUndefined(medicalDTO, 'medicalDTO', 'newMedicalUsingPOST');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (ignoreSimilar != null) { query['ignore_similar'] = ignoreSimilar; }\n\n        return this.request<void>({\n            url: '/medicals',\n            method: 'POST',\n            headers,\n            query,\n            body: medicalDTO,\n        }, opts?.responseOpts);\n    };\n\n    /**\n     * updateMedical\n     */\n    updateMedicalUsingPUT({ medicalDTO, ignoreSimilar }: UpdateMedicalUsingPUTRequest): Observable<void>\n    updateMedicalUsingPUT({ medicalDTO, ignoreSimilar }: UpdateMedicalUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>\n    updateMedicalUsingPUT({ medicalDTO, ignoreSimilar }: UpdateMedicalUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {\n        throwIfNullOrUndefined(medicalDTO, 'medicalDTO', 'updateMedicalUsingPUT');\n\n        const headers: HttpHeaders = {\n            'Content-Type': 'application/json',\n            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication\n        };\n\n        const query: HttpQuery = {};\n\n        if (ignoreSimilar != null) { query['ignore_similar'] = ignoreSimilar; }\n\n        return this.request<void>({\n            url: '/medicals',\n            method: 'PUT',\n            headers,\n            query,\n            body: medicalDTO,\n        }, opts?.responseOpts);\n    };\n\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum GetMedicalsUsingGETSortByEnum {\n    NONE = 'NONE',\n    CODE = 'CODE',\n    NAME = 'NAME'\n}\n"]},"metadata":{},"sourceType":"module"}