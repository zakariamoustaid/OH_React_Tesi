// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AdmissionTypeDTO,
} from '../models';

export interface DeleteAdmissionTypeUsingDELETE1Request {
    code: string;
}

export interface NewAdmissionTypeUsingPOSTRequest {
    admissionTypeDTO: AdmissionTypeDTO;
}

export interface UpdateAdmissionTypetUsingPUTRequest {
    admissionTypeDTO: AdmissionTypeDTO;
}

/**
 * no description
 */
export class AdmissionTypeControllerApi extends BaseAPI {

    /**
     * deleteAdmissionType
     */
    deleteAdmissionTypeUsingDELETE1({ code }: DeleteAdmissionTypeUsingDELETE1Request): Observable<boolean>
    deleteAdmissionTypeUsingDELETE1({ code }: DeleteAdmissionTypeUsingDELETE1Request, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteAdmissionTypeUsingDELETE1({ code }: DeleteAdmissionTypeUsingDELETE1Request, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteAdmissionTypeUsingDELETE1');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/admissiontypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getAdmissionTypes
     */
    getAdmissionTypesUsingGET(): Observable<Array<AdmissionTypeDTO>>
    getAdmissionTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<AdmissionTypeDTO>>>
    getAdmissionTypesUsingGET(opts?: OperationOpts): Observable<Array<AdmissionTypeDTO> | RawAjaxResponse<Array<AdmissionTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<AdmissionTypeDTO>>({
            url: '/admissiontypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newAdmissionType
     */
    newAdmissionTypeUsingPOST({ admissionTypeDTO }: NewAdmissionTypeUsingPOSTRequest): Observable<string>
    newAdmissionTypeUsingPOST({ admissionTypeDTO }: NewAdmissionTypeUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    newAdmissionTypeUsingPOST({ admissionTypeDTO }: NewAdmissionTypeUsingPOSTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(admissionTypeDTO, 'admissionTypeDTO', 'newAdmissionTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/admissiontypes',
            method: 'POST',
            headers,
            body: admissionTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     * updateAdmissionTypet
     */
    updateAdmissionTypetUsingPUT({ admissionTypeDTO }: UpdateAdmissionTypetUsingPUTRequest): Observable<string>
    updateAdmissionTypetUsingPUT({ admissionTypeDTO }: UpdateAdmissionTypetUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    updateAdmissionTypetUsingPUT({ admissionTypeDTO }: UpdateAdmissionTypetUsingPUTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(admissionTypeDTO, 'admissionTypeDTO', 'updateAdmissionTypetUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/admissiontypes',
            method: 'PUT',
            headers,
            body: admissionTypeDTO,
        }, opts?.responseOpts);
    };

}
