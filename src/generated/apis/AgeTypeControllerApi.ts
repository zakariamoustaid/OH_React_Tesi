// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AgeType,
    AgeTypeDTO,
} from '../models';

export interface GetAgeTypeByIndexUsingGETRequest {
    index: number;
}

export interface GetAgeTypeCodeByAgeUsingGETRequest {
    age: number;
}

export interface UpdateAgeTypeUsingPUTRequest {
    ageTypeDTO: AgeTypeDTO;
}

/**
 * no description
 */
export class AgeTypeControllerApi extends BaseAPI {

    /**
     * getAgeTypeByIndex
     */
    getAgeTypeByIndexUsingGET({ index }: GetAgeTypeByIndexUsingGETRequest): Observable<AgeType>
    getAgeTypeByIndexUsingGET({ index }: GetAgeTypeByIndexUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AgeType>>
    getAgeTypeByIndexUsingGET({ index }: GetAgeTypeByIndexUsingGETRequest, opts?: OperationOpts): Observable<AgeType | RawAjaxResponse<AgeType>> {
        throwIfNullOrUndefined(index, 'index', 'getAgeTypeByIndexUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<AgeType>({
            url: '/agetypes/{index}'.replace('{index}', encodeURI(index)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getAgeTypeCodeByAge
     */
    getAgeTypeCodeByAgeUsingGET({ age }: GetAgeTypeCodeByAgeUsingGETRequest): Observable<{ [key: string]: string; }>
    getAgeTypeCodeByAgeUsingGET({ age }: GetAgeTypeCodeByAgeUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<{ [key: string]: string; }>>
    getAgeTypeCodeByAgeUsingGET({ age }: GetAgeTypeCodeByAgeUsingGETRequest, opts?: OperationOpts): Observable<{ [key: string]: string; } | RawAjaxResponse<{ [key: string]: string; }>> {
        throwIfNullOrUndefined(age, 'age', 'getAgeTypeCodeByAgeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'age': age,
        };

        return this.request<{ [key: string]: string; }>({
            url: '/agetypes/code',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * getAllAgeTypes
     */
    getAllAgeTypesUsingGET(): Observable<Array<AgeTypeDTO>>
    getAllAgeTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<AgeTypeDTO>>>
    getAllAgeTypesUsingGET(opts?: OperationOpts): Observable<Array<AgeTypeDTO> | RawAjaxResponse<Array<AgeTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<AgeTypeDTO>>({
            url: '/agetypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * updateAgeType
     */
    updateAgeTypeUsingPUT({ ageTypeDTO }: UpdateAgeTypeUsingPUTRequest): Observable<AgeTypeDTO>
    updateAgeTypeUsingPUT({ ageTypeDTO }: UpdateAgeTypeUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AgeTypeDTO>>
    updateAgeTypeUsingPUT({ ageTypeDTO }: UpdateAgeTypeUsingPUTRequest, opts?: OperationOpts): Observable<AgeTypeDTO | RawAjaxResponse<AgeTypeDTO>> {
        throwIfNullOrUndefined(ageTypeDTO, 'ageTypeDTO', 'updateAgeTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<AgeTypeDTO>({
            url: '/agetypes',
            method: 'PUT',
            headers,
            body: ageTypeDTO,
        }, opts?.responseOpts);
    };

}
