// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    DeliveryTypeDTO,
} from '../models';

export interface DeleteDeliveryTypeUsingDELETERequest {
    code: string;
}

export interface NewDeliveryTypeUsingPOSTRequest {
    dlvrTypeDTO: DeliveryTypeDTO;
}

export interface UpdateDeliveryTypetUsingPUTRequest {
    dlvrTypeDTO: DeliveryTypeDTO;
}

/**
 * no description
 */
export class DeliveryTypeControllerApi extends BaseAPI {

    /**
     * deleteDeliveryType
     */
    deleteDeliveryTypeUsingDELETE({ code }: DeleteDeliveryTypeUsingDELETERequest): Observable<boolean>
    deleteDeliveryTypeUsingDELETE({ code }: DeleteDeliveryTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteDeliveryTypeUsingDELETE({ code }: DeleteDeliveryTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteDeliveryTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/deliverytypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getDeliveryTypes
     */
    getDeliveryTypesUsingGET(): Observable<Array<DeliveryTypeDTO>>
    getDeliveryTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<DeliveryTypeDTO>>>
    getDeliveryTypesUsingGET(opts?: OperationOpts): Observable<Array<DeliveryTypeDTO> | RawAjaxResponse<Array<DeliveryTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<DeliveryTypeDTO>>({
            url: '/deliverytypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newDeliveryType
     */
    newDeliveryTypeUsingPOST({ dlvrTypeDTO }: NewDeliveryTypeUsingPOSTRequest): Observable<string>
    newDeliveryTypeUsingPOST({ dlvrTypeDTO }: NewDeliveryTypeUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    newDeliveryTypeUsingPOST({ dlvrTypeDTO }: NewDeliveryTypeUsingPOSTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(dlvrTypeDTO, 'dlvrTypeDTO', 'newDeliveryTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/deliverytypes',
            method: 'POST',
            headers,
            body: dlvrTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     * updateDeliveryTypet
     */
    updateDeliveryTypetUsingPUT({ dlvrTypeDTO }: UpdateDeliveryTypetUsingPUTRequest): Observable<string>
    updateDeliveryTypetUsingPUT({ dlvrTypeDTO }: UpdateDeliveryTypetUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    updateDeliveryTypetUsingPUT({ dlvrTypeDTO }: UpdateDeliveryTypetUsingPUTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(dlvrTypeDTO, 'dlvrTypeDTO', 'updateDeliveryTypetUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/deliverytypes',
            method: 'PUT',
            headers,
            body: dlvrTypeDTO,
        }, opts?.responseOpts);
    };

}
