// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    MovementTypeDTO,
} from '../models';

export interface DeleteMedicaldsrstockmovTypeUsingDELETERequest {
    code: string;
}

export interface GetMovementTypeUsingGETRequest {
    code: string;
}

export interface IsCodeUsedUsingGETRequest {
    code: string;
}

export interface NewMedicaldsrstockmovTypeUsingPOSTRequest {
    medicaldsrstockmovType: MovementTypeDTO;
}

export interface UpdateMedicaldsrstockmovTypeUsingPUTRequest {
    medicaldsrstockmovTypeDTO: MovementTypeDTO;
}

/**
 * no description
 */
export class MedStockMovementTypeControllerApi extends BaseAPI {

    /**
     * deleteMedicaldsrstockmovType
     */
    deleteMedicaldsrstockmovTypeUsingDELETE({ code }: DeleteMedicaldsrstockmovTypeUsingDELETERequest): Observable<boolean>
    deleteMedicaldsrstockmovTypeUsingDELETE({ code }: DeleteMedicaldsrstockmovTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteMedicaldsrstockmovTypeUsingDELETE({ code }: DeleteMedicaldsrstockmovTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteMedicaldsrstockmovTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/medstockmovementtype/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getMedicaldsrstockmovType
     */
    getMedicaldsrstockmovTypeUsingGET(): Observable<Array<MovementTypeDTO>>
    getMedicaldsrstockmovTypeUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementTypeDTO>>>
    getMedicaldsrstockmovTypeUsingGET(opts?: OperationOpts): Observable<Array<MovementTypeDTO> | RawAjaxResponse<Array<MovementTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<MovementTypeDTO>>({
            url: '/medstockmovementtype',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getMovementType
     */
    getMovementTypeUsingGET({ code }: GetMovementTypeUsingGETRequest): Observable<MovementTypeDTO>
    getMovementTypeUsingGET({ code }: GetMovementTypeUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    getMovementTypeUsingGET({ code }: GetMovementTypeUsingGETRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(code, 'code', 'getMovementTypeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtype/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * isCodeUsed
     */
    isCodeUsedUsingGET({ code }: IsCodeUsedUsingGETRequest): Observable<boolean>
    isCodeUsedUsingGET({ code }: IsCodeUsedUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    isCodeUsedUsingGET({ code }: IsCodeUsedUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'isCodeUsedUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/medstockmovementtype/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newMedicaldsrstockmovType
     */
    newMedicaldsrstockmovTypeUsingPOST({ medicaldsrstockmovType }: NewMedicaldsrstockmovTypeUsingPOSTRequest): Observable<void>
    newMedicaldsrstockmovTypeUsingPOST({ medicaldsrstockmovType }: NewMedicaldsrstockmovTypeUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    newMedicaldsrstockmovTypeUsingPOST({ medicaldsrstockmovType }: NewMedicaldsrstockmovTypeUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(medicaldsrstockmovType, 'medicaldsrstockmovType', 'newMedicaldsrstockmovTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<void>({
            url: '/medstockmovementtype',
            method: 'POST',
            headers,
            body: medicaldsrstockmovType,
        }, opts?.responseOpts);
    };

    /**
     * updateMedicaldsrstockmovType
     */
    updateMedicaldsrstockmovTypeUsingPUT({ medicaldsrstockmovTypeDTO }: UpdateMedicaldsrstockmovTypeUsingPUTRequest): Observable<void>
    updateMedicaldsrstockmovTypeUsingPUT({ medicaldsrstockmovTypeDTO }: UpdateMedicaldsrstockmovTypeUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateMedicaldsrstockmovTypeUsingPUT({ medicaldsrstockmovTypeDTO }: UpdateMedicaldsrstockmovTypeUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(medicaldsrstockmovTypeDTO, 'medicaldsrstockmovTypeDTO', 'updateMedicaldsrstockmovTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<void>({
            url: '/medstockmovementtype',
            method: 'PUT',
            headers,
            body: medicaldsrstockmovTypeDTO,
        }, opts?.responseOpts);
    };

}
