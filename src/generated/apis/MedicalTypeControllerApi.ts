// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    MedicalTypeDTO,
} from '../models';

export interface CreateMedicalTypeUsingPOSTRequest {
    medicalTypeDTO: MedicalTypeDTO;
}

export interface DeleteMedicalTypeUsingDELETERequest {
    code: string;
}

export interface IsCodeUsedUsingGET1Request {
    code: string;
}

export interface UpdateMedicalTypeUsingPUTRequest {
    medicalTypeDTO: MedicalTypeDTO;
}

/**
 * no description
 */
export class MedicalTypeControllerApi extends BaseAPI {

    /**
     * createMedicalType
     */
    createMedicalTypeUsingPOST({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest): Observable<void>
    createMedicalTypeUsingPOST({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    createMedicalTypeUsingPOST({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(medicalTypeDTO, 'medicalTypeDTO', 'createMedicalTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<void>({
            url: '/medicaltypes',
            method: 'POST',
            headers,
            body: medicalTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     * deleteMedicalType
     */
    deleteMedicalTypeUsingDELETE({ code }: DeleteMedicalTypeUsingDELETERequest): Observable<boolean>
    deleteMedicalTypeUsingDELETE({ code }: DeleteMedicalTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteMedicalTypeUsingDELETE({ code }: DeleteMedicalTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteMedicalTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/medicaltypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getMedicalTypes
     */
    getMedicalTypesUsingGET(): Observable<Array<MedicalTypeDTO>>
    getMedicalTypesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MedicalTypeDTO>>>
    getMedicalTypesUsingGET(opts?: OperationOpts): Observable<Array<MedicalTypeDTO> | RawAjaxResponse<Array<MedicalTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<MedicalTypeDTO>>({
            url: '/medicaltypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * isCodeUsed
     */
    isCodeUsedUsingGET1({ code }: IsCodeUsedUsingGET1Request): Observable<boolean>
    isCodeUsedUsingGET1({ code }: IsCodeUsedUsingGET1Request, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    isCodeUsedUsingGET1({ code }: IsCodeUsedUsingGET1Request, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'isCodeUsedUsingGET1');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/medicaltypes/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * updateMedicalType
     */
    updateMedicalTypeUsingPUT({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest): Observable<void>
    updateMedicalTypeUsingPUT({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateMedicalTypeUsingPUT({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(medicalTypeDTO, 'medicalTypeDTO', 'updateMedicalTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<void>({
            url: '/medicaltypes',
            method: 'PUT',
            headers,
            body: medicalTypeDTO,
        }, opts?.responseOpts);
    };

}
