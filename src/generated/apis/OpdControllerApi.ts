// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    OpdDTO,
} from '../models';

export interface DeleteOpdUsingDELETERequest {
    code: number;
}

export interface GetLastOpdUsingGETRequest {
    code: number;
}

export interface GetOpdByDatesUsingGETRequest {
    ageFrom: number;
    ageTo: number;
    dateFrom: string;
    dateTo: string;
    diseaseCode: string;
    diseaseTypeCode: string;
    newPatient: string;
    sex: string;
}

export interface GetOpdByPatientUsingGETRequest {
    pcode: number;
}

export interface GetOpdToDayOrWeekUsingGETRequest {
    oneWeek?: boolean;
}

export interface GetProgYearUsingGETRequest {
    year: number;
}

export interface IsExistOpdNumUsingGETRequest {
    opdNum: number;
    year: number;
}

export interface NewOpdUsingPOSTRequest {
    opdDTO: OpdDTO;
}

export interface UpdateOpdUsingPUTRequest {
    code: number;
    opdDTO: OpdDTO;
}

/**
 * no description
 */
export class OpdControllerApi extends BaseAPI {

    /**
     * deleteOpd
     */
    deleteOpdUsingDELETE({ code }: DeleteOpdUsingDELETERequest): Observable<boolean>
    deleteOpdUsingDELETE({ code }: DeleteOpdUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteOpdUsingDELETE({ code }: DeleteOpdUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteOpdUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/opds/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getLastOpd
     */
    getLastOpdUsingGET({ code }: GetLastOpdUsingGETRequest): Observable<OpdDTO>
    getLastOpdUsingGET({ code }: GetLastOpdUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdDTO>>
    getLastOpdUsingGET({ code }: GetLastOpdUsingGETRequest, opts?: OperationOpts): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
        throwIfNullOrUndefined(code, 'code', 'getLastOpdUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<OpdDTO>({
            url: '/opds/last/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getOpdByDates
     */
    getOpdByDatesUsingGET({ ageFrom, ageTo, dateFrom, dateTo, diseaseCode, diseaseTypeCode, newPatient, sex }: GetOpdByDatesUsingGETRequest): Observable<Array<OpdDTO>>
    getOpdByDatesUsingGET({ ageFrom, ageTo, dateFrom, dateTo, diseaseCode, diseaseTypeCode, newPatient, sex }: GetOpdByDatesUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>
    getOpdByDatesUsingGET({ ageFrom, ageTo, dateFrom, dateTo, diseaseCode, diseaseTypeCode, newPatient, sex }: GetOpdByDatesUsingGETRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {
        throwIfNullOrUndefined(ageFrom, 'ageFrom', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(ageTo, 'ageTo', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(dateTo, 'dateTo', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(diseaseCode, 'diseaseCode', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(diseaseTypeCode, 'diseaseTypeCode', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(newPatient, 'newPatient', 'getOpdByDatesUsingGET');
        throwIfNullOrUndefined(sex, 'sex', 'getOpdByDatesUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'ageFrom': ageFrom,
            'ageTo': ageTo,
            'dateFrom': (dateFrom as any).toISOString(),
            'dateTo': (dateTo as any).toISOString(),
            'diseaseCode': diseaseCode,
            'diseaseTypeCode': diseaseTypeCode,
            'newPatient': newPatient,
            'sex': sex,
        };

        return this.request<Array<OpdDTO>>({
            url: '/opds/search',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * getOpdByPatient
     */
    getOpdByPatientUsingGET({ pcode }: GetOpdByPatientUsingGETRequest): Observable<Array<OpdDTO>>
    getOpdByPatientUsingGET({ pcode }: GetOpdByPatientUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>
    getOpdByPatientUsingGET({ pcode }: GetOpdByPatientUsingGETRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {
        throwIfNullOrUndefined(pcode, 'pcode', 'getOpdByPatientUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<OpdDTO>>({
            url: '/opds/patient/{pcode}'.replace('{pcode}', encodeURI(pcode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getOpdToDayOrWeek
     */
    getOpdToDayOrWeekUsingGET({ oneWeek }: GetOpdToDayOrWeekUsingGETRequest): Observable<Array<OpdDTO>>
    getOpdToDayOrWeekUsingGET({ oneWeek }: GetOpdToDayOrWeekUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>
    getOpdToDayOrWeekUsingGET({ oneWeek }: GetOpdToDayOrWeekUsingGETRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (oneWeek != null) { query['oneWeek'] = oneWeek; }

        return this.request<Array<OpdDTO>>({
            url: '/opds/weekly',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * getProgYear
     */
    getProgYearUsingGET({ year }: GetProgYearUsingGETRequest): Observable<number>
    getProgYearUsingGET({ year }: GetProgYearUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>
    getProgYearUsingGET({ year }: GetProgYearUsingGETRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {
        throwIfNullOrUndefined(year, 'year', 'getProgYearUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<number>({
            url: '/opds/ProgYear/{year}'.replace('{year}', encodeURI(year)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * isExistOpdNum
     */
    isExistOpdNumUsingGET({ opdNum, year }: IsExistOpdNumUsingGETRequest): Observable<boolean>
    isExistOpdNumUsingGET({ opdNum, year }: IsExistOpdNumUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    isExistOpdNumUsingGET({ opdNum, year }: IsExistOpdNumUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(opdNum, 'opdNum', 'isExistOpdNumUsingGET');
        throwIfNullOrUndefined(year, 'year', 'isExistOpdNumUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'opdNum': opdNum,
            'year': year,
        };

        return this.request<boolean>({
            url: '/opds/check/progyear',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * newOpd
     */
    newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest): Observable<boolean>
    newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(opdDTO, 'opdDTO', 'newOpdUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/opds',
            method: 'POST',
            headers,
            body: opdDTO,
        }, opts?.responseOpts);
    };

    /**
     * updateOpd
     */
    updateOpdUsingPUT({ code, opdDTO }: UpdateOpdUsingPUTRequest): Observable<number>
    updateOpdUsingPUT({ code, opdDTO }: UpdateOpdUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>
    updateOpdUsingPUT({ code, opdDTO }: UpdateOpdUsingPUTRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {
        throwIfNullOrUndefined(code, 'code', 'updateOpdUsingPUT');
        throwIfNullOrUndefined(opdDTO, 'opdDTO', 'updateOpdUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<number>({
            url: '/opds/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: opdDTO,
        }, opts?.responseOpts);
    };

}
