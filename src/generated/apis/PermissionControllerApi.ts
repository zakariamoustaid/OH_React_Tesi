// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PermissionDTO,
} from '../models';

export interface DeletePermissionUsingDELETERequest {
    id: number;
}

export interface InsertPermissionUsingPOSTRequest {
    permissionDTO: PermissionDTO;
}

export interface RetrievePermissionByIdUsingGETRequest {
    id: number;
}

export interface RetrievePermissionByNameUsingGETRequest {
    name: string;
}

export interface RetrievePermissionsByUserGroupcodeUsingGETRequest {
    userGroupCode: string;
}

export interface UpdatePermissionUsingPUTRequest {
    id: number;
    permissionDTO: PermissionDTO;
}

/**
 * no description
 */
export class PermissionControllerApi extends BaseAPI {

    /**
     * deletePermission
     */
    deletePermissionUsingDELETE({ id }: DeletePermissionUsingDELETERequest): Observable<boolean>
    deletePermissionUsingDELETE({ id }: DeletePermissionUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deletePermissionUsingDELETE({ id }: DeletePermissionUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(id, 'id', 'deletePermissionUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/permissions/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * insertPermission
     */
    insertPermissionUsingPOST({ permissionDTO }: InsertPermissionUsingPOSTRequest): Observable<PermissionDTO>
    insertPermissionUsingPOST({ permissionDTO }: InsertPermissionUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>
    insertPermissionUsingPOST({ permissionDTO }: InsertPermissionUsingPOSTRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {
        throwIfNullOrUndefined(permissionDTO, 'permissionDTO', 'insertPermissionUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PermissionDTO>({
            url: '/permissions',
            method: 'POST',
            headers,
            body: permissionDTO,
        }, opts?.responseOpts);
    };

    /**
     * retrieveAllPermissions
     */
    retrieveAllPermissionsUsingGET(): Observable<Array<PermissionDTO>>
    retrieveAllPermissionsUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PermissionDTO>>>
    retrieveAllPermissionsUsingGET(opts?: OperationOpts): Observable<Array<PermissionDTO> | RawAjaxResponse<Array<PermissionDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<PermissionDTO>>({
            url: '/permissions',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * retrievePermissionById
     */
    retrievePermissionByIdUsingGET({ id }: RetrievePermissionByIdUsingGETRequest): Observable<PermissionDTO>
    retrievePermissionByIdUsingGET({ id }: RetrievePermissionByIdUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>
    retrievePermissionByIdUsingGET({ id }: RetrievePermissionByIdUsingGETRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {
        throwIfNullOrUndefined(id, 'id', 'retrievePermissionByIdUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PermissionDTO>({
            url: '/permissions/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * retrievePermissionByName
     */
    retrievePermissionByNameUsingGET({ name }: RetrievePermissionByNameUsingGETRequest): Observable<PermissionDTO>
    retrievePermissionByNameUsingGET({ name }: RetrievePermissionByNameUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>
    retrievePermissionByNameUsingGET({ name }: RetrievePermissionByNameUsingGETRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {
        throwIfNullOrUndefined(name, 'name', 'retrievePermissionByNameUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PermissionDTO>({
            url: '/permissions/name/{name}'.replace('{name}', encodeURI(name)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * retrievePermissionsByUserGroupcode
     */
    retrievePermissionsByUserGroupcodeUsingGET({ userGroupCode }: RetrievePermissionsByUserGroupcodeUsingGETRequest): Observable<Array<PermissionDTO>>
    retrievePermissionsByUserGroupcodeUsingGET({ userGroupCode }: RetrievePermissionsByUserGroupcodeUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PermissionDTO>>>
    retrievePermissionsByUserGroupcodeUsingGET({ userGroupCode }: RetrievePermissionsByUserGroupcodeUsingGETRequest, opts?: OperationOpts): Observable<Array<PermissionDTO> | RawAjaxResponse<Array<PermissionDTO>>> {
        throwIfNullOrUndefined(userGroupCode, 'userGroupCode', 'retrievePermissionsByUserGroupcodeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<PermissionDTO>>({
            url: '/permissions/userGroupCode/{userGroupCode}'.replace('{userGroupCode}', encodeURI(userGroupCode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * updatePermission
     */
    updatePermissionUsingPUT({ id, permissionDTO }: UpdatePermissionUsingPUTRequest): Observable<PermissionDTO>
    updatePermissionUsingPUT({ id, permissionDTO }: UpdatePermissionUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PermissionDTO>>
    updatePermissionUsingPUT({ id, permissionDTO }: UpdatePermissionUsingPUTRequest, opts?: OperationOpts): Observable<PermissionDTO | RawAjaxResponse<PermissionDTO>> {
        throwIfNullOrUndefined(id, 'id', 'updatePermissionUsingPUT');
        throwIfNullOrUndefined(permissionDTO, 'permissionDTO', 'updatePermissionUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PermissionDTO>({
            url: '/permissions/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: permissionDTO,
        }, opts?.responseOpts);
    };

}
