// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PriceDTO,
    PriceListDTO,
} from '../models';

export interface CopyByFactorAndStepUsingGETRequest {
    factor: number;
    id: number;
    step: number;
}

export interface CopyListUsingGETRequest {
    id: number;
}

export interface DeletePriceListUsingDELETERequest {
    id: number;
}

export interface NewPriceListUsingPOSTRequest {
    priceListDTO: PriceListDTO;
}

export interface UpdatePriceListtUsingPUTRequest {
    id: number;
    priceListDTO: PriceListDTO;
}

/**
 * no description
 */
export class PriceListControllerApi extends BaseAPI {

    /**
     * copyByFactorAndStep
     */
    copyByFactorAndStepUsingGET({ factor, id, step }: CopyByFactorAndStepUsingGETRequest): Observable<boolean>
    copyByFactorAndStepUsingGET({ factor, id, step }: CopyByFactorAndStepUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    copyByFactorAndStepUsingGET({ factor, id, step }: CopyByFactorAndStepUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(factor, 'factor', 'copyByFactorAndStepUsingGET');
        throwIfNullOrUndefined(id, 'id', 'copyByFactorAndStepUsingGET');
        throwIfNullOrUndefined(step, 'step', 'copyByFactorAndStepUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'factor': factor,
            'step': step,
        };

        return this.request<boolean>({
            url: '/pricelists/duplicate/byfactor/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * copyList
     */
    copyListUsingGET({ id }: CopyListUsingGETRequest): Observable<boolean>
    copyListUsingGET({ id }: CopyListUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    copyListUsingGET({ id }: CopyListUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(id, 'id', 'copyListUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/pricelists/duplicate/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * deletePriceList
     */
    deletePriceListUsingDELETE({ id }: DeletePriceListUsingDELETERequest): Observable<boolean>
    deletePriceListUsingDELETE({ id }: DeletePriceListUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deletePriceListUsingDELETE({ id }: DeletePriceListUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(id, 'id', 'deletePriceListUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/pricelists/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPriceLists
     */
    getPriceListsUsingGET(): Observable<Array<PriceListDTO>>
    getPriceListsUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PriceListDTO>>>
    getPriceListsUsingGET(opts?: OperationOpts): Observable<Array<PriceListDTO> | RawAjaxResponse<Array<PriceListDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<PriceListDTO>>({
            url: '/pricelists',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPrices
     */
    getPricesUsingGET(): Observable<Array<PriceDTO>>
    getPricesUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PriceDTO>>>
    getPricesUsingGET(opts?: OperationOpts): Observable<Array<PriceDTO> | RawAjaxResponse<Array<PriceDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<PriceDTO>>({
            url: '/pricelists/prices',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newPriceList
     */
    newPriceListUsingPOST({ priceListDTO }: NewPriceListUsingPOSTRequest): Observable<string>
    newPriceListUsingPOST({ priceListDTO }: NewPriceListUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    newPriceListUsingPOST({ priceListDTO }: NewPriceListUsingPOSTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(priceListDTO, 'priceListDTO', 'newPriceListUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/pricelists',
            method: 'POST',
            headers,
            body: priceListDTO,
        }, opts?.responseOpts);
    };

    /**
     * updatePriceListt
     */
    updatePriceListtUsingPUT({ id, priceListDTO }: UpdatePriceListtUsingPUTRequest): Observable<string>
    updatePriceListtUsingPUT({ id, priceListDTO }: UpdatePriceListtUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<string>>
    updatePriceListtUsingPUT({ id, priceListDTO }: UpdatePriceListtUsingPUTRequest, opts?: OperationOpts): Observable<string | RawAjaxResponse<string>> {
        throwIfNullOrUndefined(id, 'id', 'updatePriceListtUsingPUT');
        throwIfNullOrUndefined(priceListDTO, 'priceListDTO', 'updatePriceListtUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<string>({
            url: '/pricelists/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: priceListDTO,
        }, opts?.responseOpts);
    };

}