// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    SupplierDTO,
} from '../models';

export interface GetSuppliersUsingGETRequest {
    id: number;
}

export interface GetSuppliersUsingGET1Request {
    excludeDeleted?: boolean;
}

export interface SaveSupplierUsingPOSTRequest {
    suplierDTO: SupplierDTO;
}

export interface UpdateSupplierUsingPUTRequest {
    suplierDTO: SupplierDTO;
}

/**
 * no description
 */
export class SupplierControllerApi extends BaseAPI {

    /**
     * getSuppliers
     */
    getSuppliersUsingGET({ id }: GetSuppliersUsingGETRequest): Observable<SupplierDTO>
    getSuppliersUsingGET({ id }: GetSuppliersUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<SupplierDTO>>
    getSuppliersUsingGET({ id }: GetSuppliersUsingGETRequest, opts?: OperationOpts): Observable<SupplierDTO | RawAjaxResponse<SupplierDTO>> {
        throwIfNullOrUndefined(id, 'id', 'getSuppliersUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<SupplierDTO>({
            url: '/suppliers/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getSuppliers
     */
    getSuppliersUsingGET1({ excludeDeleted }: GetSuppliersUsingGET1Request): Observable<Array<SupplierDTO>>
    getSuppliersUsingGET1({ excludeDeleted }: GetSuppliersUsingGET1Request, opts?: OperationOpts): Observable<RawAjaxResponse<Array<SupplierDTO>>>
    getSuppliersUsingGET1({ excludeDeleted }: GetSuppliersUsingGET1Request, opts?: OperationOpts): Observable<Array<SupplierDTO> | RawAjaxResponse<Array<SupplierDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (excludeDeleted != null) { query['exclude_deleted'] = excludeDeleted; }

        return this.request<Array<SupplierDTO>>({
            url: '/suppliers',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * saveSupplier
     */
    saveSupplierUsingPOST({ suplierDTO }: SaveSupplierUsingPOSTRequest): Observable<boolean>
    saveSupplierUsingPOST({ suplierDTO }: SaveSupplierUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    saveSupplierUsingPOST({ suplierDTO }: SaveSupplierUsingPOSTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(suplierDTO, 'suplierDTO', 'saveSupplierUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/suppliers',
            method: 'POST',
            headers,
            body: suplierDTO,
        }, opts?.responseOpts);
    };

    /**
     * updateSupplier
     */
    updateSupplierUsingPUT({ suplierDTO }: UpdateSupplierUsingPUTRequest): Observable<boolean>
    updateSupplierUsingPUT({ suplierDTO }: UpdateSupplierUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    updateSupplierUsingPUT({ suplierDTO }: UpdateSupplierUsingPUTRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(suplierDTO, 'suplierDTO', 'updateSupplierUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/suppliers',
            method: 'PUT',
            headers,
            body: suplierDTO,
        }, opts?.responseOpts);
    };

}
